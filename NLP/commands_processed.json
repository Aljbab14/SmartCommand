[
  {
    "key": "escape escape",
    "command": "workbench.action.exitZenMode",
    "when": "inZenMode",
    "to_ebd": "workbench action exit zen mode"
  },
  {
    "key": "shift+escape",
    "command": "closeReferenceSearch",
    "when": "inReferenceSearchEditor && !config.editor.stablePeek",
    "to_ebd": "close reference search"
  },
  {
    "key": "escape",
    "command": "closeReferenceSearch",
    "when": "inReferenceSearchEditor && !config.editor.stablePeek",
    "to_ebd": "close reference search"
  },
  {
    "key": "escape",
    "command": "editor.closeTestPeek",
    "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek",
    "to_ebd": "editor close test peek"
  },
  {
    "key": "shift+escape",
    "command": "cancelSelection",
    "when": "editorHasSelection && textInputFocus",
    "to_ebd": "cancel selection"
  },
  {
    "key": "escape",
    "command": "cancelSelection",
    "when": "editorHasSelection && textInputFocus",
    "to_ebd": "cancel selection"
  },
  {
    "key": "ctrl+end",
    "command": "cursorBottom",
    "when": "textInputFocus",
    "to_ebd": "cursor bottom"
  },
  {
    "key": "ctrl+shift+end",
    "command": "cursorBottomSelect",
    "when": "textInputFocus",
    "to_ebd": "cursor bottom select"
  },
  {
    "key": "down",
    "command": "cursorDown",
    "when": "textInputFocus",
    "to_ebd": "cursor down"
  },
  {
    "key": "shift+down",
    "command": "cursorDownSelect",
    "when": "textInputFocus",
    "to_ebd": "cursor down select"
  },
  {
    "key": "end",
    "command": "cursorEnd",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    },
    "to_ebd": "cursor end"
  },
  {
    "key": "shift+end",
    "command": "cursorEndSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    },
    "to_ebd": "cursor end select"
  },
  {
    "key": "home",
    "command": "cursorHome",
    "when": "textInputFocus",
    "to_ebd": "cursor home"
  },
  {
    "key": "shift+home",
    "command": "cursorHomeSelect",
    "when": "textInputFocus",
    "to_ebd": "cursor home select"
  },
  {
    "key": "left",
    "command": "cursorLeft",
    "when": "textInputFocus",
    "to_ebd": "cursor left"
  },
  {
    "key": "shift+left",
    "command": "cursorLeftSelect",
    "when": "textInputFocus",
    "to_ebd": "cursor left select"
  },
  {
    "key": "pagedown",
    "command": "cursorPageDown",
    "when": "textInputFocus",
    "to_ebd": "cursor page down"
  },
  {
    "key": "shift+pagedown",
    "command": "cursorPageDownSelect",
    "when": "textInputFocus",
    "to_ebd": "cursor page down select"
  },
  {
    "key": "pageup",
    "command": "cursorPageUp",
    "when": "textInputFocus",
    "to_ebd": "cursor page up"
  },
  {
    "key": "shift+pageup",
    "command": "cursorPageUpSelect",
    "when": "textInputFocus",
    "to_ebd": "cursor page up select"
  },
  {
    "key": "right",
    "command": "cursorRight",
    "when": "textInputFocus",
    "to_ebd": "cursor right"
  },
  {
    "key": "shift+right",
    "command": "cursorRightSelect",
    "when": "textInputFocus",
    "to_ebd": "cursor right select"
  },
  {
    "key": "ctrl+home",
    "command": "cursorTop",
    "when": "textInputFocus",
    "to_ebd": "cursor top"
  },
  {
    "key": "ctrl+shift+home",
    "command": "cursorTopSelect",
    "when": "textInputFocus",
    "to_ebd": "cursor top select"
  },
  {
    "key": "up",
    "command": "cursorUp",
    "when": "textInputFocus",
    "to_ebd": "cursor up"
  },
  {
    "key": "shift+up",
    "command": "cursorUpSelect",
    "when": "textInputFocus",
    "to_ebd": "cursor up select"
  },
  {
    "key": "shift+backspace",
    "command": "deleteLeft",
    "when": "textInputFocus",
    "to_ebd": "delete left"
  },
  {
    "key": "backspace",
    "command": "deleteLeft",
    "when": "textInputFocus",
    "to_ebd": "delete left"
  },
  {
    "key": "delete",
    "command": "deleteRight",
    "when": "textInputFocus",
    "to_ebd": "delete right"
  },
  {
    "key": "ctrl+a",
    "command": "editor.action.selectAll",
    "to_ebd": "editor action select all"
  },
  {
    "key": "ctrl+l",
    "command": "expandLineSelection",
    "when": "textInputFocus",
    "to_ebd": "expand line selection"
  },
  {
    "key": "shift+tab",
    "command": "outdent",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus",
    "to_ebd": "outdent"
  },
  {
    "key": "ctrl+shift+z",
    "command": "redo",
    "to_ebd": "redo"
  },
  {
    "key": "ctrl+y",
    "command": "redo",
    "to_ebd": "redo"
  },
  {
    "key": "ctrl+down",
    "command": "scrollLineDown",
    "when": "textInputFocus",
    "to_ebd": "scroll line down"
  },
  {
    "key": "ctrl+up",
    "command": "scrollLineUp",
    "when": "textInputFocus",
    "to_ebd": "scroll line up"
  },
  {
    "key": "alt+pagedown",
    "command": "scrollPageDown",
    "when": "textInputFocus",
    "to_ebd": "scroll page down"
  },
  {
    "key": "alt+pageup",
    "command": "scrollPageUp",
    "when": "textInputFocus",
    "to_ebd": "scroll page up"
  },
  {
    "key": "tab",
    "command": "tab",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus",
    "to_ebd": "tab"
  },
  {
    "key": "ctrl+z",
    "command": "undo",
    "to_ebd": "undo"
  },
  {
    "key": "shift+down",
    "command": "cursorColumnSelectDown",
    "when": "editorColumnSelection && textInputFocus",
    "to_ebd": "cursor column select down"
  },
  {
    "key": "shift+left",
    "command": "cursorColumnSelectLeft",
    "when": "editorColumnSelection && textInputFocus",
    "to_ebd": "cursor column select left"
  },
  {
    "key": "shift+pagedown",
    "command": "cursorColumnSelectPageDown",
    "when": "editorColumnSelection && textInputFocus",
    "to_ebd": "cursor column select page down"
  },
  {
    "key": "shift+pageup",
    "command": "cursorColumnSelectPageUp",
    "when": "editorColumnSelection && textInputFocus",
    "to_ebd": "cursor column select page up"
  },
  {
    "key": "shift+right",
    "command": "cursorColumnSelectRight",
    "when": "editorColumnSelection && textInputFocus",
    "to_ebd": "cursor column select right"
  },
  {
    "key": "shift+up",
    "command": "cursorColumnSelectUp",
    "when": "editorColumnSelection && textInputFocus",
    "to_ebd": "cursor column select up"
  },
  {
    "key": "shift+escape",
    "command": "removeSecondaryCursors",
    "when": "editorHasMultipleSelections && textInputFocus",
    "to_ebd": "remove secondary cursors"
  },
  {
    "key": "escape",
    "command": "removeSecondaryCursors",
    "when": "editorHasMultipleSelections && textInputFocus",
    "to_ebd": "remove secondary cursors"
  },
  {
    "key": "f12",
    "command": "goToNextReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible",
    "to_ebd": "go to next reference"
  },
  {
    "key": "f4",
    "command": "goToNextReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible",
    "to_ebd": "go to next reference"
  },
  {
    "key": "shift+f12",
    "command": "goToPreviousReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible",
    "to_ebd": "go to previous reference"
  },
  {
    "key": "shift+f4",
    "command": "goToPreviousReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible",
    "to_ebd": "go to previous reference"
  },
  {
    "key": "shift+enter",
    "command": "refactorPreview.apply",
    "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'",
    "to_ebd": "refactor preview apply"
  },
  {
    "key": "alt+enter",
    "command": "testing.editFocusedTest",
    "when": "focusedView == 'workbench.view.testing'",
    "to_ebd": "testing edit focused test"
  },
  {
    "key": "escape",
    "command": "notebook.cell.quitEdit",
    "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible",
    "to_ebd": "notebook cell quit edit"
  },
  {
    "key": "meta+enter",
    "command": "notebook.cell.quitEdit",
    "when": "inputFocus && notebookEditorFocused && notebookCellType == 'markup'",
    "to_ebd": "notebook cell quit edit"
  },
  {
    "key": "ctrl+f",
    "command": "actions.find",
    "when": "editorFocus || editorIsOpen",
    "to_ebd": "actions find"
  },
  {
    "key": "enter",
    "command": "breakpointWidget.action.acceptInput",
    "when": "breakpointWidgetVisible && inBreakpointWidget",
    "to_ebd": "breakpoint widget action accept input"
  },
  {
    "key": "shift+escape",
    "command": "closeBreakpointWidget",
    "when": "breakpointWidgetVisible && textInputFocus",
    "to_ebd": "close breakpoint widget"
  },
  {
    "key": "escape",
    "command": "closeBreakpointWidget",
    "when": "breakpointWidgetVisible && textInputFocus",
    "to_ebd": "close breakpoint widget"
  },
  {
    "key": "ctrl+u",
    "command": "cursorUndo",
    "when": "textInputFocus",
    "to_ebd": "cursor undo"
  },
  {
    "key": "ctrl+right",
    "command": "cursorWordEndRight",
    "when": "textInputFocus",
    "to_ebd": "cursor word end right"
  },
  {
    "key": "ctrl+shift+right",
    "command": "cursorWordEndRightSelect",
    "when": "textInputFocus",
    "to_ebd": "cursor word end right select"
  },
  {
    "key": "ctrl+left",
    "command": "cursorWordLeft",
    "when": "textInputFocus",
    "to_ebd": "cursor word left"
  },
  {
    "key": "ctrl+shift+left",
    "command": "cursorWordLeftSelect",
    "when": "textInputFocus",
    "to_ebd": "cursor word left select"
  },
  {
    "key": "ctrl+backspace",
    "command": "deleteWordLeft",
    "when": "textInputFocus && !editorReadonly",
    "to_ebd": "delete word left"
  },
  {
    "key": "ctrl+delete",
    "command": "deleteWordRight",
    "when": "textInputFocus && !editorReadonly",
    "to_ebd": "delete word right"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "editor.action.addCommentLine",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action add comment line"
  },
  {
    "key": "ctrl+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus",
    "to_ebd": "editor action add selection to next find match"
  },
  {
    "key": "shift+alt+[IntlBackslash]",
    "command": "editor.action.autoFix",
    "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/",
    "to_ebd": "editor action auto fix"
  },
  {
    "key": "shift+alt+.",
    "command": "editor.action.autoFix",
    "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/",
    "to_ebd": "editor action auto fix"
  },
  {
    "key": "ctrl+shift+a",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action block comment"
  },
  {
    "key": "escape",
    "command": "editor.action.cancelSelectionAnchor",
    "when": "editorTextFocus && selectionAnchorSet",
    "to_ebd": "editor action cancel selection anchor"
  },
  {
    "key": "ctrl+f2",
    "command": "editor.action.changeAll",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action change all"
  },
  {
    "key": "ctrl+c",
    "command": "editor.action.clipboardCopyAction",
    "to_ebd": "editor action clipboard copy action"
  },
  {
    "key": "ctrl+x",
    "command": "editor.action.clipboardCutAction",
    "to_ebd": "editor action clipboard cut action"
  },
  {
    "key": "shift+insert",
    "command": "editor.action.clipboardPasteAction",
    "to_ebd": "editor action clipboard paste action"
  },
  {
    "key": "ctrl+v",
    "command": "editor.action.clipboardPasteAction",
    "to_ebd": "editor action clipboard paste action"
  },
  {
    "key": "ctrl+/",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action comment line"
  },
  {
    "key": "ctrl+shift+alt+down",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action copy lines down action"
  },
  {
    "key": "ctrl+shift+alt+up",
    "command": "editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action copy lines up action"
  },
  {
    "key": "ctrl+k ctrl+k",
    "command": "editor.action.defineKeybinding",
    "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'",
    "to_ebd": "editor action define keybinding"
  },
  {
    "key": "ctrl+shift+k",
    "command": "editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly",
    "to_ebd": "editor action delete lines"
  },
  {
    "key": "f7",
    "command": "editor.action.diffReview.next",
    "when": "isInDiffEditor",
    "to_ebd": "editor action diff review next"
  },
  {
    "key": "shift+f7",
    "command": "editor.action.diffReview.prev",
    "when": "isInDiffEditor",
    "to_ebd": "editor action diff review prev"
  },
  {
    "key": "alt+f3",
    "command": "editor.action.dirtydiff.next",
    "when": "editorTextFocus && !textCompareEditorActive",
    "to_ebd": "editor action dirtydiff next"
  },
  {
    "key": "shift+alt+f3",
    "command": "editor.action.dirtydiff.previous",
    "when": "editorTextFocus && !textCompareEditorActive",
    "to_ebd": "editor action dirtydiff previous"
  },
  {
    "key": "enter",
    "command": "editor.action.extensioneditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'",
    "to_ebd": "editor action extensioneditor find next"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.extensioneditor.findPrevious",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'",
    "to_ebd": "editor action extensioneditor find previous"
  },
  {
    "key": "ctrl+f",
    "command": "editor.action.extensioneditor.showfind",
    "when": "!editorFocus && activeEditor == 'workbench.editor.extension'",
    "to_ebd": "editor action extensioneditor showfind"
  },
  {
    "key": "ctrl+shift+i",
    "command": "editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor",
    "to_ebd": "editor action format document"
  },
  {
    "key": "ctrl+shift+i",
    "command": "editor.action.formatDocument.none",
    "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly",
    "to_ebd": "editor action format document none"
  },
  {
    "key": "ctrl+k ctrl+f",
    "command": "editor.action.formatSelection",
    "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly",
    "to_ebd": "editor action format selection"
  },
  {
    "key": "ctrl+f12",
    "command": "editor.action.goToImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor",
    "to_ebd": "editor action go to implementation"
  },
  {
    "key": "shift+f12",
    "command": "editor.action.goToReferences",
    "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor",
    "to_ebd": "editor action go to references"
  },
  {
    "key": "ctrl+shift+[IntlBackslash]",
    "command": "editor.action.inPlaceReplace.down",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action in place replace down"
  },
  {
    "key": "ctrl+shift+.",
    "command": "editor.action.inPlaceReplace.down",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action in place replace down"
  },
  {
    "key": "ctrl+[IntlBackslash]",
    "command": "editor.action.inPlaceReplace.up",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action in place replace up"
  },
  {
    "key": "ctrl+shift+,",
    "command": "editor.action.inPlaceReplace.up",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action in place replace up"
  },
  {
    "key": "ctrl+]",
    "command": "editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action indent lines"
  },
  {
    "key": "escape",
    "command": "editor.action.inlineSuggest.hide",
    "when": "inlineSuggestionVisible",
    "to_ebd": "editor action inline suggest hide"
  },
  {
    "key": "alt+]",
    "command": "editor.action.inlineSuggest.showNext",
    "when": "inlineSuggestionVisible && !editorReadonly",
    "to_ebd": "editor action inline suggest show next"
  },
  {
    "key": "alt+[",
    "command": "editor.action.inlineSuggest.showPrevious",
    "when": "inlineSuggestionVisible && !editorReadonly",
    "to_ebd": "editor action inline suggest show previous"
  },
  {
    "key": "ctrl+shift+up",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus",
    "to_ebd": "editor action insert cursor above"
  },
  {
    "key": "shift+alt+up",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus",
    "to_ebd": "editor action insert cursor above"
  },
  {
    "key": "shift+alt+i",
    "command": "editor.action.insertCursorAtEndOfEachLineSelected",
    "when": "editorTextFocus",
    "to_ebd": "editor action insert cursor at end of each line selected"
  },
  {
    "key": "ctrl+shift+down",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus",
    "to_ebd": "editor action insert cursor below"
  },
  {
    "key": "shift+alt+down",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus",
    "to_ebd": "editor action insert cursor below"
  },
  {
    "key": "ctrl+enter",
    "command": "editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action insert line after"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "editor.action.insertLineBefore",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action insert line before"
  },
  {
    "key": "ctrl+shift+\\",
    "command": "editor.action.jumpToBracket",
    "when": "editorTextFocus",
    "to_ebd": "editor action jump to bracket"
  },
  {
    "key": "ctrl+shift+f2",
    "command": "editor.action.linkedEditing",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly",
    "to_ebd": "editor action linked editing"
  },
  {
    "key": "alt+f8",
    "command": "editor.action.marker.next",
    "when": "editorFocus",
    "to_ebd": "editor action marker next"
  },
  {
    "key": "f8",
    "command": "editor.action.marker.nextInFiles",
    "when": "editorFocus",
    "to_ebd": "editor action marker next in files"
  },
  {
    "key": "shift+alt+f8",
    "command": "editor.action.marker.prev",
    "when": "editorFocus",
    "to_ebd": "editor action marker prev"
  },
  {
    "key": "shift+f8",
    "command": "editor.action.marker.prevInFiles",
    "when": "editorFocus",
    "to_ebd": "editor action marker prev in files"
  },
  {
    "key": "alt+down",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action move lines down action"
  },
  {
    "key": "alt+up",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action move lines up action"
  },
  {
    "key": "ctrl+k ctrl+d",
    "command": "editor.action.moveSelectionToNextFindMatch",
    "when": "editorFocus",
    "to_ebd": "editor action move selection to next find match"
  },
  {
    "key": "alt+f9",
    "command": "editor.action.nextCommentThreadAction",
    "when": "editorFocus",
    "to_ebd": "editor action next comment thread action"
  },
  {
    "key": "f3",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus",
    "to_ebd": "editor action next match find action"
  },
  {
    "key": "enter",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed",
    "to_ebd": "editor action next match find action"
  },
  {
    "key": "ctrl+f3",
    "command": "editor.action.nextSelectionMatchFindAction",
    "when": "editorFocus",
    "to_ebd": "editor action next selection match find action"
  },
  {
    "key": "shift+alt+o",
    "command": "editor.action.organizeImports",
    "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/",
    "to_ebd": "editor action organize imports"
  },
  {
    "key": "ctrl+[",
    "command": "editor.action.outdentLines",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action outdent lines"
  },
  {
    "key": "ctrl+shift+f10",
    "command": "editor.action.peekDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor",
    "to_ebd": "editor action peek definition"
  },
  {
    "key": "ctrl+shift+f12",
    "command": "editor.action.peekImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor",
    "to_ebd": "editor action peek implementation"
  },
  {
    "key": "shift+alt+f9",
    "command": "editor.action.previousCommentThreadAction",
    "when": "editorFocus",
    "to_ebd": "editor action previous comment thread action"
  },
  {
    "key": "shift+f3",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus",
    "to_ebd": "editor action previous match find action"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus && findInputFocussed",
    "to_ebd": "editor action previous match find action"
  },
  {
    "key": "ctrl+shift+f3",
    "command": "editor.action.previousSelectionMatchFindAction",
    "when": "editorFocus",
    "to_ebd": "editor action previous selection match find action"
  },
  {
    "key": "ctrl+.",
    "command": "editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly",
    "to_ebd": "editor action quick fix"
  },
  {
    "key": "ctrl+shift+r",
    "command": "editor.action.refactor",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly",
    "to_ebd": "editor action refactor"
  },
  {
    "key": "ctrl+k ctrl+u",
    "command": "editor.action.removeCommentLine",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action remove comment line"
  },
  {
    "key": "f2",
    "command": "editor.action.rename",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly",
    "to_ebd": "editor action rename"
  },
  {
    "key": "f12",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor",
    "to_ebd": "editor action reveal definition"
  },
  {
    "key": "ctrl+k f12",
    "command": "editor.action.revealDefinitionAside",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor",
    "to_ebd": "editor action reveal definition aside"
  },
  {
    "key": "ctrl+k ctrl+k",
    "command": "editor.action.selectFromAnchorToCursor",
    "when": "editorTextFocus && selectionAnchorSet",
    "to_ebd": "editor action select from anchor to cursor"
  },
  {
    "key": "ctrl+shift+l",
    "command": "editor.action.selectHighlights",
    "when": "editorFocus",
    "to_ebd": "editor action select highlights"
  },
  {
    "key": "ctrl+k ctrl+b",
    "command": "editor.action.setSelectionAnchor",
    "when": "editorTextFocus",
    "to_ebd": "editor action set selection anchor"
  },
  {
    "key": "alt+f1",
    "command": "editor.action.showAccessibilityHelp",
    "to_ebd": "editor action show accessibility help"
  },
  {
    "key": "shift+alt+f1",
    "command": "editor.action.showAccessibilityHelp",
    "to_ebd": "editor action show accessibility help"
  },
  {
    "key": "shift+f10",
    "command": "editor.action.showContextMenu",
    "when": "textInputFocus",
    "to_ebd": "editor action show context menu"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "editor.action.showHover",
    "when": "editorTextFocus",
    "to_ebd": "editor action show hover"
  },
  {
    "key": "shift+alt+right",
    "command": "editor.action.smartSelect.expand",
    "when": "editorTextFocus",
    "to_ebd": "editor action smart select expand"
  },
  {
    "key": "shift+alt+left",
    "command": "editor.action.smartSelect.shrink",
    "when": "editorTextFocus",
    "to_ebd": "editor action smart select shrink"
  },
  {
    "key": "ctrl+h",
    "command": "editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen",
    "to_ebd": "editor action start find replace action"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.toggleTabFocusMode",
    "to_ebd": "editor action toggle tab focus mode"
  },
  {
    "key": "alt+z",
    "command": "editor.action.toggleWordWrap",
    "to_ebd": "editor action toggle word wrap"
  },
  {
    "key": "ctrl+shift+space",
    "command": "editor.action.triggerParameterHints",
    "when": "editorHasSignatureHelpProvider && editorTextFocus",
    "to_ebd": "editor action trigger parameter hints"
  },
  {
    "key": "ctrl+i",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly",
    "to_ebd": "editor action trigger suggest"
  },
  {
    "key": "ctrl+space",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly",
    "to_ebd": "editor action trigger suggest"
  },
  {
    "key": "ctrl+k ctrl+x",
    "command": "editor.action.trimTrailingWhitespace",
    "when": "editorTextFocus && !editorReadonly",
    "to_ebd": "editor action trim trailing whitespace"
  },
  {
    "key": "enter",
    "command": "editor.action.webvieweditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'",
    "to_ebd": "editor action webvieweditor find next"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.webvieweditor.findPrevious",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'",
    "to_ebd": "editor action webvieweditor find previous"
  },
  {
    "key": "escape",
    "command": "editor.action.webvieweditor.hideFind",
    "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'",
    "to_ebd": "editor action webvieweditor hide find"
  },
  {
    "key": "ctrl+f",
    "command": "editor.action.webvieweditor.showFind",
    "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'",
    "to_ebd": "editor action webvieweditor show find"
  },
  {
    "key": "f7",
    "command": "editor.action.wordHighlight.next",
    "when": "editorTextFocus && hasWordHighlights",
    "to_ebd": "editor action word highlight next"
  },
  {
    "key": "shift+f7",
    "command": "editor.action.wordHighlight.prev",
    "when": "editorTextFocus && hasWordHighlights",
    "to_ebd": "editor action word highlight prev"
  },
  {
    "key": "escape",
    "command": "editor.cancelOperation",
    "when": "cancellableOperation",
    "to_ebd": "editor cancel operation"
  },
  {
    "key": "ctrl+k ctrl+,",
    "command": "editor.createFoldingRangeFromSelection",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor create folding range from selection"
  },
  {
    "key": "escape",
    "command": "editor.debug.action.closeExceptionWidget",
    "when": "exceptionWidgetVisible",
    "to_ebd": "editor debug action close exception widget"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "editor.debug.action.showDebugHover",
    "when": "editorTextFocus && inDebugMode",
    "to_ebd": "editor debug action show debug hover"
  },
  {
    "key": "f9",
    "command": "editor.debug.action.toggleBreakpoint",
    "when": "debuggersAvailable && editorTextFocus",
    "to_ebd": "editor debug action toggle breakpoint"
  },
  {
    "key": "tab",
    "command": "editor.emmet.action.expandAbbreviation",
    "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus",
    "to_ebd": "editor emmet action expand abbreviation"
  },
  {
    "key": "ctrl+shift+[",
    "command": "editor.fold",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold"
  },
  {
    "key": "ctrl+k ctrl+0",
    "command": "editor.foldAll",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold all"
  },
  {
    "key": "ctrl+k ctrl+/",
    "command": "editor.foldAllBlockComments",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold all block comments"
  },
  {
    "key": "ctrl+k ctrl+-",
    "command": "editor.foldAllExcept",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold all except"
  },
  {
    "key": "ctrl+k ctrl+8",
    "command": "editor.foldAllMarkerRegions",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold all marker regions"
  },
  {
    "key": "ctrl+k ctrl+1",
    "command": "editor.foldLevel1",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold level1"
  },
  {
    "key": "ctrl+k ctrl+2",
    "command": "editor.foldLevel2",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold level2"
  },
  {
    "key": "ctrl+k ctrl+3",
    "command": "editor.foldLevel3",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold level3"
  },
  {
    "key": "ctrl+k ctrl+4",
    "command": "editor.foldLevel4",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold level4"
  },
  {
    "key": "ctrl+k ctrl+5",
    "command": "editor.foldLevel5",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold level5"
  },
  {
    "key": "ctrl+k ctrl+6",
    "command": "editor.foldLevel6",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold level6"
  },
  {
    "key": "ctrl+k ctrl+7",
    "command": "editor.foldLevel7",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold level7"
  },
  {
    "key": "ctrl+k ctrl+[",
    "command": "editor.foldRecursively",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor fold recursively"
  },
  {
    "key": "f12",
    "command": "editor.gotoNextSymbolFromResult",
    "when": "hasSymbols",
    "to_ebd": "editor goto next symbol from result"
  },
  {
    "key": "escape",
    "command": "editor.gotoNextSymbolFromResult.cancel",
    "when": "hasSymbols",
    "to_ebd": "editor goto next symbol from result cancel"
  },
  {
    "key": "ctrl+k ctrl+.",
    "command": "editor.removeManualFoldingRanges",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor remove manual folding ranges"
  },
  {
    "key": "ctrl+k ctrl+l",
    "command": "editor.toggleFold",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor toggle fold"
  },
  {
    "key": "ctrl+shift+]",
    "command": "editor.unfold",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor unfold"
  },
  {
    "key": "ctrl+k ctrl+j",
    "command": "editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor unfold all"
  },
  {
    "key": "ctrl+k ctrl+=",
    "command": "editor.unfoldAllExcept",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor unfold all except"
  },
  {
    "key": "ctrl+k ctrl+9",
    "command": "editor.unfoldAllMarkerRegions",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor unfold all marker regions"
  },
  {
    "key": "ctrl+k ctrl+]",
    "command": "editor.unfoldRecursively",
    "when": "editorTextFocus && foldingEnabled",
    "to_ebd": "editor unfold recursively"
  },
  {
    "key": "escape",
    "command": "inlayHints.stopReadingLineWithHint",
    "when": "isReadingLineWithInlayHints",
    "to_ebd": "inlay hints stop reading line with hint"
  },
  {
    "key": "tab",
    "command": "insertSnippet",
    "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode",
    "to_ebd": "insert snippet"
  },
  {
    "key": "meta+enter",
    "command": "interactive.execute",
    "when": "resourceScheme == 'vscode-interactive'",
    "to_ebd": "interactive execute"
  },
  {
    "key": "pagedown",
    "command": "notebook.cell.cursorPageDown",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused",
    "to_ebd": "notebook cell cursor page down"
  },
  {
    "key": "shift+pagedown",
    "command": "notebook.cell.cursorPageDownSelect",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused",
    "to_ebd": "notebook cell cursor page down select"
  },
  {
    "key": "pageup",
    "command": "notebook.cell.cursorPageUp",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused",
    "to_ebd": "notebook cell cursor page up"
  },
  {
    "key": "shift+pageup",
    "command": "notebook.cell.cursorPageUpSelect",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused",
    "to_ebd": "notebook cell cursor page up select"
  },
  {
    "key": "meta+enter",
    "command": "notebook.cell.execute",
    "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0",
    "to_ebd": "notebook cell execute"
  },
  {
    "key": "alt+enter",
    "command": "notebook.cell.executeAndInsertBelow",
    "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0",
    "to_ebd": "notebook cell execute and insert below"
  },
  {
    "key": "shift+enter",
    "command": "notebook.cell.executeAndSelectBelow",
    "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0",
    "to_ebd": "notebook cell execute and select below"
  },
  {
    "key": "ctrl+shift+v",
    "command": "notebook.cell.pasteAbove",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell paste above"
  },
  {
    "key": "down",
    "command": "notebook.focusNextEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'",
    "to_ebd": "notebook focus next editor"
  },
  {
    "key": "up",
    "command": "notebook.focusPreviousEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'",
    "to_ebd": "notebook focus previous editor"
  },
  {
    "key": "ctrl+shift+i",
    "command": "notebook.formatCell",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'",
    "to_ebd": "notebook format cell"
  },
  {
    "key": "ctrl+enter",
    "command": "openReferenceToSide",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand",
    "to_ebd": "open reference to side"
  },
  {
    "key": "enter",
    "command": "repl.action.acceptInput",
    "when": "inDebugRepl && textInputFocus",
    "to_ebd": "repl action accept input"
  },
  {
    "key": "ctrl+f",
    "command": "repl.action.filter",
    "when": "inDebugRepl && textInputFocus",
    "to_ebd": "repl action filter"
  },
  {
    "key": "ctrl+shift+r",
    "command": "rerunSearchEditorSearch",
    "when": "inSearchEditor",
    "to_ebd": "rerun search editor search"
  },
  {
    "key": "escape",
    "command": "search.action.focusQueryEditorWidget",
    "when": "inSearchEditor",
    "to_ebd": "search action focus query editor widget"
  },
  {
    "key": "ctrl+shift+backspace",
    "command": "search.searchEditor.action.deleteFileResults",
    "when": "inSearchEditor",
    "to_ebd": "search search editor action delete file results"
  },
  {
    "key": "escape",
    "command": "settings.action.clearSearchResults",
    "when": "inSettingsEditor && inSettingsSearch",
    "to_ebd": "settings action clear search results"
  },
  {
    "key": "down",
    "command": "settings.action.focusSettingsFile",
    "when": "inSettingsSearch && !suggestWidgetVisible",
    "to_ebd": "settings action focus settings file"
  },
  {
    "key": "ctrl+f",
    "command": "settings.action.search",
    "when": "inSettingsEditor",
    "to_ebd": "settings action search"
  },
  {
    "key": "ctrl+/",
    "command": "toggleExplainMode",
    "when": "suggestWidgetVisible",
    "to_ebd": "toggle explain mode"
  },
  {
    "key": "ctrl+k f2",
    "command": "togglePeekWidgetFocus",
    "when": "inReferenceSearchEditor || referenceSearchVisible",
    "to_ebd": "toggle peek widget focus"
  },
  {
    "key": "escape",
    "command": "welcome.goBack",
    "when": "inWelcome && activeEditor == 'gettingStartedPage'",
    "to_ebd": "welcome go back"
  },
  {
    "key": "alt+f5",
    "command": "workbench.action.editor.nextChange",
    "when": "editorTextFocus && !textCompareEditorActive",
    "to_ebd": "workbench action editor next change"
  },
  {
    "key": "shift+alt+f5",
    "command": "workbench.action.editor.previousChange",
    "when": "editorTextFocus && !textCompareEditorActive",
    "to_ebd": "workbench action editor previous change"
  },
  {
    "key": "shift+escape",
    "command": "workbench.action.hideComment",
    "when": "commentEditorFocused",
    "to_ebd": "workbench action hide comment"
  },
  {
    "key": "escape",
    "command": "workbench.action.hideComment",
    "when": "commentEditorFocused",
    "to_ebd": "workbench action hide comment"
  },
  {
    "key": "ctrl+enter",
    "command": "workbench.action.submitComment",
    "when": "commentEditorFocused",
    "to_ebd": "workbench action submit comment"
  },
  {
    "key": "ctrl+.",
    "command": "workbench.action.terminal.showQuickFixes",
    "when": "terminalFocus",
    "to_ebd": "workbench action terminal show quick fixes"
  },
  {
    "key": "alt+f8",
    "command": "testing.goToNextMessage",
    "when": "editorFocus && testing.isPeekVisible",
    "to_ebd": "testing go to next message"
  },
  {
    "key": "shift+alt+f8",
    "command": "testing.goToPreviousMessage",
    "when": "editorFocus && testing.isPeekVisible",
    "to_ebd": "testing go to previous message"
  },
  {
    "key": "shift+escape",
    "command": "closeFindWidget",
    "when": "editorFocus && findWidgetVisible && !isComposing",
    "to_ebd": "close find widget"
  },
  {
    "key": "escape",
    "command": "closeFindWidget",
    "when": "editorFocus && findWidgetVisible && !isComposing",
    "to_ebd": "close find widget"
  },
  {
    "key": "ctrl+alt+enter",
    "command": "editor.action.replaceAll",
    "when": "editorFocus && findWidgetVisible",
    "to_ebd": "editor action replace all"
  },
  {
    "key": "ctrl+shift+1",
    "command": "editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible",
    "to_ebd": "editor action replace one"
  },
  {
    "key": "enter",
    "command": "editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible && replaceInputFocussed",
    "to_ebd": "editor action replace one"
  },
  {
    "key": "alt+enter",
    "command": "editor.action.selectAllMatches",
    "when": "editorFocus && findWidgetVisible",
    "to_ebd": "editor action select all matches"
  },
  {
    "key": "alt+c",
    "command": "toggleFindCaseSensitive",
    "when": "editorFocus",
    "to_ebd": "toggle find case sensitive"
  },
  {
    "key": "alt+l",
    "command": "toggleFindInSelection",
    "when": "editorFocus",
    "to_ebd": "toggle find in selection"
  },
  {
    "key": "alt+r",
    "command": "toggleFindRegex",
    "when": "editorFocus",
    "to_ebd": "toggle find regex"
  },
  {
    "key": "alt+w",
    "command": "toggleFindWholeWord",
    "when": "editorFocus",
    "to_ebd": "toggle find whole word"
  },
  {
    "key": "alt+p",
    "command": "togglePreserveCase",
    "when": "editorFocus",
    "to_ebd": "toggle preserve case"
  },
  {
    "key": "tab",
    "command": "jumpToNextSnippetPlaceholder",
    "when": "editorTextFocus && hasNextTabstop && inSnippetMode",
    "to_ebd": "jump to next snippet placeholder"
  },
  {
    "key": "shift+tab",
    "command": "jumpToPrevSnippetPlaceholder",
    "when": "editorTextFocus && hasPrevTabstop && inSnippetMode",
    "to_ebd": "jump to prev snippet placeholder"
  },
  {
    "key": "escape",
    "command": "leaveEditorMessage",
    "when": "messageVisible",
    "to_ebd": "leave editor message"
  },
  {
    "key": "shift+escape",
    "command": "leaveSnippet",
    "when": "editorTextFocus && inSnippetMode",
    "to_ebd": "leave snippet"
  },
  {
    "key": "escape",
    "command": "leaveSnippet",
    "when": "editorTextFocus && inSnippetMode",
    "to_ebd": "leave snippet"
  },
  {
    "key": "shift+escape",
    "command": "closeDirtyDiff",
    "when": "dirtyDiffVisible",
    "to_ebd": "close dirty diff"
  },
  {
    "key": "escape",
    "command": "closeDirtyDiff",
    "when": "dirtyDiffVisible",
    "to_ebd": "close dirty diff"
  },
  {
    "key": "shift+escape",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible",
    "to_ebd": "close markers navigation"
  },
  {
    "key": "escape",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible",
    "to_ebd": "close markers navigation"
  },
  {
    "key": "escape",
    "command": "notifications.hideToasts",
    "when": "notificationToastsVisible",
    "to_ebd": "notifications hide toasts"
  },
  {
    "key": "shift+escape",
    "command": "closeParameterHints",
    "when": "editorFocus && parameterHintsVisible",
    "to_ebd": "close parameter hints"
  },
  {
    "key": "escape",
    "command": "closeParameterHints",
    "when": "editorFocus && parameterHintsVisible",
    "to_ebd": "close parameter hints"
  },
  {
    "key": "alt+down",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible",
    "to_ebd": "show next parameter hint"
  },
  {
    "key": "down",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible",
    "to_ebd": "show next parameter hint"
  },
  {
    "key": "alt+up",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible",
    "to_ebd": "show prev parameter hint"
  },
  {
    "key": "up",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible",
    "to_ebd": "show prev parameter hint"
  },
  {
    "key": "shift+tab",
    "command": "acceptAlternativeSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus",
    "to_ebd": "accept alternative selected suggestion"
  },
  {
    "key": "shift+enter",
    "command": "acceptAlternativeSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus",
    "to_ebd": "accept alternative selected suggestion"
  },
  {
    "key": "tab",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus",
    "to_ebd": "accept selected suggestion"
  },
  {
    "key": "enter",
    "command": "acceptSelectedSuggestion",
    "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus",
    "to_ebd": "accept selected suggestion"
  },
  {
    "key": "ctrl+i",
    "command": "focusSuggestion",
    "when": "suggestWidgetVisible && textInputFocus && !config.editor.suggest.selectQuickSuggestions && !suggestWidgetHasFocusedSuggestion",
    "to_ebd": "focus suggestion"
  },
  {
    "key": "ctrl+space",
    "command": "focusSuggestion",
    "when": "suggestWidgetVisible && textInputFocus && !config.editor.suggest.selectQuickSuggestions && !suggestWidgetHasFocusedSuggestion",
    "to_ebd": "focus suggestion"
  },
  {
    "key": "shift+escape",
    "command": "hideSuggestWidget",
    "when": "suggestWidgetVisible && textInputFocus",
    "to_ebd": "hide suggest widget"
  },
  {
    "key": "escape",
    "command": "hideSuggestWidget",
    "when": "suggestWidgetVisible && textInputFocus",
    "to_ebd": "hide suggest widget"
  },
  {
    "key": "tab",
    "command": "insertBestCompletion",
    "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'",
    "to_ebd": "insert best completion"
  },
  {
    "key": "tab",
    "command": "insertNextSuggestion",
    "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'",
    "to_ebd": "insert next suggestion"
  },
  {
    "key": "shift+tab",
    "command": "insertPrevSuggestion",
    "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'",
    "to_ebd": "insert prev suggestion"
  },
  {
    "key": "ctrl+pagedown",
    "command": "selectNextPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus",
    "to_ebd": "select next page suggestion"
  },
  {
    "key": "pagedown",
    "command": "selectNextPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus",
    "to_ebd": "select next page suggestion"
  },
  {
    "key": "ctrl+down",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus",
    "to_ebd": "select next suggestion"
  },
  {
    "key": "down",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus",
    "to_ebd": "select next suggestion"
  },
  {
    "key": "ctrl+pageup",
    "command": "selectPrevPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus",
    "to_ebd": "select prev page suggestion"
  },
  {
    "key": "pageup",
    "command": "selectPrevPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus",
    "to_ebd": "select prev page suggestion"
  },
  {
    "key": "ctrl+up",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus",
    "to_ebd": "select prev suggestion"
  },
  {
    "key": "up",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus",
    "to_ebd": "select prev suggestion"
  },
  {
    "key": "ctrl+i",
    "command": "toggleSuggestionDetails",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus",
    "to_ebd": "toggle suggestion details"
  },
  {
    "key": "ctrl+space",
    "command": "toggleSuggestionDetails",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus",
    "to_ebd": "toggle suggestion details"
  },
  {
    "key": "ctrl+alt+space",
    "command": "toggleSuggestionFocus",
    "when": "suggestWidgetVisible && textInputFocus",
    "to_ebd": "toggle suggestion focus"
  },
  {
    "key": "enter",
    "command": "acceptRenameInput",
    "when": "editorFocus && renameInputVisible",
    "to_ebd": "accept rename input"
  },
  {
    "key": "shift+enter",
    "command": "acceptRenameInputWithPreview",
    "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible",
    "to_ebd": "accept rename input with preview"
  },
  {
    "key": "shift+escape",
    "command": "cancelLinkedEditingInput",
    "when": "LinkedEditingInputVisible && editorTextFocus",
    "to_ebd": "cancel linked editing input"
  },
  {
    "key": "escape",
    "command": "cancelLinkedEditingInput",
    "when": "LinkedEditingInputVisible && editorTextFocus",
    "to_ebd": "cancel linked editing input"
  },
  {
    "key": "shift+escape",
    "command": "cancelRenameInput",
    "when": "editorFocus && renameInputVisible",
    "to_ebd": "cancel rename input"
  },
  {
    "key": "escape",
    "command": "cancelRenameInput",
    "when": "editorFocus && renameInputVisible",
    "to_ebd": "cancel rename input"
  },
  {
    "key": "ctrl+shift+l",
    "command": "addCursorsAtSearchResults",
    "when": "fileMatchOrMatchFocus && searchViewletVisible",
    "to_ebd": "add cursors at search results"
  },
  {
    "key": "ctrl+shift+;",
    "command": "breadcrumbs.focus",
    "when": "breadcrumbsPossible && breadcrumbsVisible",
    "to_ebd": "breadcrumbs focus"
  },
  {
    "key": "ctrl+shift+[IntlBackslash]",
    "command": "breadcrumbs.focusAndSelect",
    "when": "breadcrumbsPossible && breadcrumbsVisible",
    "to_ebd": "breadcrumbs focus and select"
  },
  {
    "key": "ctrl+shift+.",
    "command": "breadcrumbs.focusAndSelect",
    "when": "breadcrumbsPossible && breadcrumbsVisible",
    "to_ebd": "breadcrumbs focus and select"
  },
  {
    "key": "ctrl+right",
    "command": "breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible",
    "to_ebd": "breadcrumbs focus next"
  },
  {
    "key": "right",
    "command": "breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible",
    "to_ebd": "breadcrumbs focus next"
  },
  {
    "key": "ctrl+left",
    "command": "breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible",
    "to_ebd": "breadcrumbs focus previous"
  },
  {
    "key": "left",
    "command": "breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible",
    "to_ebd": "breadcrumbs focus previous"
  },
  {
    "key": "ctrl+enter",
    "command": "breadcrumbs.revealFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible",
    "to_ebd": "breadcrumbs reveal focused"
  },
  {
    "key": "space",
    "command": "breadcrumbs.revealFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible",
    "to_ebd": "breadcrumbs reveal focused"
  },
  {
    "key": "ctrl+enter",
    "command": "breadcrumbs.revealFocusedFromTreeAside",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus",
    "to_ebd": "breadcrumbs reveal focused from tree aside"
  },
  {
    "key": "down",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible",
    "to_ebd": "breadcrumbs select focused"
  },
  {
    "key": "enter",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible",
    "to_ebd": "breadcrumbs select focused"
  },
  {
    "key": "ctrl+shift+[IntlBackslash]",
    "command": "breadcrumbs.toggleToOn",
    "when": "!config.breadcrumbs.enabled",
    "to_ebd": "breadcrumbs toggle to on"
  },
  {
    "key": "ctrl+shift+.",
    "command": "breadcrumbs.toggleToOn",
    "when": "!config.breadcrumbs.enabled",
    "to_ebd": "breadcrumbs toggle to on"
  },
  {
    "key": "shift+escape",
    "command": "closeAccessibilityHelp",
    "when": "accessibilityHelpWidgetVisible && editorFocus",
    "to_ebd": "close accessibility help"
  },
  {
    "key": "escape",
    "command": "closeAccessibilityHelp",
    "when": "accessibilityHelpWidgetVisible && editorFocus",
    "to_ebd": "close accessibility help"
  },
  {
    "key": "escape",
    "command": "closeReplaceInFilesWidget",
    "when": "replaceInputBoxFocus && searchViewletVisible",
    "to_ebd": "close replace in files widget"
  },
  {
    "key": "escape",
    "command": "commentsClearFilterText",
    "when": "commentsFilterFocus",
    "to_ebd": "comments clear filter text"
  },
  {
    "key": "ctrl+f",
    "command": "commentsFocusFilter",
    "when": "focusedView == 'workbench.panel.comments'",
    "to_ebd": "comments focus filter"
  },
  {
    "key": "ctrl+down",
    "command": "commentsFocusViewFromFilter",
    "when": "commentsFilterFocus",
    "to_ebd": "comments focus view from filter"
  },
  {
    "key": "ctrl+alt+c",
    "command": "copyFilePath",
    "when": "!editorFocus",
    "to_ebd": "copy file path"
  },
  {
    "key": "ctrl+k ctrl+alt+c",
    "command": "copyFilePath",
    "when": "editorFocus",
    "to_ebd": "copy file path"
  },
  {
    "key": "ctrl+shift+alt+c",
    "command": "copyRelativeFilePath",
    "when": "!editorFocus",
    "to_ebd": "copy relative file path"
  },
  {
    "key": "ctrl+k ctrl+shift+alt+c",
    "command": "copyRelativeFilePath",
    "when": "editorFocus",
    "to_ebd": "copy relative file path"
  },
  {
    "key": "alt+enter",
    "command": "debug.openBreakpointToSide",
    "when": "breakpointsFocused",
    "to_ebd": "debug open breakpoint to side"
  },
  {
    "key": "ctrl+enter",
    "command": "debug.openBreakpointToSide",
    "when": "breakpointsFocused",
    "to_ebd": "debug open breakpoint to side"
  },
  {
    "key": "ctrl+f5",
    "command": "debug.openView",
    "when": "!debuggersAvailable",
    "to_ebd": "debug open view"
  },
  {
    "key": "f5",
    "command": "debug.openView",
    "when": "!debuggersAvailable",
    "to_ebd": "debug open view"
  },
  {
    "key": "delete",
    "command": "debug.removeBreakpoint",
    "when": "breakpointsFocused && !breakpointInputFocused",
    "to_ebd": "debug remove breakpoint"
  },
  {
    "key": "delete",
    "command": "debug.removeWatchExpression",
    "when": "watchExpressionsFocused && !expressionSelected",
    "to_ebd": "debug remove watch expression"
  },
  {
    "key": "alt+-",
    "command": "decreaseSearchEditorContextLines",
    "when": "inSearchEditor",
    "to_ebd": "decrease search editor context lines"
  },
  {
    "key": "tab",
    "command": "editor.action.inlineSuggest.commit",
    "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus",
    "to_ebd": "editor action inline suggest commit"
  },
  {
    "key": "shift+f9",
    "command": "editor.debug.action.toggleInlineBreakpoint",
    "when": "editorTextFocus",
    "to_ebd": "editor debug action toggle inline breakpoint"
  },
  {
    "key": "shift+alt+d",
    "command": "editor.detectLanguage",
    "when": "editorTextFocus && !notebookEditable",
    "to_ebd": "editor detect language"
  },
  {
    "key": "shift+enter",
    "command": "editor.refocusCallHierarchy",
    "when": "callHierarchyVisible",
    "to_ebd": "editor refocus call hierarchy"
  },
  {
    "key": "shift+enter",
    "command": "editor.refocusTypeHierarchy",
    "when": "typeHierarchyVisible",
    "to_ebd": "editor refocus type hierarchy"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showCallHierarchy",
    "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor",
    "to_ebd": "editor show call hierarchy"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showIncomingCalls",
    "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'",
    "to_ebd": "editor show incoming calls"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showOutgoingCalls",
    "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'",
    "to_ebd": "editor show outgoing calls"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showSubtypes",
    "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'",
    "to_ebd": "editor show subtypes"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showSupertypes",
    "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'",
    "to_ebd": "editor show supertypes"
  },
  {
    "key": "ctrl+enter",
    "command": "explorer.openToSide",
    "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus",
    "to_ebd": "explorer open to side"
  },
  {
    "key": "shift+alt+f",
    "command": "filesExplorer.findInFolder",
    "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus",
    "to_ebd": "files explorer find in folder"
  },
  {
    "key": "alt+down",
    "command": "history.showNext",
    "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible",
    "to_ebd": "history show next"
  },
  {
    "key": "down",
    "command": "history.showNext",
    "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible",
    "to_ebd": "history show next"
  },
  {
    "key": "alt+up",
    "command": "history.showPrevious",
    "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible",
    "to_ebd": "history show previous"
  },
  {
    "key": "up",
    "command": "history.showPrevious",
    "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible",
    "to_ebd": "history show previous"
  },
  {
    "key": "alt+=",
    "command": "increaseSearchEditorContextLines",
    "when": "inSearchEditor",
    "to_ebd": "increase search editor context lines"
  },
  {
    "key": "down",
    "command": "interactive.history.next",
    "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'",
    "to_ebd": "interactive history next"
  },
  {
    "key": "up",
    "command": "interactive.history.previous",
    "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'",
    "to_ebd": "interactive history previous"
  },
  {
    "key": "ctrl+end",
    "command": "interactive.scrollToBottom",
    "when": "resourceScheme == 'vscode-interactive'",
    "to_ebd": "interactive scroll to bottom"
  },
  {
    "key": "ctrl+home",
    "command": "interactive.scrollToTop",
    "when": "resourceScheme == 'vscode-interactive'",
    "to_ebd": "interactive scroll to top"
  },
  {
    "key": "ctrl+k ctrl+a",
    "command": "keybindings.editor.addKeybinding",
    "when": "inKeybindings && keybindingFocus",
    "to_ebd": "keybindings editor add keybinding"
  },
  {
    "key": "escape",
    "command": "keybindings.editor.clearSearchResults",
    "when": "inKeybindings && inKeybindingsSearch",
    "to_ebd": "keybindings editor clear search results"
  },
  {
    "key": "ctrl+c",
    "command": "keybindings.editor.copyKeybindingEntry",
    "when": "inKeybindings && keybindingFocus && !whenFocus",
    "to_ebd": "keybindings editor copy keybinding entry"
  },
  {
    "key": "enter",
    "command": "keybindings.editor.defineKeybinding",
    "when": "inKeybindings && keybindingFocus",
    "to_ebd": "keybindings editor define keybinding"
  },
  {
    "key": "ctrl+k ctrl+e",
    "command": "keybindings.editor.defineWhenExpression",
    "when": "inKeybindings && keybindingFocus",
    "to_ebd": "keybindings editor define when expression"
  },
  {
    "key": "ctrl+down",
    "command": "keybindings.editor.focusKeybindings",
    "when": "inKeybindings && inKeybindingsSearch",
    "to_ebd": "keybindings editor focus keybindings"
  },
  {
    "key": "alt+k",
    "command": "keybindings.editor.recordSearchKeys",
    "when": "inKeybindings && inKeybindingsSearch",
    "to_ebd": "keybindings editor record search keys"
  },
  {
    "key": "delete",
    "command": "keybindings.editor.removeKeybinding",
    "when": "inKeybindings && keybindingFocus && !inputFocus",
    "to_ebd": "keybindings editor remove keybinding"
  },
  {
    "key": "ctrl+f",
    "command": "keybindings.editor.searchKeybindings",
    "when": "inKeybindings",
    "to_ebd": "keybindings editor search keybindings"
  },
  {
    "key": "alt+p",
    "command": "keybindings.editor.toggleSortByPrecedence",
    "when": "inKeybindings",
    "to_ebd": "keybindings editor toggle sort by precedence"
  },
  {
    "key": "escape",
    "command": "list.clear",
    "when": "listFocus && listHasSelectionOrFocus && !inputFocus",
    "to_ebd": "list clear"
  },
  {
    "key": "escape",
    "command": "list.closeFind",
    "when": "listFocus && treeFindOpen",
    "to_ebd": "list close find"
  },
  {
    "key": "left",
    "command": "list.collapse",
    "when": "listFocus && treeElementCanCollapse && !inputFocus || listFocus && treeElementHasParent && !inputFocus",
    "to_ebd": "list collapse"
  },
  {
    "key": "ctrl+left",
    "command": "list.collapseAll",
    "when": "listFocus && !inputFocus",
    "to_ebd": "list collapse all"
  },
  {
    "key": "right",
    "command": "list.expand",
    "when": "listFocus && treeElementCanExpand && !inputFocus || listFocus && treeElementHasChild && !inputFocus",
    "to_ebd": "list expand"
  },
  {
    "key": "shift+down",
    "command": "list.expandSelectionDown",
    "when": "listFocus && listSupportsMultiselect && !inputFocus",
    "to_ebd": "list expand selection down"
  },
  {
    "key": "shift+up",
    "command": "list.expandSelectionUp",
    "when": "listFocus && listSupportsMultiselect && !inputFocus",
    "to_ebd": "list expand selection up"
  },
  {
    "key": "f3",
    "command": "list.find",
    "when": "listFocus && listSupportsFind",
    "to_ebd": "list find"
  },
  {
    "key": "ctrl+f",
    "command": "list.find",
    "when": "listFocus && listSupportsFind",
    "to_ebd": "list find"
  },
  {
    "key": "down",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus",
    "to_ebd": "list focus down"
  },
  {
    "key": "home",
    "command": "list.focusFirst",
    "when": "listFocus && !inputFocus",
    "to_ebd": "list focus first"
  },
  {
    "key": "end",
    "command": "list.focusLast",
    "when": "listFocus && !inputFocus",
    "to_ebd": "list focus last"
  },
  {
    "key": "pagedown",
    "command": "list.focusPageDown",
    "when": "listFocus && !inputFocus",
    "to_ebd": "list focus page down"
  },
  {
    "key": "pageup",
    "command": "list.focusPageUp",
    "when": "listFocus && !inputFocus",
    "to_ebd": "list focus page up"
  },
  {
    "key": "up",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus",
    "to_ebd": "list focus up"
  },
  {
    "key": "ctrl+down",
    "command": "list.scrollDown",
    "when": "listFocus && !inputFocus",
    "to_ebd": "list scroll down"
  },
  {
    "key": "ctrl+up",
    "command": "list.scrollUp",
    "when": "listFocus && !inputFocus",
    "to_ebd": "list scroll up"
  },
  {
    "key": "enter",
    "command": "list.select",
    "when": "listFocus && !inputFocus",
    "to_ebd": "list select"
  },
  {
    "key": "ctrl+a",
    "command": "list.selectAll",
    "when": "listFocus && listSupportsMultiselect && !inputFocus",
    "to_ebd": "list select all"
  },
  {
    "key": "space",
    "command": "list.toggleExpand",
    "when": "listFocus && !inputFocus",
    "to_ebd": "list toggle expand"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "list.toggleSelection",
    "when": "listFocus && !inputFocus",
    "to_ebd": "list toggle selection"
  },
  {
    "key": "y",
    "command": "notebook.cell.changeToCode",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'",
    "to_ebd": "notebook cell change to code"
  },
  {
    "key": "m",
    "command": "notebook.cell.changeToMarkdown",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'",
    "to_ebd": "notebook cell change to markdown"
  },
  {
    "key": "alt+delete",
    "command": "notebook.cell.clearOutputs",
    "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell clear outputs"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "notebook.cell.collapseCellInput",
    "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed",
    "to_ebd": "notebook cell collapse cell input"
  },
  {
    "key": "ctrl+k t",
    "command": "notebook.cell.collapseCellOutput",
    "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed",
    "to_ebd": "notebook cell collapse cell output"
  },
  {
    "key": "shift+alt+down",
    "command": "notebook.cell.copyDown",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell copy down"
  },
  {
    "key": "shift+alt+up",
    "command": "notebook.cell.copyUp",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell copy up"
  },
  {
    "key": "delete",
    "command": "notebook.cell.delete",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell delete"
  },
  {
    "key": "shift+alt+d",
    "command": "notebook.cell.detectLanguage",
    "when": "notebookCellEditable && notebookEditable",
    "to_ebd": "notebook cell detect language"
  },
  {
    "key": "enter",
    "command": "notebook.cell.edit",
    "when": "notebookCellListFocused && notebookEditable && !inputFocus",
    "to_ebd": "notebook cell edit"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "notebook.cell.expandCellInput",
    "when": "notebookCellInputIsCollapsed && notebookCellListFocused",
    "to_ebd": "notebook cell expand cell input"
  },
  {
    "key": "ctrl+k t",
    "command": "notebook.cell.expandCellOutput",
    "when": "notebookCellListFocused && notebookCellOutputIsCollapsed",
    "to_ebd": "notebook cell expand cell output"
  },
  {
    "key": "ctrl+down",
    "command": "notebook.cell.focusInOutput",
    "when": "notebookCellHasOutputs && notebookEditorFocused",
    "to_ebd": "notebook cell focus in output"
  },
  {
    "key": "ctrl+up",
    "command": "notebook.cell.focusOutOutput",
    "when": "notebookEditorFocused",
    "to_ebd": "notebook cell focus out output"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "notebook.cell.insertCodeCellAbove",
    "when": "notebookCellListFocused && !inputFocus",
    "to_ebd": "notebook cell insert code cell above"
  },
  {
    "key": "ctrl+enter",
    "command": "notebook.cell.insertCodeCellBelow",
    "when": "notebookCellListFocused && !inputFocus",
    "to_ebd": "notebook cell insert code cell below"
  },
  {
    "key": "shift+alt+meta+j",
    "command": "notebook.cell.joinAbove",
    "when": "notebookEditorFocused",
    "to_ebd": "notebook cell join above"
  },
  {
    "key": "alt+meta+j",
    "command": "notebook.cell.joinBelow",
    "when": "notebookEditorFocused",
    "to_ebd": "notebook cell join below"
  },
  {
    "key": "alt+down",
    "command": "notebook.cell.moveDown",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell move down"
  },
  {
    "key": "alt+up",
    "command": "notebook.cell.moveUp",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell move up"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "notebook.cell.split",
    "when": "notebookCellEditable && notebookEditable && notebookEditorFocused",
    "to_ebd": "notebook cell split"
  },
  {
    "key": "ctrl+l",
    "command": "notebook.centerActiveCell",
    "when": "notebookEditorFocused",
    "to_ebd": "notebook center active cell"
  },
  {
    "key": "ctrl+f",
    "command": "notebook.find",
    "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'",
    "to_ebd": "notebook find"
  },
  {
    "key": "ctrl+end",
    "command": "notebook.focusBottom",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook focus bottom"
  },
  {
    "key": "down",
    "command": "notebook.focusNextEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !notebookCellMarkdownEditMode && notebookCellType == 'markup'",
    "to_ebd": "notebook focus next editor"
  },
  {
    "key": "ctrl+down",
    "command": "notebook.focusNextEditor",
    "when": "notebookEditorFocused && notebookOutputFocused",
    "to_ebd": "notebook focus next editor"
  },
  {
    "key": "up",
    "command": "notebook.focusPreviousEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !notebookCellMarkdownEditMode && notebookCellType == 'markup'",
    "to_ebd": "notebook focus previous editor"
  },
  {
    "key": "ctrl+home",
    "command": "notebook.focusTop",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook focus top"
  },
  {
    "key": "left",
    "command": "notebook.fold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'",
    "to_ebd": "notebook fold"
  },
  {
    "key": "ctrl+shift+[",
    "command": "notebook.fold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'",
    "to_ebd": "notebook fold"
  },
  {
    "key": "ctrl+shift+i",
    "command": "notebook.format",
    "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'",
    "to_ebd": "notebook format"
  },
  {
    "key": "escape",
    "command": "notebook.hideFind",
    "when": "notebookEditorFocused && notebookFindWidgetFocused",
    "to_ebd": "notebook hide find"
  },
  {
    "key": "right",
    "command": "notebook.unfold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'",
    "to_ebd": "notebook unfold"
  },
  {
    "key": "ctrl+shift+]",
    "command": "notebook.unfold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'",
    "to_ebd": "notebook unfold"
  },
  {
    "key": "delete",
    "command": "notification.clear",
    "when": "notificationFocus",
    "to_ebd": "notification clear"
  },
  {
    "key": "left",
    "command": "notification.collapse",
    "when": "notificationFocus",
    "to_ebd": "notification collapse"
  },
  {
    "key": "right",
    "command": "notification.expand",
    "when": "notificationFocus",
    "to_ebd": "notification expand"
  },
  {
    "key": "enter",
    "command": "notification.toggle",
    "when": "notificationFocus",
    "to_ebd": "notification toggle"
  },
  {
    "key": "space",
    "command": "notification.toggle",
    "when": "notificationFocus",
    "to_ebd": "notification toggle"
  },
  {
    "key": "home",
    "command": "notifications.focusFirstToast",
    "when": "notificationFocus && notificationToastsVisible",
    "to_ebd": "notifications focus first toast"
  },
  {
    "key": "pageup",
    "command": "notifications.focusFirstToast",
    "when": "notificationFocus && notificationToastsVisible",
    "to_ebd": "notifications focus first toast"
  },
  {
    "key": "end",
    "command": "notifications.focusLastToast",
    "when": "notificationFocus && notificationToastsVisible",
    "to_ebd": "notifications focus last toast"
  },
  {
    "key": "pagedown",
    "command": "notifications.focusLastToast",
    "when": "notificationFocus && notificationToastsVisible",
    "to_ebd": "notifications focus last toast"
  },
  {
    "key": "down",
    "command": "notifications.focusNextToast",
    "when": "notificationFocus && notificationToastsVisible",
    "to_ebd": "notifications focus next toast"
  },
  {
    "key": "up",
    "command": "notifications.focusPreviousToast",
    "when": "notificationFocus && notificationToastsVisible",
    "to_ebd": "notifications focus previous toast"
  },
  {
    "key": "escape",
    "command": "problems.action.clearFilterText",
    "when": "problemsFilterFocus",
    "to_ebd": "problems action clear filter text"
  },
  {
    "key": "ctrl+c",
    "command": "problems.action.copy",
    "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'",
    "to_ebd": "problems action copy"
  },
  {
    "key": "ctrl+f",
    "command": "problems.action.focusFilter",
    "when": "focusedView == 'workbench.panel.markers.view'",
    "to_ebd": "problems action focus filter"
  },
  {
    "key": "ctrl+down",
    "command": "problems.action.focusProblemsFromFilter",
    "when": "problemsFilterFocus",
    "to_ebd": "problems action focus problems from filter"
  },
  {
    "key": "enter",
    "command": "problems.action.open",
    "when": "problemFocus",
    "to_ebd": "problems action open"
  },
  {
    "key": "ctrl+enter",
    "command": "problems.action.openToSide",
    "when": "problemFocus",
    "to_ebd": "problems action open to side"
  },
  {
    "key": "ctrl+.",
    "command": "problems.action.showQuickFixes",
    "when": "problemFocus",
    "to_ebd": "problems action show quick fixes"
  },
  {
    "key": "space",
    "command": "refactorPreview.toggleCheckedState",
    "when": "listFocus && refactorPreview.enabled && !inputFocus",
    "to_ebd": "refactor preview toggle checked state"
  },
  {
    "key": "ctrl+alt+r",
    "command": "revealFileInOS",
    "when": "!editorFocus",
    "to_ebd": "reveal file in os"
  },
  {
    "key": "enter",
    "command": "revealReference",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand",
    "to_ebd": "reveal reference"
  },
  {
    "key": "ctrl+enter",
    "command": "scm.acceptInput",
    "when": "scmRepository",
    "to_ebd": "scm accept input"
  },
  {
    "key": "alt+down",
    "command": "scm.forceViewNextCommit",
    "when": "scmRepository",
    "to_ebd": "scm force view next commit"
  },
  {
    "key": "alt+up",
    "command": "scm.forceViewPreviousCommit",
    "when": "scmRepository",
    "to_ebd": "scm force view previous commit"
  },
  {
    "key": "down",
    "command": "scm.viewNextCommit",
    "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible",
    "to_ebd": "scm view next commit"
  },
  {
    "key": "up",
    "command": "scm.viewPreviousCommit",
    "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible",
    "to_ebd": "scm view previous commit"
  },
  {
    "key": "escape",
    "command": "search.action.cancel",
    "when": "listFocus && searchViewletVisible && !inputFocus && searchState != '0'",
    "to_ebd": "search action cancel"
  },
  {
    "key": "ctrl+c",
    "command": "search.action.copyMatch",
    "when": "fileMatchOrMatchFocus",
    "to_ebd": "search action copy match"
  },
  {
    "key": "ctrl+alt+c",
    "command": "search.action.copyPath",
    "when": "fileMatchOrFolderMatchWithResourceFocus",
    "to_ebd": "search action copy path"
  },
  {
    "key": "f4",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult || inSearchEditor",
    "to_ebd": "search action focus next search result"
  },
  {
    "key": "shift+f4",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor",
    "to_ebd": "search action focus previous search result"
  },
  {
    "key": "ctrl+up",
    "command": "search.action.focusSearchFromResults",
    "when": "firstMatchFocus && searchViewletVisible",
    "to_ebd": "search action focus search from results"
  },
  {
    "key": "alt+enter",
    "command": "search.action.openInEditor",
    "when": "hasSearchResult && searchViewletFocus",
    "to_ebd": "search action open in editor"
  },
  {
    "key": "enter",
    "command": "search.action.openResult",
    "when": "fileMatchOrMatchFocus && searchViewletVisible",
    "to_ebd": "search action open result"
  },
  {
    "key": "ctrl+enter",
    "command": "search.action.openResultToSide",
    "when": "fileMatchOrMatchFocus && searchViewletVisible",
    "to_ebd": "search action open result to side"
  },
  {
    "key": "delete",
    "command": "search.action.remove",
    "when": "fileMatchOrMatchFocus && searchViewletVisible",
    "to_ebd": "search action remove"
  },
  {
    "key": "ctrl+shift+1",
    "command": "search.action.replace",
    "when": "matchFocus && replaceActive && searchViewletVisible",
    "to_ebd": "search action replace"
  },
  {
    "key": "ctrl+alt+enter",
    "command": "search.action.replaceAll",
    "when": "replaceActive && searchViewletVisible && !findWidgetVisible",
    "to_ebd": "search action replace all"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "search.action.replaceAllInFile",
    "when": "fileMatchFocus && replaceActive && searchViewletVisible",
    "to_ebd": "search action replace all in file"
  },
  {
    "key": "ctrl+shift+1",
    "command": "search.action.replaceAllInFile",
    "when": "fileMatchFocus && replaceActive && searchViewletVisible",
    "to_ebd": "search action replace all in file"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "search.action.replaceAllInFolder",
    "when": "folderMatchFocus && replaceActive && searchViewletVisible",
    "to_ebd": "search action replace all in folder"
  },
  {
    "key": "ctrl+shift+1",
    "command": "search.action.replaceAllInFolder",
    "when": "folderMatchFocus && replaceActive && searchViewletVisible",
    "to_ebd": "search action replace all in folder"
  },
  {
    "key": "shift+alt+f",
    "command": "search.action.restrictSearchToFolder",
    "when": "folderMatchWithResourceFocus && searchViewletVisible",
    "to_ebd": "search action restrict search to folder"
  },
  {
    "key": "ctrl+down",
    "command": "search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible",
    "to_ebd": "search focus next input box"
  },
  {
    "key": "ctrl+up",
    "command": "search.focus.previousInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus",
    "to_ebd": "search focus previous input box"
  },
  {
    "key": "ctrl+shift+l",
    "command": "selectAllSearchEditorMatches",
    "when": "inSearchEditor",
    "to_ebd": "select all search editor matches"
  },
  {
    "key": "escape",
    "command": "settings.action.focusLevelUp",
    "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch",
    "to_ebd": "settings action focus level up"
  },
  {
    "key": "enter",
    "command": "settings.action.focusSettingControl",
    "when": "settingRowFocus",
    "to_ebd": "settings action focus setting control"
  },
  {
    "key": "down",
    "command": "settings.action.focusSettingsFromSearch",
    "when": "inSettingsSearch && !suggestWidgetVisible",
    "to_ebd": "settings action focus settings from search"
  },
  {
    "key": "enter",
    "command": "settings.action.focusSettingsList",
    "when": "inSettingsEditor && settingsTocRowFocus",
    "to_ebd": "settings action focus settings list"
  },
  {
    "key": "left",
    "command": "settings.action.focusTOC",
    "when": "inSettingsEditor && settingRowFocus",
    "to_ebd": "settings action focus toc"
  },
  {
    "key": "shift+f9",
    "command": "settings.action.showContextMenu",
    "when": "inSettingsEditor",
    "to_ebd": "settings action show context menu"
  },
  {
    "key": "ctrl+; ctrl+x",
    "command": "testing.cancelRun",
    "to_ebd": "testing cancel run"
  },
  {
    "key": "ctrl+; ctrl+a",
    "command": "testing.debugAll",
    "to_ebd": "testing debug all"
  },
  {
    "key": "ctrl+; ctrl+c",
    "command": "testing.debugAtCursor",
    "when": "editorTextFocus",
    "to_ebd": "testing debug at cursor"
  },
  {
    "key": "ctrl+; ctrl+f",
    "command": "testing.debugCurrentFile",
    "when": "editorTextFocus",
    "to_ebd": "testing debug current file"
  },
  {
    "key": "ctrl+; ctrl+e",
    "command": "testing.debugFailTests",
    "to_ebd": "testing debug fail tests"
  },
  {
    "key": "ctrl+; ctrl+l",
    "command": "testing.debugLastRun",
    "to_ebd": "testing debug last run"
  },
  {
    "key": "ctrl+; ctrl+m",
    "command": "testing.openOutputPeek",
    "to_ebd": "testing open output peek"
  },
  {
    "key": "ctrl+; e",
    "command": "testing.reRunFailTests",
    "to_ebd": "testing re run fail tests"
  },
  {
    "key": "ctrl+; l",
    "command": "testing.reRunLastRun",
    "to_ebd": "testing re run last run"
  },
  {
    "key": "ctrl+; ctrl+r",
    "command": "testing.refreshTests",
    "when": "testing.canRefresh",
    "to_ebd": "testing refresh tests"
  },
  {
    "key": "ctrl+; a",
    "command": "testing.runAll",
    "to_ebd": "testing run all"
  },
  {
    "key": "ctrl+; c",
    "command": "testing.runAtCursor",
    "when": "editorTextFocus",
    "to_ebd": "testing run at cursor"
  },
  {
    "key": "ctrl+; f",
    "command": "testing.runCurrentFile",
    "when": "editorTextFocus",
    "to_ebd": "testing run current file"
  },
  {
    "key": "ctrl+; ctrl+o",
    "command": "testing.showMostRecentOutput",
    "when": "testing.hasAnyResults",
    "to_ebd": "testing show most recent output"
  },
  {
    "key": "ctrl+; ctrl+i",
    "command": "testing.toggleInlineTestOutput",
    "to_ebd": "testing toggle inline test output"
  },
  {
    "key": "alt+h",
    "command": "testing.toggleTestingPeekHistory",
    "when": "testing.isPeekVisible",
    "to_ebd": "testing toggle testing peek history"
  },
  {
    "key": "alt+c",
    "command": "toggleSearchCaseSensitive",
    "when": "searchViewletFocus",
    "to_ebd": "toggle search case sensitive"
  },
  {
    "key": "alt+c",
    "command": "toggleSearchEditorCaseSensitive",
    "when": "inSearchEditor && searchInputBoxFocus",
    "to_ebd": "toggle search editor case sensitive"
  },
  {
    "key": "alt+l",
    "command": "toggleSearchEditorContextLines",
    "when": "inSearchEditor",
    "to_ebd": "toggle search editor context lines"
  },
  {
    "key": "alt+r",
    "command": "toggleSearchEditorRegex",
    "when": "inSearchEditor && searchInputBoxFocus",
    "to_ebd": "toggle search editor regex"
  },
  {
    "key": "alt+w",
    "command": "toggleSearchEditorWholeWord",
    "when": "inSearchEditor && searchInputBoxFocus",
    "to_ebd": "toggle search editor whole word"
  },
  {
    "key": "alt+p",
    "command": "toggleSearchPreserveCase",
    "when": "searchViewletFocus",
    "to_ebd": "toggle search preserve case"
  },
  {
    "key": "alt+r",
    "command": "toggleSearchRegex",
    "when": "searchViewletFocus",
    "to_ebd": "toggle search regex"
  },
  {
    "key": "alt+w",
    "command": "toggleSearchWholeWord",
    "when": "searchViewletFocus",
    "to_ebd": "toggle search whole word"
  },
  {
    "key": "ctrl+alt+meta+n",
    "command": "welcome.showNewFileEntries",
    "to_ebd": "welcome show new file entries"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.closeActiveEditor",
    "to_ebd": "workbench action close active editor"
  },
  {
    "key": "ctrl+k ctrl+w",
    "command": "workbench.action.closeAllEditors",
    "to_ebd": "workbench action close all editors"
  },
  {
    "key": "ctrl+k ctrl+shift+w",
    "command": "workbench.action.closeAllGroups",
    "to_ebd": "workbench action close all groups"
  },
  {
    "key": "ctrl+k w",
    "command": "workbench.action.closeEditorsInGroup",
    "to_ebd": "workbench action close editors in group"
  },
  {
    "key": "ctrl+k f",
    "command": "workbench.action.closeFolder",
    "when": "emptyWorkspaceSupport && workbenchState != 'empty'",
    "to_ebd": "workbench action close folder"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups",
    "to_ebd": "workbench action close group"
  },
  {
    "key": "shift+escape",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen",
    "to_ebd": "workbench action close quick open"
  },
  {
    "key": "escape",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen",
    "to_ebd": "workbench action close quick open"
  },
  {
    "key": "ctrl+k u",
    "command": "workbench.action.closeUnmodifiedEditors",
    "to_ebd": "workbench action close unmodified editors"
  },
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.closeWindow",
    "to_ebd": "workbench action close window"
  },
  {
    "key": "alt+f4",
    "command": "workbench.action.closeWindow",
    "to_ebd": "workbench action close window"
  },
  {
    "key": "alt+f5",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible",
    "to_ebd": "workbench action compare editor next change"
  },
  {
    "key": "shift+alt+f5",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorVisible",
    "to_ebd": "workbench action compare editor previous change"
  },
  {
    "key": "shift+f5",
    "command": "workbench.action.debug.disconnect",
    "when": "focusedSessionIsAttach && inDebugMode",
    "to_ebd": "workbench action debug disconnect"
  },
  {
    "key": "ctrl+shift+f5",
    "command": "workbench.action.debug.restart",
    "when": "inDebugMode",
    "to_ebd": "workbench action debug restart"
  },
  {
    "key": "ctrl+f5",
    "command": "workbench.action.debug.run",
    "when": "debuggersAvailable && debugState != 'initializing'",
    "to_ebd": "workbench action debug run"
  },
  {
    "key": "f5",
    "command": "workbench.action.debug.start",
    "when": "debuggersAvailable && debugState == 'inactive'",
    "to_ebd": "workbench action debug start"
  },
  {
    "key": "ctrl+f11",
    "command": "workbench.action.debug.stepIntoTarget",
    "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'",
    "to_ebd": "workbench action debug step into target"
  },
  {
    "key": "shift+f11",
    "command": "workbench.action.debug.stepOut",
    "when": "debugState == 'stopped'",
    "to_ebd": "workbench action debug step out"
  },
  {
    "key": "f10",
    "command": "workbench.action.debug.stepOver",
    "when": "debugState == 'stopped'",
    "to_ebd": "workbench action debug step over"
  },
  {
    "key": "shift+f5",
    "command": "workbench.action.debug.stop",
    "when": "inDebugMode && !focusedSessionIsAttach",
    "to_ebd": "workbench action debug stop"
  },
  {
    "key": "ctrl+k m",
    "command": "workbench.action.editor.changeLanguageMode",
    "when": "!notebookEditorFocused",
    "to_ebd": "workbench action editor change language mode"
  },
  {
    "key": "ctrl+k p",
    "command": "workbench.action.files.copyPathOfActiveFile",
    "to_ebd": "workbench action files copy path of active file"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.files.newUntitledFile",
    "to_ebd": "workbench action files new untitled file"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.files.openFile",
    "when": "true",
    "to_ebd": "workbench action files open file"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.files.openFileFolder",
    "when": "isMacNative && openFolderWorkspaceSupport",
    "to_ebd": "workbench action files open file folder"
  },
  {
    "key": "ctrl+k ctrl+o",
    "command": "workbench.action.files.openFolder",
    "when": "openFolderWorkspaceSupport",
    "to_ebd": "workbench action files open folder"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.files.openFolderViaWorkspace",
    "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'",
    "to_ebd": "workbench action files open folder via workspace"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.files.openLocalFile",
    "when": "remoteFileDialogVisible",
    "to_ebd": "workbench action files open local file"
  },
  {
    "key": "ctrl+k ctrl+o",
    "command": "workbench.action.files.openLocalFolder",
    "when": "remoteFileDialogVisible",
    "to_ebd": "workbench action files open local folder"
  },
  {
    "key": "ctrl+k r",
    "command": "workbench.action.files.revealActiveFileInWindows",
    "to_ebd": "workbench action files reveal active file in windows"
  },
  {
    "key": "ctrl+s",
    "command": "workbench.action.files.save",
    "to_ebd": "workbench action files save"
  },
  {
    "key": "ctrl+shift+s",
    "command": "workbench.action.files.saveAs",
    "to_ebd": "workbench action files save as"
  },
  {
    "key": "ctrl+shift+s",
    "command": "workbench.action.files.saveLocalFile",
    "when": "remoteFileDialogVisible",
    "to_ebd": "workbench action files save local file"
  },
  {
    "key": "ctrl+k s",
    "command": "workbench.action.files.saveWithoutFormatting",
    "to_ebd": "workbench action files save without formatting"
  },
  {
    "key": "ctrl+k o",
    "command": "workbench.action.files.showOpenedFileInNewWindow",
    "when": "emptyWorkspaceSupport",
    "to_ebd": "workbench action files show opened file in new window"
  },
  {
    "key": "ctrl+shift+f",
    "command": "workbench.action.findInFiles",
    "to_ebd": "workbench action find in files"
  },
  {
    "key": "ctrl+k ctrl+up",
    "command": "workbench.action.focusAboveGroup",
    "to_ebd": "workbench action focus above group"
  },
  {
    "key": "ctrl+k ctrl+down",
    "command": "workbench.action.focusBelowGroup",
    "to_ebd": "workbench action focus below group"
  },
  {
    "key": "ctrl+8",
    "command": "workbench.action.focusEighthEditorGroup",
    "to_ebd": "workbench action focus eighth editor group"
  },
  {
    "key": "ctrl+5",
    "command": "workbench.action.focusFifthEditorGroup",
    "to_ebd": "workbench action focus fifth editor group"
  },
  {
    "key": "ctrl+1",
    "command": "workbench.action.focusFirstEditorGroup",
    "to_ebd": "workbench action focus first editor group"
  },
  {
    "key": "ctrl+4",
    "command": "workbench.action.focusFourthEditorGroup",
    "to_ebd": "workbench action focus fourth editor group"
  },
  {
    "key": "ctrl+k ctrl+left",
    "command": "workbench.action.focusLeftGroup",
    "to_ebd": "workbench action focus left group"
  },
  {
    "key": "f6",
    "command": "workbench.action.focusNextPart",
    "to_ebd": "workbench action focus next part"
  },
  {
    "key": "shift+f6",
    "command": "workbench.action.focusPreviousPart",
    "to_ebd": "workbench action focus previous part"
  },
  {
    "key": "ctrl+k ctrl+right",
    "command": "workbench.action.focusRightGroup",
    "to_ebd": "workbench action focus right group"
  },
  {
    "key": "ctrl+2",
    "command": "workbench.action.focusSecondEditorGroup",
    "to_ebd": "workbench action focus second editor group"
  },
  {
    "key": "ctrl+7",
    "command": "workbench.action.focusSeventhEditorGroup",
    "to_ebd": "workbench action focus seventh editor group"
  },
  {
    "key": "ctrl+0",
    "command": "workbench.action.focusSideBar",
    "to_ebd": "workbench action focus side bar"
  },
  {
    "key": "ctrl+6",
    "command": "workbench.action.focusSixthEditorGroup",
    "to_ebd": "workbench action focus sixth editor group"
  },
  {
    "key": "ctrl+3",
    "command": "workbench.action.focusThirdEditorGroup",
    "to_ebd": "workbench action focus third editor group"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.gotoLine",
    "to_ebd": "workbench action goto line"
  },
  {
    "key": "ctrl+shift+o",
    "command": "workbench.action.gotoSymbol",
    "to_ebd": "workbench action goto symbol"
  },
  {
    "key": "escape",
    "command": "workbench.action.hideInterfaceOverview",
    "when": "interfaceOverviewVisible",
    "to_ebd": "workbench action hide interface overview"
  },
  {
    "key": "down",
    "command": "workbench.action.interactivePlayground.arrowDown",
    "when": "interactivePlaygroundFocus && !editorTextFocus",
    "to_ebd": "workbench action interactive playground arrow down"
  },
  {
    "key": "up",
    "command": "workbench.action.interactivePlayground.arrowUp",
    "when": "interactivePlaygroundFocus && !editorTextFocus",
    "to_ebd": "workbench action interactive playground arrow up"
  },
  {
    "key": "pagedown",
    "command": "workbench.action.interactivePlayground.pageDown",
    "when": "interactivePlaygroundFocus && !editorTextFocus",
    "to_ebd": "workbench action interactive playground page down"
  },
  {
    "key": "pageup",
    "command": "workbench.action.interactivePlayground.pageUp",
    "when": "interactivePlaygroundFocus && !editorTextFocus",
    "to_ebd": "workbench action interactive playground page up"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "workbench.action.joinEditorInGroup",
    "when": "sideBySideEditorActive",
    "to_ebd": "workbench action join editor in group"
  },
  {
    "key": "ctrl+k enter",
    "command": "workbench.action.keepEditor",
    "to_ebd": "workbench action keep editor"
  },
  {
    "key": "ctrl+k ctrl+r",
    "command": "workbench.action.keybindingsReference",
    "to_ebd": "workbench action keybindings reference"
  },
  {
    "key": "ctrl+9",
    "command": "workbench.action.lastEditorInGroup",
    "to_ebd": "workbench action last editor in group"
  },
  {
    "key": "alt+0",
    "command": "workbench.action.lastEditorInGroup",
    "to_ebd": "workbench action last editor in group"
  },
  {
    "key": "ctrl+k down",
    "command": "workbench.action.moveActiveEditorGroupDown",
    "to_ebd": "workbench action move active editor group down"
  },
  {
    "key": "ctrl+k left",
    "command": "workbench.action.moveActiveEditorGroupLeft",
    "to_ebd": "workbench action move active editor group left"
  },
  {
    "key": "ctrl+k right",
    "command": "workbench.action.moveActiveEditorGroupRight",
    "to_ebd": "workbench action move active editor group right"
  },
  {
    "key": "ctrl+k up",
    "command": "workbench.action.moveActiveEditorGroupUp",
    "to_ebd": "workbench action move active editor group up"
  },
  {
    "key": "ctrl+shift+pageup",
    "command": "workbench.action.moveEditorLeftInGroup",
    "to_ebd": "workbench action move editor left in group"
  },
  {
    "key": "ctrl+shift+pagedown",
    "command": "workbench.action.moveEditorRightInGroup",
    "to_ebd": "workbench action move editor right in group"
  },
  {
    "key": "shift+alt+1",
    "command": "workbench.action.moveEditorToFirstGroup",
    "to_ebd": "workbench action move editor to first group"
  },
  {
    "key": "shift+alt+9",
    "command": "workbench.action.moveEditorToLastGroup",
    "to_ebd": "workbench action move editor to last group"
  },
  {
    "key": "ctrl+alt+right",
    "command": "workbench.action.moveEditorToNextGroup",
    "to_ebd": "workbench action move editor to next group"
  },
  {
    "key": "ctrl+alt+left",
    "command": "workbench.action.moveEditorToPreviousGroup",
    "to_ebd": "workbench action move editor to previous group"
  },
  {
    "key": "ctrl+alt+-",
    "command": "workbench.action.navigateBack",
    "when": "canNavigateBack",
    "to_ebd": "workbench action navigate back"
  },
  {
    "key": "ctrl+shift+-",
    "command": "workbench.action.navigateForward",
    "when": "canNavigateForward",
    "to_ebd": "workbench action navigate forward"
  },
  {
    "key": "ctrl+k ctrl+q",
    "command": "workbench.action.navigateToLastEditLocation",
    "to_ebd": "workbench action navigate to last edit location"
  },
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.newWindow",
    "to_ebd": "workbench action new window"
  },
  {
    "key": "ctrl+pagedown",
    "command": "workbench.action.nextEditor",
    "to_ebd": "workbench action next editor"
  },
  {
    "key": "ctrl+k ctrl+pagedown",
    "command": "workbench.action.nextEditorInGroup",
    "to_ebd": "workbench action next editor in group"
  },
  {
    "key": "alt+1",
    "command": "workbench.action.openEditorAtIndex1",
    "to_ebd": "workbench action open editor at index1"
  },
  {
    "key": "alt+2",
    "command": "workbench.action.openEditorAtIndex2",
    "to_ebd": "workbench action open editor at index2"
  },
  {
    "key": "alt+3",
    "command": "workbench.action.openEditorAtIndex3",
    "to_ebd": "workbench action open editor at index3"
  },
  {
    "key": "alt+4",
    "command": "workbench.action.openEditorAtIndex4",
    "to_ebd": "workbench action open editor at index4"
  },
  {
    "key": "alt+5",
    "command": "workbench.action.openEditorAtIndex5",
    "to_ebd": "workbench action open editor at index5"
  },
  {
    "key": "alt+6",
    "command": "workbench.action.openEditorAtIndex6",
    "to_ebd": "workbench action open editor at index6"
  },
  {
    "key": "alt+7",
    "command": "workbench.action.openEditorAtIndex7",
    "to_ebd": "workbench action open editor at index7"
  },
  {
    "key": "alt+8",
    "command": "workbench.action.openEditorAtIndex8",
    "to_ebd": "workbench action open editor at index8"
  },
  {
    "key": "alt+9",
    "command": "workbench.action.openEditorAtIndex9",
    "to_ebd": "workbench action open editor at index9"
  },
  {
    "key": "ctrl+k ctrl+s",
    "command": "workbench.action.openGlobalKeybindings",
    "to_ebd": "workbench action open global keybindings"
  },
  {
    "key": "ctrl+r",
    "command": "workbench.action.openRecent",
    "to_ebd": "workbench action open recent"
  },
  {
    "key": "ctrl+,",
    "command": "workbench.action.openSettings",
    "to_ebd": "workbench action open settings"
  },
  {
    "key": "ctrl+k ctrl+h",
    "command": "workbench.action.output.toggleOutput",
    "when": "workbench.panel.output.active",
    "to_ebd": "workbench action output toggle output"
  },
  {
    "key": "ctrl+k shift+enter",
    "command": "workbench.action.pinEditor",
    "when": "!activeEditorIsPinned",
    "to_ebd": "workbench action pin editor"
  },
  {
    "key": "ctrl+pageup",
    "command": "workbench.action.previousEditor",
    "to_ebd": "workbench action previous editor"
  },
  {
    "key": "ctrl+k ctrl+pageup",
    "command": "workbench.action.previousEditorInGroup",
    "to_ebd": "workbench action previous editor in group"
  },
  {
    "key": "ctrl+e",
    "command": "workbench.action.quickOpen",
    "to_ebd": "workbench action quick open"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen",
    "to_ebd": "workbench action quick open"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty",
    "to_ebd": "workbench action quick open least recently used editor in group"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty",
    "to_ebd": "workbench action quick open previous recently used editor in group"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.quit",
    "to_ebd": "workbench action quit"
  },
  {
    "key": "ctrl+shift+t",
    "command": "workbench.action.reopenClosedEditor",
    "to_ebd": "workbench action reopen closed editor"
  },
  {
    "key": "ctrl+shift+h",
    "command": "workbench.action.replaceInFiles",
    "to_ebd": "workbench action replace in files"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.search.toggleQueryDetails",
    "when": "inSearchEditor || searchViewletFocus",
    "to_ebd": "workbench action search toggle query details"
  },
  {
    "key": "ctrl+k ctrl+t",
    "command": "workbench.action.selectTheme",
    "to_ebd": "workbench action select theme"
  },
  {
    "key": "ctrl+k ctrl+p",
    "command": "workbench.action.showAllEditors",
    "to_ebd": "workbench action show all editors"
  },
  {
    "key": "ctrl+t",
    "command": "workbench.action.showAllSymbols",
    "to_ebd": "workbench action show all symbols"
  },
  {
    "key": "f1",
    "command": "workbench.action.showCommands",
    "to_ebd": "workbench action show commands"
  },
  {
    "key": "ctrl+shift+p",
    "command": "workbench.action.showCommands",
    "to_ebd": "workbench action show commands"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "workbench.action.showTreeHover",
    "when": "customTreeView && listFocus && !inputFocus",
    "to_ebd": "workbench action show tree hover"
  },
  {
    "key": "ctrl+\\",
    "command": "workbench.action.splitEditor",
    "to_ebd": "workbench action split editor"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "workbench.action.splitEditorInGroup",
    "when": "activeEditorCanSplitInGroup",
    "to_ebd": "workbench action split editor in group"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "workbench.action.splitEditorOrthogonal",
    "to_ebd": "workbench action split editor orthogonal"
  },
  {
    "key": "ctrl+shift+b",
    "command": "workbench.action.tasks.build",
    "when": "taskCommandsRegistered",
    "to_ebd": "workbench action tasks build"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.clearSelection",
    "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocus && terminalProcessSupported && terminalTextSelected && !terminalFindVisible",
    "to_ebd": "workbench action terminal clear selection"
  },
  {
    "key": "ctrl+shift+c",
    "command": "workbench.action.terminal.copySelection",
    "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected",
    "to_ebd": "workbench action terminal copy selection"
  },
  {
    "key": "f3",
    "command": "workbench.action.terminal.findNext",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal find next"
  },
  {
    "key": "shift+enter",
    "command": "workbench.action.terminal.findNext",
    "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported",
    "to_ebd": "workbench action terminal find next"
  },
  {
    "key": "shift+f3",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal find previous"
  },
  {
    "key": "enter",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported",
    "to_ebd": "workbench action terminal find previous"
  },
  {
    "key": "ctrl+f",
    "command": "workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal focus find"
  },
  {
    "key": "ctrl+pagedown",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus",
    "to_ebd": "workbench action terminal focus next"
  },
  {
    "key": "alt+down",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal focus next pane"
  },
  {
    "key": "alt+right",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal focus next pane"
  },
  {
    "key": "ctrl+pageup",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus",
    "to_ebd": "workbench action terminal focus previous"
  },
  {
    "key": "alt+up",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal focus previous pane"
  },
  {
    "key": "alt+left",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal focus previous pane"
  },
  {
    "key": "ctrl+shift+\\",
    "command": "workbench.action.terminal.focusTabs",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus",
    "to_ebd": "workbench action terminal focus tabs"
  },
  {
    "key": "shift+escape",
    "command": "workbench.action.terminal.hideFind",
    "when": "terminalFindVisible && terminalFocus && terminalHasBeenCreated || terminalFindVisible && terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal hide find"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.hideFind",
    "when": "terminalFindVisible && terminalFocus && terminalHasBeenCreated || terminalFindVisible && terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal hide find"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.terminal.killEditor",
    "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'",
    "to_ebd": "workbench action terminal kill editor"
  },
  {
    "key": "delete",
    "command": "workbench.action.terminal.killInstance",
    "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus",
    "to_ebd": "workbench action terminal kill instance"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.navigationModeExit",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal navigation mode exit"
  },
  {
    "key": "down",
    "command": "workbench.action.terminal.navigationModeFocusNext",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalNavigationModeActive && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalNavigationModeActive && terminalProcessSupported",
    "to_ebd": "workbench action terminal navigation mode focus next"
  },
  {
    "key": "ctrl+down",
    "command": "workbench.action.terminal.navigationModeFocusNext",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal navigation mode focus next"
  },
  {
    "key": "pagedown",
    "command": "workbench.action.terminal.navigationModeFocusNextPage",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalNavigationModeActive && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalNavigationModeActive && terminalProcessSupported",
    "to_ebd": "workbench action terminal navigation mode focus next page"
  },
  {
    "key": "up",
    "command": "workbench.action.terminal.navigationModeFocusPrevious",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalNavigationModeActive && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalNavigationModeActive && terminalProcessSupported",
    "to_ebd": "workbench action terminal navigation mode focus previous"
  },
  {
    "key": "ctrl+up",
    "command": "workbench.action.terminal.navigationModeFocusPrevious",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal navigation mode focus previous"
  },
  {
    "key": "pageup",
    "command": "workbench.action.terminal.navigationModeFocusPreviousPage",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalNavigationModeActive && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalNavigationModeActive && terminalProcessSupported",
    "to_ebd": "workbench action terminal navigation mode focus previous page"
  },
  {
    "key": "ctrl+shift+`",
    "command": "workbench.action.terminal.new",
    "when": "terminalProcessSupported || terminalWebExtensionContributedProfile",
    "to_ebd": "workbench action terminal new"
  },
  {
    "key": "ctrl+shift+c",
    "command": "workbench.action.terminal.openNativeConsole",
    "when": "!terminalFocus",
    "to_ebd": "workbench action terminal open native console"
  },
  {
    "key": "ctrl+shift+v",
    "command": "workbench.action.terminal.paste",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal paste"
  },
  {
    "key": "shift+insert",
    "command": "workbench.action.terminal.pasteSelection",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal paste selection"
  },
  {
    "key": "f2",
    "command": "workbench.action.terminal.renameInstance",
    "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection",
    "to_ebd": "workbench action terminal rename instance"
  },
  {
    "key": "ctrl+shift+left",
    "command": "workbench.action.terminal.resizePaneLeft",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal resize pane left"
  },
  {
    "key": "ctrl+shift+right",
    "command": "workbench.action.terminal.resizePaneRight",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal resize pane right"
  },
  {
    "key": "ctrl+shift+down",
    "command": "workbench.action.terminal.scrollDown",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive",
    "to_ebd": "workbench action terminal scroll down"
  },
  {
    "key": "shift+pagedown",
    "command": "workbench.action.terminal.scrollDownPage",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive",
    "to_ebd": "workbench action terminal scroll down page"
  },
  {
    "key": "shift+end",
    "command": "workbench.action.terminal.scrollToBottom",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive",
    "to_ebd": "workbench action terminal scroll to bottom"
  },
  {
    "key": "ctrl+down",
    "command": "workbench.action.terminal.scrollToNextCommand",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled",
    "to_ebd": "workbench action terminal scroll to next command"
  },
  {
    "key": "ctrl+up",
    "command": "workbench.action.terminal.scrollToPreviousCommand",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled",
    "to_ebd": "workbench action terminal scroll to previous command"
  },
  {
    "key": "shift+home",
    "command": "workbench.action.terminal.scrollToTop",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive",
    "to_ebd": "workbench action terminal scroll to top"
  },
  {
    "key": "ctrl+shift+up",
    "command": "workbench.action.terminal.scrollUp",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive",
    "to_ebd": "workbench action terminal scroll up"
  },
  {
    "key": "shift+pageup",
    "command": "workbench.action.terminal.scrollUpPage",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive",
    "to_ebd": "workbench action terminal scroll up page"
  },
  {
    "key": "ctrl+shift+down",
    "command": "workbench.action.terminal.selectToNextCommand",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal select to next command"
  },
  {
    "key": "ctrl+shift+up",
    "command": "workbench.action.terminal.selectToPreviousCommand",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal select to previous command"
  },
  {
    "key": "ctrl+space",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
    "args": {
      "text": "\u001b[24~a"
    },
    "to_ebd": "workbench action terminal send sequence"
  },
  {
    "key": "alt+space",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
    "args": {
      "text": "\u001b[24~b"
    },
    "to_ebd": "workbench action terminal send sequence"
  },
  {
    "key": "shift+enter",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
    "args": {
      "text": "\u001b[24~c"
    },
    "to_ebd": "workbench action terminal send sequence"
  },
  {
    "key": "ctrl+backspace",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u0017"
    },
    "to_ebd": "workbench action terminal send sequence"
  },
  {
    "key": "ctrl+delete",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u001bd"
    },
    "to_ebd": "workbench action terminal send sequence"
  },
  {
    "key": "ctrl+shift+2",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u0000"
    },
    "to_ebd": "workbench action terminal send sequence"
  },
  {
    "key": "ctrl+shift+6",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u001e"
    },
    "to_ebd": "workbench action terminal send sequence"
  },
  {
    "key": "ctrl+/",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u001f"
    },
    "to_ebd": "workbench action terminal send sequence"
  },
  {
    "key": "alt+z",
    "command": "workbench.action.terminal.sizeToContentWidth",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported",
    "to_ebd": "workbench action terminal size to content width"
  },
  {
    "key": "ctrl+shift+5",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile",
    "to_ebd": "workbench action terminal split"
  },
  {
    "key": "ctrl+shift+5",
    "command": "workbench.action.terminal.splitInstance",
    "when": "terminalProcessSupported && terminalTabsFocus",
    "to_ebd": "workbench action terminal split instance"
  },
  {
    "key": "alt+c",
    "command": "workbench.action.terminal.toggleFindCaseSensitive",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal toggle find case sensitive"
  },
  {
    "key": "alt+r",
    "command": "workbench.action.terminal.toggleFindRegex",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal toggle find regex"
  },
  {
    "key": "alt+w",
    "command": "workbench.action.terminal.toggleFindWholeWord",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
    "to_ebd": "workbench action terminal toggle find whole word"
  },
  {
    "key": "ctrl+`",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active",
    "to_ebd": "workbench action terminal toggle terminal"
  },
  {
    "key": "shift+alt+0",
    "command": "workbench.action.toggleEditorGroupLayout",
    "to_ebd": "workbench action toggle editor group layout"
  },
  {
    "key": "f11",
    "command": "workbench.action.toggleFullScreen",
    "when": "!isIOS",
    "to_ebd": "workbench action toggle full screen"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.togglePanel",
    "to_ebd": "workbench action toggle panel"
  },
  {
    "key": "ctrl+b",
    "command": "workbench.action.toggleSidebarVisibility",
    "to_ebd": "workbench action toggle sidebar visibility"
  },
  {
    "key": "ctrl+k z",
    "command": "workbench.action.toggleZenMode",
    "to_ebd": "workbench action toggle zen mode"
  },
  {
    "key": "ctrl+k shift+enter",
    "command": "workbench.action.unpinEditor",
    "when": "activeEditorIsPinned",
    "to_ebd": "workbench action unpin editor"
  },
  {
    "key": "ctrl+numpad_add",
    "command": "workbench.action.zoomIn",
    "to_ebd": "workbench action zoom in"
  },
  {
    "key": "ctrl+shift+=",
    "command": "workbench.action.zoomIn",
    "to_ebd": "workbench action zoom in"
  },
  {
    "key": "ctrl+=",
    "command": "workbench.action.zoomIn",
    "to_ebd": "workbench action zoom in"
  },
  {
    "key": "ctrl+numpad_subtract",
    "command": "workbench.action.zoomOut",
    "to_ebd": "workbench action zoom out"
  },
  {
    "key": "ctrl+-",
    "command": "workbench.action.zoomOut",
    "to_ebd": "workbench action zoom out"
  },
  {
    "key": "ctrl+numpad0",
    "command": "workbench.action.zoomReset",
    "to_ebd": "workbench action zoom reset"
  },
  {
    "key": "ctrl+shift+m",
    "command": "workbench.actions.view.problems",
    "when": "workbench.panel.markers.view.active",
    "to_ebd": "workbench actions view problems"
  },
  {
    "key": "escape",
    "command": "workbench.banner.focusBanner",
    "when": "bannerFocused",
    "to_ebd": "workbench banner focus banner"
  },
  {
    "key": "down",
    "command": "workbench.banner.focusNextAction",
    "when": "bannerFocused",
    "to_ebd": "workbench banner focus next action"
  },
  {
    "key": "right",
    "command": "workbench.banner.focusNextAction",
    "when": "bannerFocused",
    "to_ebd": "workbench banner focus next action"
  },
  {
    "key": "up",
    "command": "workbench.banner.focusPreviousAction",
    "when": "bannerFocused",
    "to_ebd": "workbench banner focus previous action"
  },
  {
    "key": "left",
    "command": "workbench.banner.focusPreviousAction",
    "when": "bannerFocused",
    "to_ebd": "workbench banner focus previous action"
  },
  {
    "key": "ctrl+shift+y",
    "command": "workbench.debug.action.toggleRepl",
    "when": "workbench.panel.repl.view.active",
    "to_ebd": "workbench debug action toggle repl"
  },
  {
    "key": "ctrl+k c",
    "command": "workbench.files.action.compareWithClipboard",
    "to_ebd": "workbench files action compare with clipboard"
  },
  {
    "key": "ctrl+k d",
    "command": "workbench.files.action.compareWithSaved",
    "to_ebd": "workbench files action compare with saved"
  },
  {
    "key": "ctrl+k e",
    "command": "workbench.files.action.focusOpenEditorsView",
    "when": "workbench.explorer.openEditorsView.active",
    "to_ebd": "workbench files action focus open editors view"
  },
  {
    "key": "escape",
    "command": "workbench.statusBar.clearFocus",
    "when": "statusBarFocused",
    "to_ebd": "workbench status bar clear focus"
  },
  {
    "key": "home",
    "command": "workbench.statusBar.focusFirst",
    "when": "statusBarFocused",
    "to_ebd": "workbench status bar focus first"
  },
  {
    "key": "end",
    "command": "workbench.statusBar.focusLast",
    "when": "statusBarFocused",
    "to_ebd": "workbench status bar focus last"
  },
  {
    "key": "down",
    "command": "workbench.statusBar.focusNext",
    "when": "statusBarFocused",
    "to_ebd": "workbench status bar focus next"
  },
  {
    "key": "right",
    "command": "workbench.statusBar.focusNext",
    "when": "statusBarFocused",
    "to_ebd": "workbench status bar focus next"
  },
  {
    "key": "up",
    "command": "workbench.statusBar.focusPrevious",
    "when": "statusBarFocused",
    "to_ebd": "workbench status bar focus previous"
  },
  {
    "key": "left",
    "command": "workbench.statusBar.focusPrevious",
    "when": "statusBarFocused",
    "to_ebd": "workbench status bar focus previous"
  },
  {
    "key": "ctrl+shift+d",
    "command": "workbench.view.debug",
    "when": "viewContainer.workbench.view.debug.enabled",
    "to_ebd": "workbench view debug"
  },
  {
    "key": "ctrl+shift+e",
    "command": "workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled",
    "to_ebd": "workbench view explorer"
  },
  {
    "key": "ctrl+shift+x",
    "command": "workbench.view.extensions",
    "when": "viewContainer.workbench.view.extensions.enabled",
    "to_ebd": "workbench view extensions"
  },
  {
    "key": "ctrl+shift+g",
    "command": "workbench.view.scm",
    "when": "workbench.scm.active",
    "to_ebd": "workbench view scm"
  },
  {
    "key": "ctrl+shift+f",
    "command": "workbench.view.search",
    "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/",
    "to_ebd": "workbench view search"
  },
  {
    "key": "ctrl+right",
    "command": "breadcrumbs.focusNextWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus",
    "to_ebd": "breadcrumbs focus next with picker"
  },
  {
    "key": "ctrl+left",
    "command": "breadcrumbs.focusPreviousWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus",
    "to_ebd": "breadcrumbs focus previous with picker"
  },
  {
    "key": "escape",
    "command": "breadcrumbs.selectEditor",
    "when": "breadcrumbsActive && breadcrumbsVisible",
    "to_ebd": "breadcrumbs select editor"
  },
  {
    "key": "ctrl+k down",
    "command": "views.moveViewDown",
    "when": "focusedView != ''",
    "to_ebd": "views move view down"
  },
  {
    "key": "ctrl+k left",
    "command": "views.moveViewLeft",
    "when": "focusedView != ''",
    "to_ebd": "views move view left"
  },
  {
    "key": "ctrl+k right",
    "command": "views.moveViewRight",
    "when": "focusedView != ''",
    "to_ebd": "views move view right"
  },
  {
    "key": "ctrl+k up",
    "command": "views.moveViewUp",
    "when": "focusedView != ''",
    "to_ebd": "views move view up"
  },
  {
    "key": "ctrl+pagedown",
    "command": "workbench.action.debug.nextConsole",
    "when": "inDebugRepl",
    "to_ebd": "workbench action debug next console"
  },
  {
    "key": "ctrl+pageup",
    "command": "workbench.action.debug.prevConsole",
    "when": "inDebugRepl",
    "to_ebd": "workbench action debug prev console"
  },
  {
    "key": "f6",
    "command": "workbench.action.debug.pause",
    "when": "debugState == 'running'",
    "to_ebd": "workbench action debug pause"
  },
  {
    "key": "f2",
    "command": "debug.renameWatchExpression",
    "when": "watchExpressionsFocused",
    "to_ebd": "debug rename watch expression"
  },
  {
    "key": "f2",
    "command": "debug.setVariable",
    "when": "variablesFocused",
    "to_ebd": "debug set variable"
  },
  {
    "key": "space",
    "command": "debug.toggleBreakpoint",
    "when": "breakpointsFocused && !inputFocus",
    "to_ebd": "debug toggle breakpoint"
  },
  {
    "key": "shift+delete",
    "command": "deleteFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus",
    "to_ebd": "delete file"
  },
  {
    "key": "delete",
    "command": "deleteFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus",
    "to_ebd": "delete file"
  },
  {
    "key": "escape",
    "command": "editor.closeCallHierarchy",
    "when": "callHierarchyVisible && !config.editor.stablePeek",
    "to_ebd": "editor close call hierarchy"
  },
  {
    "key": "escape",
    "command": "editor.closeTypeHierarchy",
    "when": "typeHierarchyVisible && !config.editor.stablePeek",
    "to_ebd": "editor close type hierarchy"
  },
  {
    "key": "enter",
    "command": "explorer.openAndPassFocus",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus",
    "to_ebd": "explorer open and pass focus"
  },
  {
    "key": "escape",
    "command": "filesExplorer.cancelCut",
    "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus",
    "to_ebd": "files explorer cancel cut"
  },
  {
    "key": "ctrl+c",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus",
    "to_ebd": "files explorer copy"
  },
  {
    "key": "ctrl+x",
    "command": "filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
    "to_ebd": "files explorer cut"
  },
  {
    "key": "space",
    "command": "filesExplorer.openFilePreserveFocus",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus",
    "to_ebd": "files explorer open file preserve focus"
  },
  {
    "key": "ctrl+v",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus",
    "to_ebd": "files explorer paste"
  },
  {
    "key": "home",
    "command": "firstCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus",
    "to_ebd": "first compressed folder"
  },
  {
    "key": "end",
    "command": "lastCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus",
    "to_ebd": "last compressed folder"
  },
  {
    "key": "delete",
    "command": "moveFileToTrash",
    "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus",
    "to_ebd": "move file to trash"
  },
  {
    "key": "right",
    "command": "nextCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus",
    "to_ebd": "next compressed folder"
  },
  {
    "key": "left",
    "command": "previousCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus",
    "to_ebd": "previous compressed folder"
  },
  {
    "key": "delete",
    "command": "remote.tunnel.closeInline",
    "when": "tunnelCloseable && tunnelViewFocus",
    "to_ebd": "remote tunnel close inline"
  },
  {
    "key": "ctrl+c",
    "command": "remote.tunnel.copyAddressInline",
    "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'",
    "to_ebd": "remote tunnel copy address inline"
  },
  {
    "key": "f2",
    "command": "remote.tunnel.label",
    "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'",
    "to_ebd": "remote tunnel label"
  },
  {
    "key": "f2",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
    "to_ebd": "rename file"
  },
  {
    "key": "f5",
    "command": "workbench.action.debug.continue",
    "when": "debugState == 'stopped'",
    "to_ebd": "workbench action debug continue"
  },
  {
    "key": "f11",
    "command": "workbench.action.debug.stepInto",
    "when": "debugState != 'inactive'",
    "to_ebd": "workbench action debug step into"
  },
  {
    "key": "shift+escape",
    "command": "closeReferenceSearch",
    "when": "referenceSearchVisible && !config.editor.stablePeek",
    "to_ebd": "close reference search"
  },
  {
    "key": "escape",
    "command": "closeReferenceSearch",
    "when": "referenceSearchVisible && !config.editor.stablePeek",
    "to_ebd": "close reference search"
  },
  {
    "key": "escape",
    "command": "notifications.hideList",
    "when": "notificationCenterVisible",
    "to_ebd": "notifications hide list"
  },
  {
    "key": "ctrl+alt+-",
    "command": "workbench.action.quickInputBack",
    "when": "inQuickOpen",
    "to_ebd": "workbench action quick input back"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen",
    "to_ebd": "workbench action quick open navigate next in editor picker"
  },
  {
    "key": "ctrl+e",
    "command": "workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen",
    "to_ebd": "workbench action quick open navigate next in file picker"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen",
    "to_ebd": "workbench action quick open navigate next in file picker"
  },
  {
    "key": "ctrl+r",
    "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
    "when": "inQuickOpen && inRecentFilesPicker",
    "to_ebd": "workbench action quick open navigate next in recent files picker"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen",
    "to_ebd": "workbench action quick open navigate previous in editor picker"
  },
  {
    "key": "ctrl+shift+e",
    "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inFilesPicker && inQuickOpen",
    "to_ebd": "workbench action quick open navigate previous in file picker"
  },
  {
    "key": "ctrl+shift+p",
    "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inFilesPicker && inQuickOpen",
    "to_ebd": "workbench action quick open navigate previous in file picker"
  },
  {
    "key": "ctrl+shift+r",
    "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
    "when": "inQuickOpen && inRecentFilesPicker",
    "to_ebd": "workbench action quick open navigate previous in recent files picker"
  },
  {
    "key": "ctrl+r",
    "command": "workbench.action.reloadWindow",
    "when": "isDevelopment",
    "to_ebd": "workbench action reload window"
  },
  {
    "key": "ctrl+shift+f",
    "command": "workbench.action.terminal.searchWorkspace",
    "when": "terminalFocus && terminalProcessSupported && terminalTextSelected",
    "to_ebd": "workbench action terminal search workspace"
  },
  {
    "key": "ctrl+shift+i",
    "command": "workbench.action.toggleDevTools",
    "when": "isDevelopment",
    "to_ebd": "workbench action toggle dev tools"
  },
  {
    "key": "escape",
    "command": "notifications.hideToasts",
    "when": "notificationFocus && notificationToastsVisible",
    "to_ebd": "notifications hide toasts"
  },
  {
    "key": "f10",
    "command": "extension.node-debug.startWithStopOnEntry",
    "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'",
    "to_ebd": "extension node-debug start with stop on entry"
  },
  {
    "key": "ctrl+k ctrl+alt+s",
    "command": "git.stageSelectedRanges",
    "when": "isInDiffEditor",
    "to_ebd": "git stage selected ranges"
  },
  {
    "key": "ctrl+shift+v",
    "command": "markdown.showPreview",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'",
    "to_ebd": "markdown show preview"
  },
  {
    "key": "shift+alt+f12",
    "command": "references-view.findReferences",
    "when": "editorHasReferenceProvider",
    "to_ebd": "references-view find references"
  },
  {
    "key": "f11",
    "command": "extension.node-debug.startWithStopOnEntry",
    "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'",
    "to_ebd": "extension node-debug start with stop on entry"
  },
  {
    "key": "ctrl+k ctrl+n",
    "command": "git.unstageSelectedRanges",
    "when": "isInDiffEditor",
    "to_ebd": "git unstage selected ranges"
  },
  {
    "key": "ctrl+k v",
    "command": "markdown.showPreviewToSide",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'",
    "to_ebd": "markdown show preview to side"
  },
  {
    "key": "f4",
    "command": "references-view.next",
    "when": "reference-list.hasResult && references-view.canNavigate",
    "to_ebd": "references-view next"
  },
  {
    "key": "ctrl+k ctrl+r",
    "command": "git.revertSelectedRanges",
    "when": "isInDiffEditor",
    "to_ebd": "git revert selected ranges"
  },
  {
    "key": "shift+f4",
    "command": "references-view.prev",
    "when": "reference-list.hasResult && references-view.canNavigate",
    "to_ebd": "references-view prev"
  },
  {
    "key": "shift+alt+h",
    "command": "references-view.showCallHierarchy",
    "when": "editorHasCallHierarchyProvider",
    "to_ebd": "references-view show call hierarchy"
  },
  {
    "key": "shift+enter",
    "command": "jupyter.execSelectionInteractive",
    "when": "editorTextFocus && isWorkspaceTrusted && jupyter.ownsSelection && !findInputFocussed && !jupyter.webExtension && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'",
    "to_ebd": "jupyter exec selection interactive"
  },
  {
    "key": "f",
    "command": "notebook.find",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook find"
  },
  {
    "key": "shift+enter",
    "command": "python.execSelectionInTerminal",
    "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'",
    "to_ebd": "python exec selection in terminal"
  },
  {
    "key": "shift+enter",
    "command": "jupyter.runcurrentcelladvance",
    "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused",
    "to_ebd": "jupyter runcurrentcelladvance"
  },
  {
    "key": "k",
    "command": "list.focusUp",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "list focus up"
  },
  {
    "key": "ctrl+r",
    "command": "python.refreshTensorBoard",
    "when": "python.hasActiveTensorBoardSession",
    "to_ebd": "python refresh tensor board"
  },
  {
    "key": "ctrl+enter",
    "command": "jupyter.runcurrentcell",
    "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused",
    "to_ebd": "jupyter runcurrentcell"
  },
  {
    "key": "j",
    "command": "list.focusDown",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "list focus down"
  },
  {
    "key": "alt+enter",
    "command": "jupyter.runcurrentcellandaddbelow",
    "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused",
    "to_ebd": "jupyter runcurrentcellandaddbelow"
  },
  {
    "key": "a",
    "command": "notebook.cell.insertCodeCellAboveAndFocusContainer",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell insert code cell above and focus container"
  },
  {
    "key": "shift+enter",
    "command": "interactive.execute",
    "when": "!notebookKernel && resourceScheme == 'vscode-interactive' || resourceScheme == 'vscode-interactive' && notebookKernel =~ /^ms-toolsai.jupyter\\//",
    "to_ebd": "interactive execute"
  },
  {
    "key": "b",
    "command": "notebook.cell.insertCodeCellBelowAndFocusContainer",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell insert code cell below and focus container"
  },
  {
    "key": "escape",
    "command": "interactive.input.clear",
    "when": "!LinkedEditingInputVisible && !accessibilityHelpWidgetVisible && !breakpointWidgetVisible && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !exceptionWidgetVisible && !findWidgetVisible && !inSnippetMode && !isComposing && !markersNavigationVisible && !notificationToastsVisible && !parameterHintsVisible && !renameInputVisible && !selectionAnchorSet && !suggestWidgetVisible && resourceScheme == 'vscode-interactive'",
    "to_ebd": "interactive input clear"
  },
  {
    "key": "d d",
    "command": "notebook.cell.delete",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell delete"
  },
  {
    "key": "ctrl+; s",
    "command": "jupyter.insertCellBelowPosition",
    "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter insert cell below position"
  },
  {
    "key": "z",
    "command": "undo",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "undo"
  },
  {
    "key": "ctrl+; b",
    "command": "jupyter.insertCellBelow",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter insert cell below"
  },
  {
    "key": "s",
    "command": "workbench.action.files.save",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "workbench action files save"
  },
  {
    "key": "ctrl+; a",
    "command": "jupyter.insertCellAbove",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter insert cell above"
  },
  {
    "key": "c",
    "command": "notebook.cell.copy",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell copy"
  },
  {
    "key": "ctrl+; x",
    "command": "jupyter.deleteCells",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter delete cells"
  },
  {
    "key": "x",
    "command": "notebook.cell.cut",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell cut"
  },
  {
    "key": "ctrl+shift+alt+[",
    "command": "jupyter.extendSelectionByCellAbove",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter extend selection by cell above"
  },
  {
    "key": "v",
    "command": "notebook.cell.paste",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell paste"
  },
  {
    "key": "ctrl+shift+alt+]",
    "command": "jupyter.extendSelectionByCellBelow",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter extend selection by cell below"
  },
  {
    "key": "shift+l",
    "command": "notebook.toggleLineNumbers",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook toggle line numbers"
  },
  {
    "key": "ctrl+; u",
    "command": "jupyter.moveCellsUp",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter move cells up"
  },
  {
    "key": "o",
    "command": "notebook.cell.toggleOutputs",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell toggle outputs"
  },
  {
    "key": "ctrl+; d",
    "command": "jupyter.moveCellsDown",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter move cells down"
  },
  {
    "key": "l",
    "command": "notebook.cell.toggleLineNumbers",
    "when": "notebookEditorFocused && !inputFocus",
    "to_ebd": "notebook cell toggle line numbers"
  },
  {
    "key": "ctrl+; m",
    "command": "jupyter.changeCellToMarkdown",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter change cell to markdown"
  },
  {
    "key": "ctrl+shift+-",
    "command": "notebook.cell.split",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused",
    "to_ebd": "notebook cell split"
  },
  {
    "key": "ctrl+; c",
    "command": "jupyter.changeCellToCode",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter change cell to code"
  },
  {
    "key": "ctrl+enter",
    "command": "notebook.cell.executeAndFocusContainer",
    "when": "notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused",
    "to_ebd": "notebook cell execute and focus container"
  },
  {
    "key": "ctrl+alt+]",
    "command": "jupyter.gotoNextCellInFile",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter goto next cell in file"
  },
  {
    "key": "shift+enter",
    "command": "notebook.cell.executeAndSelectBelow",
    "when": "notebookCellListFocused && notebookCellType == 'code' || editorTextFocus && inputFocus && notebookEditorFocused",
    "to_ebd": "notebook cell execute and select below"
  },
  {
    "key": "ctrl+alt+[",
    "command": "jupyter.gotoPrevCellInFile",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter goto prev cell in file"
  },
  {
    "key": "ctrl+alt+\\",
    "command": "jupyter.selectCellContents",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter select cell contents"
  },
  {
    "key": "ctrl+shift+alt+\\",
    "command": "jupyter.selectCell",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused",
    "to_ebd": "jupyter select cell"
  },
  {
    "key": "ctrl+r",
    "command": "jupyter.refreshDataViewer",
    "when": "isWorkspaceTrusted && jupyter.dataViewerActive",
    "to_ebd": "jupyter refresh data viewer"
  },
  {
    "key": "ctrl+shift+alt+enter",
    "command": "jupyter.runAndDebugCell",
    "when": "isWorkspaceTrusted && jupyter.ispythonnotebook && !notebookKernel && notebookCellType == 'code' || isWorkspaceTrusted && jupyter.ispythonnotebook && notebookCellType == 'code' && notebookKernel =~ /^ms-toolsai.jupyter\\// && resource not in 'jupyter.notebookeditor.debugDocuments'",
    "to_ebd": "jupyter run and debug cell"
  },
  {
    "key": "f10",
    "command": "jupyter.runByLine",
    "when": "isWorkspaceTrusted && jupyter.ispythonnotebook && !notebookKernel && notebookCellType == 'code' || isWorkspaceTrusted && jupyter.ispythonnotebook && notebookCellType == 'code' && notebookKernel =~ /^ms-toolsai.jupyter\\// && resource not in 'jupyter.notebookeditor.debugDocuments'",
    "to_ebd": "jupyter run by line"
  },
  {
    "key": "f10",
    "command": "jupyter.runByLineNext",
    "when": "notebookCellResource in 'jupyter.notebookeditor.runByLineCells'",
    "to_ebd": "jupyter run by line next"
  },
  {
    "key": "ctrl+enter",
    "command": "jupyter.runByLineStop",
    "when": "notebookCellResource in 'jupyter.notebookeditor.runByLineCells'",
    "to_ebd": "jupyter run by line stop"
  },
  {
    "key": "ctrl+.",
    "command": "acceptSelectedCodeAction",
    "when": "actionWidgetVisible",
    "to_ebd": "accept selected code action"
  },
  {
    "key": "enter",
    "command": "acceptSelectedCodeAction",
    "when": "actionWidgetVisible",
    "to_ebd": "accept selected code action"
  },
  {
    "key": "shift+escape",
    "command": "hideCodeActionWidget",
    "when": "actionWidgetVisible",
    "to_ebd": "hide code action widget"
  },
  {
    "key": "escape",
    "command": "hideCodeActionWidget",
    "when": "actionWidgetVisible",
    "to_ebd": "hide code action widget"
  },
  {
    "key": "ctrl+enter",
    "command": "previewSelectedCodeAction",
    "when": "actionWidgetVisible",
    "to_ebd": "preview selected code action"
  },
  {
    "key": "ctrl+down",
    "command": "selectNextCodeAction",
    "when": "actionWidgetVisible",
    "to_ebd": "select next code action"
  },
  {
    "key": "down",
    "command": "selectNextCodeAction",
    "when": "actionWidgetVisible",
    "to_ebd": "select next code action"
  },
  {
    "key": "ctrl+up",
    "command": "selectPrevCodeAction",
    "when": "actionWidgetVisible",
    "to_ebd": "select prev code action"
  },
  {
    "key": "up",
    "command": "selectPrevCodeAction",
    "when": "actionWidgetVisible",
    "to_ebd": "select prev code action"
  },
  {
    "command": "acceptSelectedSuggestionOnEnter",
    "to_ebd": "accept selected suggestion on enter"
  },
  {
    "command": "acceptSnippet",
    "to_ebd": "accept snippet"
  },
  {
    "command": "actions.findWithSelection",
    "to_ebd": "actions find with selection"
  },
  {
    "command": "addRootFolder",
    "to_ebd": "add root folder"
  },
  {
    "command": "audioCues.help",
    "to_ebd": "audio cues help"
  },
  {
    "command": "breadcrumbs.toggle",
    "to_ebd": "breadcrumbs toggle"
  },
  {
    "command": "breadcrumbs.toggleFromEditorTitle",
    "to_ebd": "breadcrumbs toggle from editor title"
  },
  {
    "command": "callStack.collapse",
    "to_ebd": "call stack collapse"
  },
  {
    "command": "cell",
    "to_ebd": "cell"
  },
  {
    "command": "cell",
    "to_ebd": "cell"
  },
  {
    "command": "cell",
    "to_ebd": "cell"
  },
  {
    "command": "cell",
    "to_ebd": "cell"
  },
  {
    "command": "changeEditorIndentation",
    "to_ebd": "change editor indentation"
  },
  {
    "command": "cleanSearchEditorState",
    "to_ebd": "clean search editor state"
  },
  {
    "command": "closeReferenceSearchEditor",
    "to_ebd": "close reference search editor"
  },
  {
    "command": "codelens.showLensesInCurrentLine",
    "to_ebd": "codelens show lenses in current line"
  },
  {
    "command": "columnSelect",
    "to_ebd": "column select"
  },
  {
    "command": "comments.collapse",
    "to_ebd": "comments collapse"
  },
  {
    "command": "compareFiles",
    "to_ebd": "compare files"
  },
  {
    "command": "compareSelected",
    "to_ebd": "compare selected"
  },
  {
    "command": "compositionEnd",
    "to_ebd": "composition end"
  },
  {
    "command": "compositionStart",
    "to_ebd": "composition start"
  },
  {
    "command": "compositionType",
    "to_ebd": "composition type"
  },
  {
    "command": "configureExtensionsAutoUpdate.all",
    "to_ebd": "configure extensions auto update all"
  },
  {
    "command": "configureExtensionsAutoUpdate.enabled",
    "to_ebd": "configure extensions auto update enabled"
  },
  {
    "command": "configureExtensionsAutoUpdate.none",
    "to_ebd": "configure extensions auto update none"
  },
  {
    "command": "createCursor",
    "to_ebd": "create cursor"
  },
  {
    "command": "cursorLineEnd",
    "to_ebd": "cursor line end"
  },
  {
    "command": "cursorLineEndSelect",
    "to_ebd": "cursor line end select"
  },
  {
    "command": "cursorLineStart",
    "to_ebd": "cursor line start"
  },
  {
    "command": "cursorLineStartSelect",
    "to_ebd": "cursor line start select"
  },
  {
    "command": "cursorRedo",
    "to_ebd": "cursor redo"
  },
  {
    "command": "cursorWordAccessibilityLeft",
    "to_ebd": "cursor word accessibility left"
  },
  {
    "command": "cursorWordAccessibilityLeftSelect",
    "to_ebd": "cursor word accessibility left select"
  },
  {
    "command": "cursorWordAccessibilityRight",
    "to_ebd": "cursor word accessibility right"
  },
  {
    "command": "cursorWordAccessibilityRightSelect",
    "to_ebd": "cursor word accessibility right select"
  },
  {
    "command": "cursorWordEndLeft",
    "to_ebd": "cursor word end left"
  },
  {
    "command": "cursorWordEndLeftSelect",
    "to_ebd": "cursor word end left select"
  },
  {
    "command": "cursorWordPartLeft",
    "to_ebd": "cursor word part left"
  },
  {
    "command": "cursorWordPartLeftSelect",
    "to_ebd": "cursor word part left select"
  },
  {
    "command": "cursorWordPartRight",
    "to_ebd": "cursor word part right"
  },
  {
    "command": "cursorWordPartRightSelect",
    "to_ebd": "cursor word part right select"
  },
  {
    "command": "cursorWordPartStartLeft",
    "to_ebd": "cursor word part start left"
  },
  {
    "command": "cursorWordPartStartLeftSelect",
    "to_ebd": "cursor word part start left select"
  },
  {
    "command": "cursorWordRight",
    "to_ebd": "cursor word right"
  },
  {
    "command": "cursorWordRightSelect",
    "to_ebd": "cursor word right select"
  },
  {
    "command": "cursorWordStartLeft",
    "to_ebd": "cursor word start left"
  },
  {
    "command": "cursorWordStartLeftSelect",
    "to_ebd": "cursor word start left select"
  },
  {
    "command": "cursorWordStartRight",
    "to_ebd": "cursor word start right"
  },
  {
    "command": "cursorWordStartRightSelect",
    "to_ebd": "cursor word start right select"
  },
  {
    "command": "cut",
    "to_ebd": "cut"
  },
  {
    "command": "dataScience.ClearCache",
    "to_ebd": "data science clear cache"
  },
  {
    "command": "dataScience.ClearUserProviderJupyterServerCache",
    "to_ebd": "data science clear user provider jupyter server cache"
  },
  {
    "command": "debug.action.toggleDisassemblyViewSourceCode",
    "to_ebd": "debug action toggle disassembly view source code"
  },
  {
    "command": "debug.addConfiguration",
    "to_ebd": "debug add configuration"
  },
  {
    "command": "debug.addToWatchExpressions",
    "to_ebd": "debug add to watch expressions"
  },
  {
    "command": "debug.breakWhenValueChanges",
    "to_ebd": "debug break when value changes"
  },
  {
    "command": "debug.breakWhenValueIsAccessed",
    "to_ebd": "debug break when value is accessed"
  },
  {
    "command": "debug.breakWhenValueIsRead",
    "to_ebd": "debug break when value is read"
  },
  {
    "command": "debug.collapseRepl",
    "to_ebd": "debug collapse repl"
  },
  {
    "command": "debug.copyEvaluatePath",
    "to_ebd": "debug copy evaluate path"
  },
  {
    "command": "debug.copyStackTrace",
    "to_ebd": "debug copy stack trace"
  },
  {
    "command": "debug.editBreakpoint",
    "to_ebd": "debug edit breakpoint"
  },
  {
    "command": "debug.editFunctionBreakpoint",
    "to_ebd": "debug edit function breakpoint"
  },
  {
    "command": "debug.editFunctionBreakpointHitCount",
    "to_ebd": "debug edit function breakpoint hit count"
  },
  {
    "command": "debug.enableOrDisableBreakpoint",
    "to_ebd": "debug enable or disable breakpoint"
  },
  {
    "command": "debug.installAdditionalDebuggers",
    "to_ebd": "debug install additional debuggers"
  },
  {
    "command": "debug.jumpToCursor",
    "to_ebd": "debug jump to cursor"
  },
  {
    "command": "debug.replCopy",
    "to_ebd": "debug repl copy"
  },
  {
    "command": "debug.replPaste",
    "to_ebd": "debug repl paste"
  },
  {
    "command": "debug.setWatchExpression",
    "to_ebd": "debug set watch expression"
  },
  {
    "command": "debug.startFromConfig",
    "to_ebd": "debug start from config"
  },
  {
    "command": "debug.toggleReplIgnoreFocus",
    "to_ebd": "debug toggle repl ignore focus"
  },
  {
    "command": "default",
    "to_ebd": "default"
  },
  {
    "command": "default",
    "to_ebd": "default"
  },
  {
    "command": "default",
    "to_ebd": "default"
  },
  {
    "command": "default",
    "to_ebd": "default"
  },
  {
    "command": "default",
    "to_ebd": "default"
  },
  {
    "command": "default",
    "to_ebd": "default"
  },
  {
    "command": "default",
    "to_ebd": "default"
  },
  {
    "command": "default",
    "to_ebd": "default"
  },
  {
    "command": "default",
    "to_ebd": "default"
  },
  {
    "command": "deleteAllLeft",
    "to_ebd": "delete all left"
  },
  {
    "command": "deleteAllRight",
    "to_ebd": "delete all right"
  },
  {
    "command": "deleteInsideWord",
    "to_ebd": "delete inside word"
  },
  {
    "command": "deleteWordEndLeft",
    "to_ebd": "delete word end left"
  },
  {
    "command": "deleteWordEndRight",
    "to_ebd": "delete word end right"
  },
  {
    "command": "deleteWordPartLeft",
    "to_ebd": "delete word part left"
  },
  {
    "command": "deleteWordPartRight",
    "to_ebd": "delete word part right"
  },
  {
    "command": "deleteWordStartLeft",
    "to_ebd": "delete word start left"
  },
  {
    "command": "deleteWordStartRight",
    "to_ebd": "delete word start right"
  },
  {
    "command": "detailsContainers.focus",
    "to_ebd": "details containers focus"
  },
  {
    "command": "detailsContainers.resetViewLocation",
    "to_ebd": "details containers reset view location"
  },
  {
    "command": "devVolumes.focus",
    "to_ebd": "dev volumes focus"
  },
  {
    "command": "devVolumes.resetViewLocation",
    "to_ebd": "dev volumes reset view location"
  },
  {
    "command": "docker.command.convertToAS",
    "to_ebd": "docker command convert to as"
  },
  {
    "command": "docker.command.convertToLowercase",
    "to_ebd": "docker command convert to lowercase"
  },
  {
    "command": "docker.command.convertToUppercase",
    "to_ebd": "docker command convert to uppercase"
  },
  {
    "command": "docker.command.directiveToBackslash",
    "to_ebd": "docker command directive to backslash"
  },
  {
    "command": "docker.command.directiveToBacktick",
    "to_ebd": "docker command directive to backtick"
  },
  {
    "command": "docker.command.flagToChown",
    "to_ebd": "docker command flag to chown"
  },
  {
    "command": "docker.command.flagToCopyFrom",
    "to_ebd": "docker command flag to copy from"
  },
  {
    "command": "docker.command.flagToHealthcheckInterval",
    "to_ebd": "docker command flag to healthcheck interval"
  },
  {
    "command": "docker.command.flagToHealthcheckRetries",
    "to_ebd": "docker command flag to healthcheck retries"
  },
  {
    "command": "docker.command.flagToHealthcheckStartPeriod",
    "to_ebd": "docker command flag to healthcheck start period"
  },
  {
    "command": "docker.command.flagToHealthcheckTimeout",
    "to_ebd": "docker command flag to healthcheck timeout"
  },
  {
    "command": "docker.command.removeEmptyContinuationLine",
    "to_ebd": "docker command remove empty continuation line"
  },
  {
    "command": "docker.command.removeExtraArgument",
    "to_ebd": "docker command remove extra argument"
  },
  {
    "command": "dockerContainers.focus",
    "to_ebd": "docker containers focus"
  },
  {
    "command": "dockerContainers.removeView",
    "to_ebd": "docker containers remove view"
  },
  {
    "command": "dockerContainers.resetViewLocation",
    "to_ebd": "docker containers reset view location"
  },
  {
    "command": "dockerContainers.toggleVisibility",
    "to_ebd": "docker containers toggle visibility"
  },
  {
    "command": "dockerImages.focus",
    "to_ebd": "docker images focus"
  },
  {
    "command": "dockerImages.removeView",
    "to_ebd": "docker images remove view"
  },
  {
    "command": "dockerImages.resetViewLocation",
    "to_ebd": "docker images reset view location"
  },
  {
    "command": "dockerImages.toggleVisibility",
    "to_ebd": "docker images toggle visibility"
  },
  {
    "command": "dockerNetworks.focus",
    "to_ebd": "docker networks focus"
  },
  {
    "command": "dockerNetworks.removeView",
    "to_ebd": "docker networks remove view"
  },
  {
    "command": "dockerNetworks.resetViewLocation",
    "to_ebd": "docker networks reset view location"
  },
  {
    "command": "dockerNetworks.toggleVisibility",
    "to_ebd": "docker networks toggle visibility"
  },
  {
    "command": "dockerRegistries.focus",
    "to_ebd": "docker registries focus"
  },
  {
    "command": "dockerRegistries.removeView",
    "to_ebd": "docker registries remove view"
  },
  {
    "command": "dockerRegistries.resetViewLocation",
    "to_ebd": "docker registries reset view location"
  },
  {
    "command": "dockerRegistries.toggleVisibility",
    "to_ebd": "docker registries toggle visibility"
  },
  {
    "command": "dockerVolumes.focus",
    "to_ebd": "docker volumes focus"
  },
  {
    "command": "dockerVolumes.removeView",
    "to_ebd": "docker volumes remove view"
  },
  {
    "command": "dockerVolumes.resetViewLocation",
    "to_ebd": "docker volumes reset view location"
  },
  {
    "command": "dockerVolumes.toggleVisibility",
    "to_ebd": "docker volumes toggle visibility"
  },
  {
    "command": "editor.action.addCursorsToBottom",
    "to_ebd": "editor action add cursors to bottom"
  },
  {
    "command": "editor.action.addCursorsToTop",
    "to_ebd": "editor action add cursors to top"
  },
  {
    "command": "editor.action.addSelectionToPreviousFindMatch",
    "to_ebd": "editor action add selection to previous find match"
  },
  {
    "command": "editor.action.changeTabDisplaySize",
    "to_ebd": "editor action change tab display size"
  },
  {
    "command": "editor.action.clipboardCopyWithSyntaxHighlightingAction",
    "to_ebd": "editor action clipboard copy with syntax highlighting action"
  },
  {
    "command": "editor.action.detectIndentation",
    "to_ebd": "editor action detect indentation"
  },
  {
    "command": "editor.action.duplicateSelection",
    "to_ebd": "editor action duplicate selection"
  },
  {
    "command": "editor.action.findReferences",
    "to_ebd": "editor action find references"
  },
  {
    "command": "editor.action.fixAll",
    "to_ebd": "editor action fix all"
  },
  {
    "command": "editor.action.focusNextCursor",
    "to_ebd": "editor action focus next cursor"
  },
  {
    "command": "editor.action.focusPreviousCursor",
    "to_ebd": "editor action focus previous cursor"
  },
  {
    "command": "editor.action.fontZoomIn",
    "to_ebd": "editor action font zoom in"
  },
  {
    "command": "editor.action.fontZoomOut",
    "to_ebd": "editor action font zoom out"
  },
  {
    "command": "editor.action.fontZoomReset",
    "to_ebd": "editor action font zoom reset"
  },
  {
    "command": "editor.action.forceRetokenize",
    "to_ebd": "editor action force retokenize"
  },
  {
    "command": "editor.action.format",
    "to_ebd": "editor action format"
  },
  {
    "command": "editor.action.formatChanges",
    "to_ebd": "editor action format changes"
  },
  {
    "command": "editor.action.formatDocument.multiple",
    "to_ebd": "editor action format document multiple"
  },
  {
    "command": "editor.action.formatSelection.multiple",
    "to_ebd": "editor action format selection multiple"
  },
  {
    "command": "editor.action.goToDeclaration",
    "to_ebd": "editor action go to declaration"
  },
  {
    "command": "editor.action.goToSelectionAnchor",
    "to_ebd": "editor action go to selection anchor"
  },
  {
    "command": "editor.action.goToTypeDefinition",
    "to_ebd": "editor action go to type definition"
  },
  {
    "command": "editor.action.indentUsingSpaces",
    "to_ebd": "editor action indent using spaces"
  },
  {
    "command": "editor.action.indentUsingTabs",
    "to_ebd": "editor action indent using tabs"
  },
  {
    "command": "editor.action.indentationToSpaces",
    "to_ebd": "editor action indentation to spaces"
  },
  {
    "command": "editor.action.indentationToTabs",
    "to_ebd": "editor action indentation to tabs"
  },
  {
    "command": "editor.action.inlineSuggest.acceptNextWord",
    "to_ebd": "editor action inline suggest accept next word"
  },
  {
    "command": "editor.action.inlineSuggest.trigger",
    "to_ebd": "editor action inline suggest trigger"
  },
  {
    "command": "editor.action.insertSnippet",
    "to_ebd": "editor action insert snippet"
  },
  {
    "command": "editor.action.inspectTMScopes",
    "to_ebd": "editor action inspect tm scopes"
  },
  {
    "command": "editor.action.joinLines",
    "to_ebd": "editor action join lines"
  },
  {
    "command": "editor.action.measureExtHostLatency",
    "to_ebd": "editor action measure ext host latency"
  },
  {
    "command": "editor.action.moveCarretLeftAction",
    "to_ebd": "editor action move carret left action"
  },
  {
    "command": "editor.action.moveCarretRightAction",
    "to_ebd": "editor action move carret right action"
  },
  {
    "command": "editor.action.moveSelectionToPreviousFindMatch",
    "to_ebd": "editor action move selection to previous find match"
  },
  {
    "command": "editor.action.openDeclarationToTheSide",
    "to_ebd": "editor action open declaration to the side"
  },
  {
    "command": "editor.action.openLink",
    "to_ebd": "editor action open link"
  },
  {
    "command": "editor.action.peekDeclaration",
    "to_ebd": "editor action peek declaration"
  },
  {
    "command": "editor.action.peekTypeDefinition",
    "to_ebd": "editor action peek type definition"
  },
  {
    "command": "editor.action.previewDeclaration",
    "to_ebd": "editor action preview declaration"
  },
  {
    "command": "editor.action.refactor.preview",
    "to_ebd": "editor action refactor preview"
  },
  {
    "command": "editor.action.referenceSearch.trigger",
    "to_ebd": "editor action reference search trigger"
  },
  {
    "command": "editor.action.reindentlines",
    "to_ebd": "editor action reindentlines"
  },
  {
    "command": "editor.action.reindentselectedlines",
    "to_ebd": "editor action reindentselectedlines"
  },
  {
    "command": "editor.action.removeDuplicateLines",
    "to_ebd": "editor action remove duplicate lines"
  },
  {
    "command": "editor.action.resetSuggestSize",
    "to_ebd": "editor action reset suggest size"
  },
  {
    "command": "editor.action.revealDeclaration",
    "to_ebd": "editor action reveal declaration"
  },
  {
    "command": "editor.action.selectToBracket",
    "to_ebd": "editor action select to bracket"
  },
  {
    "command": "editor.action.selectionClipboardPaste",
    "to_ebd": "editor action selection clipboard paste"
  },
  {
    "command": "editor.action.showDefinitionPreviewHover",
    "to_ebd": "editor action show definition preview hover"
  },
  {
    "command": "editor.action.showReferences",
    "to_ebd": "editor action show references"
  },
  {
    "command": "editor.action.showSnippets",
    "to_ebd": "editor action show snippets"
  },
  {
    "command": "editor.action.smartSelect.grow",
    "to_ebd": "editor action smart select grow"
  },
  {
    "command": "editor.action.sortLinesAscending",
    "to_ebd": "editor action sort lines ascending"
  },
  {
    "command": "editor.action.sortLinesDescending",
    "to_ebd": "editor action sort lines descending"
  },
  {
    "command": "editor.action.sourceAction",
    "to_ebd": "editor action source action"
  },
  {
    "command": "editor.action.startDebugTextMate",
    "to_ebd": "editor action start debug text mate"
  },
  {
    "command": "editor.action.surroundWithSnippet",
    "to_ebd": "editor action surround with snippet"
  },
  {
    "command": "editor.action.toggleColumnSelection",
    "to_ebd": "editor action toggle column selection"
  },
  {
    "command": "editor.action.toggleMinimap",
    "to_ebd": "editor action toggle minimap"
  },
  {
    "command": "editor.action.toggleRenderControlCharacter",
    "to_ebd": "editor action toggle render control character"
  },
  {
    "command": "editor.action.toggleRenderWhitespace",
    "to_ebd": "editor action toggle render whitespace"
  },
  {
    "command": "editor.action.toggleScreenReaderAccessibilityMode",
    "to_ebd": "editor action toggle screen reader accessibility mode"
  },
  {
    "command": "editor.action.toggleStickyScroll",
    "to_ebd": "editor action toggle sticky scroll"
  },
  {
    "command": "editor.action.transformToKebabcase",
    "to_ebd": "editor action transform to kebabcase"
  },
  {
    "command": "editor.action.transformToLowercase",
    "to_ebd": "editor action transform to lowercase"
  },
  {
    "command": "editor.action.transformToSnakecase",
    "to_ebd": "editor action transform to snakecase"
  },
  {
    "command": "editor.action.transformToTitlecase",
    "to_ebd": "editor action transform to titlecase"
  },
  {
    "command": "editor.action.transformToUppercase",
    "to_ebd": "editor action transform to uppercase"
  },
  {
    "command": "editor.action.transpose",
    "to_ebd": "editor action transpose"
  },
  {
    "command": "editor.action.transposeLetters",
    "to_ebd": "editor action transpose letters"
  },
  {
    "command": "editor.action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters",
    "to_ebd": "editor action unicode highlight disable highlighting of ambiguous characters"
  },
  {
    "command": "editor.action.unicodeHighlight.disableHighlightingOfInvisibleCharacters",
    "to_ebd": "editor action unicode highlight disable highlighting of invisible characters"
  },
  {
    "command": "editor.action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters",
    "to_ebd": "editor action unicode highlight disable highlighting of non basic ascii characters"
  },
  {
    "command": "editor.action.unicodeHighlight.showExcludeOptions",
    "to_ebd": "editor action unicode highlight show exclude options"
  },
  {
    "command": "editor.action.wordHighlight.trigger",
    "to_ebd": "editor action word highlight trigger"
  },
  {
    "command": "editor.actions.findWithArgs",
    "to_ebd": "editor actions find with args"
  },
  {
    "command": "editor.debug.action.addLogPoint",
    "to_ebd": "editor debug action add log point"
  },
  {
    "command": "editor.debug.action.conditionalBreakpoint",
    "to_ebd": "editor debug action conditional breakpoint"
  },
  {
    "command": "editor.debug.action.goToNextBreakpoint",
    "to_ebd": "editor debug action go to next breakpoint"
  },
  {
    "command": "editor.debug.action.goToPreviousBreakpoint",
    "to_ebd": "editor debug action go to previous breakpoint"
  },
  {
    "command": "editor.debug.action.openDisassemblyView",
    "to_ebd": "editor debug action open disassembly view"
  },
  {
    "command": "editor.debug.action.runToCursor",
    "to_ebd": "editor debug action run to cursor"
  },
  {
    "command": "editor.debug.action.selectionToRepl",
    "to_ebd": "editor debug action selection to repl"
  },
  {
    "command": "editor.debug.action.selectionToWatch",
    "to_ebd": "editor debug action selection to watch"
  },
  {
    "command": "editor.debug.action.stepIntoTargets",
    "to_ebd": "editor debug action step into targets"
  },
  {
    "command": "editor.emmet.action.balanceIn",
    "to_ebd": "editor emmet action balance in"
  },
  {
    "command": "editor.emmet.action.balanceOut",
    "to_ebd": "editor emmet action balance out"
  },
  {
    "command": "editor.emmet.action.decrementNumberByOne",
    "to_ebd": "editor emmet action decrement number by one"
  },
  {
    "command": "editor.emmet.action.decrementNumberByOneTenth",
    "to_ebd": "editor emmet action decrement number by one tenth"
  },
  {
    "command": "editor.emmet.action.decrementNumberByTen",
    "to_ebd": "editor emmet action decrement number by ten"
  },
  {
    "command": "editor.emmet.action.evaluateMathExpression",
    "to_ebd": "editor emmet action evaluate math expression"
  },
  {
    "command": "editor.emmet.action.incrementNumberByOne",
    "to_ebd": "editor emmet action increment number by one"
  },
  {
    "command": "editor.emmet.action.incrementNumberByOneTenth",
    "to_ebd": "editor emmet action increment number by one tenth"
  },
  {
    "command": "editor.emmet.action.incrementNumberByTen",
    "to_ebd": "editor emmet action increment number by ten"
  },
  {
    "command": "editor.emmet.action.matchTag",
    "to_ebd": "editor emmet action match tag"
  },
  {
    "command": "editor.emmet.action.mergeLines",
    "to_ebd": "editor emmet action merge lines"
  },
  {
    "command": "editor.emmet.action.nextEditPoint",
    "to_ebd": "editor emmet action next edit point"
  },
  {
    "command": "editor.emmet.action.prevEditPoint",
    "to_ebd": "editor emmet action prev edit point"
  },
  {
    "command": "editor.emmet.action.reflectCSSValue",
    "to_ebd": "editor emmet action reflect css value"
  },
  {
    "command": "editor.emmet.action.removeTag",
    "to_ebd": "editor emmet action remove tag"
  },
  {
    "command": "editor.emmet.action.selectNextItem",
    "to_ebd": "editor emmet action select next item"
  },
  {
    "command": "editor.emmet.action.selectPrevItem",
    "to_ebd": "editor emmet action select prev item"
  },
  {
    "command": "editor.emmet.action.splitJoinTag",
    "to_ebd": "editor emmet action split join tag"
  },
  {
    "command": "editor.emmet.action.toggleComment",
    "to_ebd": "editor emmet action toggle comment"
  },
  {
    "command": "editor.emmet.action.updateImageSize",
    "to_ebd": "editor emmet action update image size"
  },
  {
    "command": "editor.emmet.action.updateTag",
    "to_ebd": "editor emmet action update tag"
  },
  {
    "command": "editor.emmet.action.wrapWithAbbreviation",
    "to_ebd": "editor emmet action wrap with abbreviation"
  },
  {
    "command": "editor.gotoNextFold",
    "to_ebd": "editor goto next fold"
  },
  {
    "command": "editor.gotoParentFold",
    "to_ebd": "editor goto parent fold"
  },
  {
    "command": "editor.gotoPreviousFold",
    "to_ebd": "editor goto previous fold"
  },
  {
    "command": "editor.inlayHints.Reset",
    "to_ebd": "editor inlay hints reset"
  },
  {
    "command": "editor.showTypeHierarchy",
    "to_ebd": "editor show type hierarchy"
  },
  {
    "command": "emmet.expandAbbreviation",
    "to_ebd": "emmet expand abbreviation"
  },
  {
    "command": "explorer.download",
    "to_ebd": "explorer download"
  },
  {
    "command": "explorer.newFile",
    "to_ebd": "explorer new file"
  },
  {
    "command": "explorer.newFolder",
    "to_ebd": "explorer new folder"
  },
  {
    "command": "explorer.openWith",
    "to_ebd": "explorer open with"
  },
  {
    "command": "explorer.upload",
    "to_ebd": "explorer upload"
  },
  {
    "command": "extension.bisect.next",
    "to_ebd": "extension bisect next"
  },
  {
    "command": "extension.bisect.start",
    "to_ebd": "extension bisect start"
  },
  {
    "command": "extension.bisect.stop",
    "to_ebd": "extension bisect stop"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.js",
    "to_ebd": "extension js"
  },
  {
    "command": "extension.jsProfileVisualizer.table.clearCodeLenses",
    "to_ebd": "extension js profile visualizer table clear code lenses"
  },
  {
    "command": "extension.node",
    "to_ebd": "extension node"
  },
  {
    "command": "extension.open",
    "to_ebd": "extension open"
  },
  {
    "command": "extension.pwa",
    "to_ebd": "extension pwa"
  },
  {
    "command": "extensions.actions.searchByCategory.Azure",
    "to_ebd": "extensions actions search by category azure"
  },
  {
    "command": "extensions.actions.searchByCategory.Data",
    "to_ebd": "extensions actions search by category data"
  },
  {
    "command": "extensions.actions.searchByCategory.Debuggers",
    "to_ebd": "extensions actions search by category debuggers"
  },
  {
    "command": "extensions.actions.searchByCategory.Education",
    "to_ebd": "extensions actions search by category education"
  },
  {
    "command": "extensions.actions.searchByCategory.Extension",
    "to_ebd": "extensions actions search by category extension"
  },
  {
    "command": "extensions.actions.searchByCategory.Formatters",
    "to_ebd": "extensions actions search by category formatters"
  },
  {
    "command": "extensions.actions.searchByCategory.Keymaps",
    "to_ebd": "extensions actions search by category keymaps"
  },
  {
    "command": "extensions.actions.searchByCategory.Language",
    "to_ebd": "extensions actions search by category language"
  },
  {
    "command": "extensions.actions.searchByCategory.Linters",
    "to_ebd": "extensions actions search by category linters"
  },
  {
    "command": "extensions.actions.searchByCategory.Machine",
    "to_ebd": "extensions actions search by category machine"
  },
  {
    "command": "extensions.actions.searchByCategory.Notebooks",
    "to_ebd": "extensions actions search by category notebooks"
  },
  {
    "command": "extensions.actions.searchByCategory.Other",
    "to_ebd": "extensions actions search by category other"
  },
  {
    "command": "extensions.actions.searchByCategory.Programming",
    "to_ebd": "extensions actions search by category programming"
  },
  {
    "command": "extensions.actions.searchByCategory.SCM",
    "to_ebd": "extensions actions search by category scm"
  },
  {
    "command": "extensions.actions.searchByCategory.Snippets",
    "to_ebd": "extensions actions search by category snippets"
  },
  {
    "command": "extensions.actions.searchByCategory.Testing",
    "to_ebd": "extensions actions search by category testing"
  },
  {
    "command": "extensions.actions.searchByCategory.Themes",
    "to_ebd": "extensions actions search by category themes"
  },
  {
    "command": "extensions.actions.searchByCategory.Visualization",
    "to_ebd": "extensions actions search by category visualization"
  },
  {
    "command": "extensions.filter.featured",
    "to_ebd": "extensions filter featured"
  },
  {
    "command": "extensions.recommendedList.focus",
    "to_ebd": "extensions recommended list focus"
  },
  {
    "command": "extensions.recommendedList.resetViewLocation",
    "to_ebd": "extensions recommended list reset view location"
  },
  {
    "command": "extensions.sort.installs",
    "to_ebd": "extensions sort installs"
  },
  {
    "command": "extensions.sort.name",
    "to_ebd": "extensions sort name"
  },
  {
    "command": "extensions.sort.publishedDate",
    "to_ebd": "extensions sort published date"
  },
  {
    "command": "extensions.sort.rating",
    "to_ebd": "extensions sort rating"
  },
  {
    "command": "extensions.sort.updateDate",
    "to_ebd": "extensions sort update date"
  },
  {
    "command": "files.openTimeline",
    "to_ebd": "files open timeline"
  },
  {
    "command": "files.participants.resetChoice",
    "to_ebd": "files participants reset choice"
  },
  {
    "command": "filesExplorer.findInWorkspace",
    "to_ebd": "files explorer find in workspace"
  },
  {
    "command": "getContextKeyInfo",
    "to_ebd": "get context key info"
  },
  {
    "command": "git",
    "to_ebd": "git"
  },
  {
    "command": "git._syncAll",
    "to_ebd": "git  sync all"
  },
  {
    "command": "git.acceptMerge",
    "to_ebd": "git accept merge"
  },
  {
    "command": "git.addRemote",
    "to_ebd": "git add remote"
  },
  {
    "command": "git.api.getRemoteSources",
    "to_ebd": "git api get remote sources"
  },
  {
    "command": "git.api.getRepositories",
    "to_ebd": "git api get repositories"
  },
  {
    "command": "git.api.getRepositoryState",
    "to_ebd": "git api get repository state"
  },
  {
    "command": "git.branch",
    "to_ebd": "git branch"
  },
  {
    "command": "git.branchFrom",
    "to_ebd": "git branch from"
  },
  {
    "command": "git.checkout",
    "to_ebd": "git checkout"
  },
  {
    "command": "git.checkoutDetached",
    "to_ebd": "git checkout detached"
  },
  {
    "command": "git.cherryPick",
    "to_ebd": "git cherry pick"
  },
  {
    "command": "git.clean",
    "to_ebd": "git clean"
  },
  {
    "command": "git.cleanAll",
    "to_ebd": "git clean all"
  },
  {
    "command": "git.cleanAllTracked",
    "to_ebd": "git clean all tracked"
  },
  {
    "command": "git.cleanAllUntracked",
    "to_ebd": "git clean all untracked"
  },
  {
    "command": "git.clone",
    "to_ebd": "git clone"
  },
  {
    "command": "git.cloneRecursive",
    "to_ebd": "git clone recursive"
  },
  {
    "command": "git.close",
    "to_ebd": "git close"
  },
  {
    "command": "git.closeAllDiffEditors",
    "to_ebd": "git close all diff editors"
  },
  {
    "command": "git.commit",
    "to_ebd": "git commit"
  },
  {
    "command": "git.commitAll",
    "to_ebd": "git commit all"
  },
  {
    "command": "git.commitAllAmend",
    "to_ebd": "git commit all amend"
  },
  {
    "command": "git.commitAllAmendNoVerify",
    "to_ebd": "git commit all amend no verify"
  },
  {
    "command": "git.commitAllNoVerify",
    "to_ebd": "git commit all no verify"
  },
  {
    "command": "git.commitAllSigned",
    "to_ebd": "git commit all signed"
  },
  {
    "command": "git.commitAllSignedNoVerify",
    "to_ebd": "git commit all signed no verify"
  },
  {
    "command": "git.commitEmpty",
    "to_ebd": "git commit empty"
  },
  {
    "command": "git.commitEmptyNoVerify",
    "to_ebd": "git commit empty no verify"
  },
  {
    "command": "git.commitMessageAccept",
    "to_ebd": "git commit message accept"
  },
  {
    "command": "git.commitMessageDiscard",
    "to_ebd": "git commit message discard"
  },
  {
    "command": "git.commitNoVerify",
    "to_ebd": "git commit no verify"
  },
  {
    "command": "git.commitStaged",
    "to_ebd": "git commit staged"
  },
  {
    "command": "git.commitStagedAmend",
    "to_ebd": "git commit staged amend"
  },
  {
    "command": "git.commitStagedAmendNoVerify",
    "to_ebd": "git commit staged amend no verify"
  },
  {
    "command": "git.commitStagedNoVerify",
    "to_ebd": "git commit staged no verify"
  },
  {
    "command": "git.commitStagedSigned",
    "to_ebd": "git commit staged signed"
  },
  {
    "command": "git.commitStagedSignedNoVerify",
    "to_ebd": "git commit staged signed no verify"
  },
  {
    "command": "git.createTag",
    "to_ebd": "git create tag"
  },
  {
    "command": "git.deleteBranch",
    "to_ebd": "git delete branch"
  },
  {
    "command": "git.deleteTag",
    "to_ebd": "git delete tag"
  },
  {
    "command": "git.fetch",
    "to_ebd": "git fetch"
  },
  {
    "command": "git.fetchAll",
    "to_ebd": "git fetch all"
  },
  {
    "command": "git.fetchPrune",
    "to_ebd": "git fetch prune"
  },
  {
    "command": "git.ignore",
    "to_ebd": "git ignore"
  },
  {
    "command": "git.init",
    "to_ebd": "git init"
  },
  {
    "command": "git.manageUnsafeRepositories",
    "to_ebd": "git manage unsafe repositories"
  },
  {
    "command": "git.merge",
    "to_ebd": "git merge"
  },
  {
    "command": "git.mergeAbort",
    "to_ebd": "git merge abort"
  },
  {
    "command": "git.openAllChanges",
    "to_ebd": "git open all changes"
  },
  {
    "command": "git.openChange",
    "to_ebd": "git open change"
  },
  {
    "command": "git.openFile",
    "to_ebd": "git open file"
  },
  {
    "command": "git.openFile",
    "to_ebd": "git open file"
  },
  {
    "command": "git.openHEADFile",
    "to_ebd": "git open head file"
  },
  {
    "command": "git.openMergeEditor",
    "to_ebd": "git open merge editor"
  },
  {
    "command": "git.openRepository",
    "to_ebd": "git open repository"
  },
  {
    "command": "git.openResource",
    "to_ebd": "git open resource"
  },
  {
    "command": "git.publish",
    "to_ebd": "git publish"
  },
  {
    "command": "git.pull",
    "to_ebd": "git pull"
  },
  {
    "command": "git.pullFrom",
    "to_ebd": "git pull from"
  },
  {
    "command": "git.pullRebase",
    "to_ebd": "git pull rebase"
  },
  {
    "command": "git.push",
    "to_ebd": "git push"
  },
  {
    "command": "git.pushForce",
    "to_ebd": "git push force"
  },
  {
    "command": "git.pushTags",
    "to_ebd": "git push tags"
  },
  {
    "command": "git.pushTo",
    "to_ebd": "git push to"
  },
  {
    "command": "git.pushToForce",
    "to_ebd": "git push to force"
  },
  {
    "command": "git.pushWithTags",
    "to_ebd": "git push with tags"
  },
  {
    "command": "git.pushWithTagsForce",
    "to_ebd": "git push with tags force"
  },
  {
    "command": "git.rebase",
    "to_ebd": "git rebase"
  },
  {
    "command": "git.rebaseAbort",
    "to_ebd": "git rebase abort"
  },
  {
    "command": "git.refresh",
    "to_ebd": "git refresh"
  },
  {
    "command": "git.removeRemote",
    "to_ebd": "git remove remote"
  },
  {
    "command": "git.rename",
    "to_ebd": "git rename"
  },
  {
    "command": "git.renameBranch",
    "to_ebd": "git rename branch"
  },
  {
    "command": "git.restoreCommitTemplate",
    "to_ebd": "git restore commit template"
  },
  {
    "command": "git.revealFileInOS.linux",
    "to_ebd": "git reveal file in os linux"
  },
  {
    "command": "git.revealFileInOS.mac",
    "to_ebd": "git reveal file in os mac"
  },
  {
    "command": "git.revealFileInOS.windows",
    "to_ebd": "git reveal file in os windows"
  },
  {
    "command": "git.revealInExplorer",
    "to_ebd": "git reveal in explorer"
  },
  {
    "command": "git.revertChange",
    "to_ebd": "git revert change"
  },
  {
    "command": "git.runGitMerge",
    "to_ebd": "git run git merge"
  },
  {
    "command": "git.runGitMergeDiff",
    "to_ebd": "git run git merge diff"
  },
  {
    "command": "git.showOutput",
    "to_ebd": "git show output"
  },
  {
    "command": "git.stage",
    "to_ebd": "git stage"
  },
  {
    "command": "git.stageAll",
    "to_ebd": "git stage all"
  },
  {
    "command": "git.stageAllMerge",
    "to_ebd": "git stage all merge"
  },
  {
    "command": "git.stageAllTracked",
    "to_ebd": "git stage all tracked"
  },
  {
    "command": "git.stageAllUntracked",
    "to_ebd": "git stage all untracked"
  },
  {
    "command": "git.stageChange",
    "to_ebd": "git stage change"
  },
  {
    "command": "git.stash",
    "to_ebd": "git stash"
  },
  {
    "command": "git.stashApply",
    "to_ebd": "git stash apply"
  },
  {
    "command": "git.stashApplyLatest",
    "to_ebd": "git stash apply latest"
  },
  {
    "command": "git.stashDrop",
    "to_ebd": "git stash drop"
  },
  {
    "command": "git.stashDropAll",
    "to_ebd": "git stash drop all"
  },
  {
    "command": "git.stashIncludeUntracked",
    "to_ebd": "git stash include untracked"
  },
  {
    "command": "git.stashPop",
    "to_ebd": "git stash pop"
  },
  {
    "command": "git.stashPopLatest",
    "to_ebd": "git stash pop latest"
  },
  {
    "command": "git.sync",
    "to_ebd": "git sync"
  },
  {
    "command": "git.syncRebase",
    "to_ebd": "git sync rebase"
  },
  {
    "command": "git.timeline.compareWithSelected",
    "to_ebd": "git timeline compare with selected"
  },
  {
    "command": "git.timeline.copyCommitId",
    "to_ebd": "git timeline copy commit id"
  },
  {
    "command": "git.timeline.copyCommitMessage",
    "to_ebd": "git timeline copy commit message"
  },
  {
    "command": "git.timeline.openDiff",
    "to_ebd": "git timeline open diff"
  },
  {
    "command": "git.timeline.selectForCompare",
    "to_ebd": "git timeline select for compare"
  },
  {
    "command": "git.undoCommit",
    "to_ebd": "git undo commit"
  },
  {
    "command": "git.unstage",
    "to_ebd": "git unstage"
  },
  {
    "command": "git.unstageAll",
    "to_ebd": "git unstage all"
  },
  {
    "command": "github.copyVscodeDevLink",
    "to_ebd": "github copy vscode dev link"
  },
  {
    "command": "github.copyVscodeDevLinkFile",
    "to_ebd": "github copy vscode dev link file"
  },
  {
    "command": "github.openOnVscodeDev",
    "to_ebd": "github open on vscode dev"
  },
  {
    "command": "github.publish",
    "to_ebd": "github publish"
  },
  {
    "command": "goToNextReferenceFromEmbeddedEditor",
    "to_ebd": "go to next reference from embedded editor"
  },
  {
    "command": "goToPreviousReferenceFromEmbeddedEditor",
    "to_ebd": "go to previous reference from embedded editor"
  },
  {
    "command": "help.tweetFeedback",
    "to_ebd": "help tweet feedback"
  },
  {
    "command": "imagePreview.zoomIn",
    "to_ebd": "image preview zoom in"
  },
  {
    "command": "imagePreview.zoomOut",
    "to_ebd": "image preview zoom out"
  },
  {
    "command": "inlayHints.startReadingLineWithHint",
    "to_ebd": "inlay hints start reading line with hint"
  },
  {
    "command": "interactive.history.focus",
    "to_ebd": "interactive history focus"
  },
  {
    "command": "interactive.input.focus",
    "to_ebd": "interactive input focus"
  },
  {
    "command": "ipynb.cleanInvalidImageAttachment",
    "to_ebd": "ipynb clean invalid image attachment"
  },
  {
    "command": "ipynb.newUntitledIpynb",
    "to_ebd": "ipynb new untitled ipynb"
  },
  {
    "command": "ipynb.openIpynbInNotebookEditor",
    "to_ebd": "ipynb open ipynb in notebook editor"
  },
  {
    "command": "isort.restart",
    "to_ebd": "isort restart"
  },
  {
    "command": "javascript",
    "to_ebd": "javascript"
  },
  {
    "command": "javascript",
    "to_ebd": "javascript"
  },
  {
    "command": "javascript.goToProjectConfig",
    "to_ebd": "javascript go to project config"
  },
  {
    "command": "javascript.reloadProjects",
    "to_ebd": "javascript reload projects"
  },
  {
    "command": "javascript.removeUnusedImports",
    "to_ebd": "javascript remove unused imports"
  },
  {
    "command": "javascript.sortImports",
    "to_ebd": "javascript sort imports"
  },
  {
    "command": "js.projectStatus.command",
    "to_ebd": "js project status command"
  },
  {
    "command": "jsBrowserBreakpoints.focus",
    "to_ebd": "js browser breakpoints focus"
  },
  {
    "command": "jsBrowserBreakpoints.resetViewLocation",
    "to_ebd": "js browser breakpoints reset view location"
  },
  {
    "command": "jsExcludedCallers.focus",
    "to_ebd": "js excluded callers focus"
  },
  {
    "command": "jsExcludedCallers.resetViewLocation",
    "to_ebd": "js excluded callers reset view location"
  },
  {
    "command": "json.clearCache",
    "to_ebd": "json clear cache"
  },
  {
    "command": "jupyter",
    "to_ebd": "jupyter"
  },
  {
    "command": "jupyter",
    "to_ebd": "jupyter"
  },
  {
    "command": "jupyter",
    "to_ebd": "jupyter"
  },
  {
    "command": "jupyter",
    "to_ebd": "jupyter"
  },
  {
    "command": "jupyter",
    "to_ebd": "jupyter"
  },
  {
    "command": "jupyter",
    "to_ebd": "jupyter"
  },
  {
    "command": "jupyter.addcellbelow",
    "to_ebd": "jupyter addcellbelow"
  },
  {
    "command": "jupyter.clearSavedJupyterUris",
    "to_ebd": "jupyter clear saved jupyter uris"
  },
  {
    "command": "jupyter.collapseallcells",
    "to_ebd": "jupyter collapseallcells"
  },
  {
    "command": "jupyter.createnewinteractive",
    "to_ebd": "jupyter createnewinteractive"
  },
  {
    "command": "jupyter.createnewnotebook",
    "to_ebd": "jupyter createnewnotebook"
  },
  {
    "command": "jupyter.debugFileInteractive",
    "to_ebd": "jupyter debug file interactive"
  },
  {
    "command": "jupyter.debugcell",
    "to_ebd": "jupyter debugcell"
  },
  {
    "command": "jupyter.debugcontinue",
    "to_ebd": "jupyter debugcontinue"
  },
  {
    "command": "jupyter.debugcurrentcell.palette",
    "to_ebd": "jupyter debugcurrentcell palette"
  },
  {
    "command": "jupyter.debugstepover",
    "to_ebd": "jupyter debugstepover"
  },
  {
    "command": "jupyter.debugstop",
    "to_ebd": "jupyter debugstop"
  },
  {
    "command": "jupyter.enableDebugLogging",
    "to_ebd": "jupyter enable debug logging"
  },
  {
    "command": "jupyter.enableLoadingWidgetScriptsFromThirdPartySource",
    "to_ebd": "jupyter enable loading widget scripts from third party source"
  },
  {
    "command": "jupyter.expandallcells",
    "to_ebd": "jupyter expandallcells"
  },
  {
    "command": "jupyter.export",
    "to_ebd": "jupyter export"
  },
  {
    "command": "jupyter.exportAsPythonScript",
    "to_ebd": "jupyter export as python script"
  },
  {
    "command": "jupyter.exportToHTML",
    "to_ebd": "jupyter export to html"
  },
  {
    "command": "jupyter.exportToPDF",
    "to_ebd": "jupyter export to pdf"
  },
  {
    "command": "jupyter.exportfileandoutputasnotebook",
    "to_ebd": "jupyter exportfileandoutputasnotebook"
  },
  {
    "command": "jupyter.exportfileasnotebook",
    "to_ebd": "jupyter exportfileasnotebook"
  },
  {
    "command": "jupyter.exportoutputasnotebook",
    "to_ebd": "jupyter exportoutputasnotebook"
  },
  {
    "command": "jupyter.filterKernels",
    "to_ebd": "jupyter filter kernels"
  },
  {
    "command": "jupyter.importnotebook",
    "to_ebd": "jupyter importnotebook"
  },
  {
    "command": "jupyter.importnotebookfile",
    "to_ebd": "jupyter importnotebookfile"
  },
  {
    "command": "jupyter.installPythonExtensionViaKernelPicker",
    "to_ebd": "jupyter install python extension via kernel picker"
  },
  {
    "command": "jupyter.installPythonViaKernelPicker",
    "to_ebd": "jupyter install python via kernel picker"
  },
  {
    "command": "jupyter.interactive.clearAllCells",
    "to_ebd": "jupyter interactive clear all cells"
  },
  {
    "command": "jupyter.interactive.copyCell",
    "to_ebd": "jupyter interactive copy cell"
  },
  {
    "command": "jupyter.interactive.exportas",
    "to_ebd": "jupyter interactive exportas"
  },
  {
    "command": "jupyter.interactive.exportasnotebook",
    "to_ebd": "jupyter interactive exportasnotebook"
  },
  {
    "command": "jupyter.interactive.goToCode",
    "to_ebd": "jupyter interactive go to code"
  },
  {
    "command": "jupyter.interruptkernel",
    "to_ebd": "jupyter interruptkernel"
  },
  {
    "command": "jupyter.latestExtension",
    "to_ebd": "jupyter latest extension"
  },
  {
    "command": "jupyter.notebookeditor.addcellbelow",
    "to_ebd": "jupyter notebookeditor addcellbelow"
  },
  {
    "command": "jupyter.notebookeditor.collapseallcells",
    "to_ebd": "jupyter notebookeditor collapseallcells"
  },
  {
    "command": "jupyter.notebookeditor.expandallcells",
    "to_ebd": "jupyter notebookeditor expandallcells"
  },
  {
    "command": "jupyter.notebookeditor.export",
    "to_ebd": "jupyter notebookeditor export"
  },
  {
    "command": "jupyter.notebookeditor.redocells",
    "to_ebd": "jupyter notebookeditor redocells"
  },
  {
    "command": "jupyter.notebookeditor.removeallcells",
    "to_ebd": "jupyter notebookeditor removeallcells"
  },
  {
    "command": "jupyter.notebookeditor.restartkernel",
    "to_ebd": "jupyter notebookeditor restartkernel"
  },
  {
    "command": "jupyter.notebookeditor.runallcells",
    "to_ebd": "jupyter notebookeditor runallcells"
  },
  {
    "command": "jupyter.notebookeditor.undocells",
    "to_ebd": "jupyter notebookeditor undocells"
  },
  {
    "command": "jupyter.openOutlineView",
    "to_ebd": "jupyter open outline view"
  },
  {
    "command": "jupyter.openVariableView",
    "to_ebd": "jupyter open variable view"
  },
  {
    "command": "jupyter.reloadVSCode",
    "to_ebd": "jupyter reload vs code"
  },
  {
    "command": "jupyter.replayPylanceLog",
    "to_ebd": "jupyter replay pylance log"
  },
  {
    "command": "jupyter.replayPylanceLogStep",
    "to_ebd": "jupyter replay pylance log step"
  },
  {
    "command": "jupyter.resetLoggingLevel",
    "to_ebd": "jupyter reset logging level"
  },
  {
    "command": "jupyter.restartkernel",
    "to_ebd": "jupyter restartkernel"
  },
  {
    "command": "jupyter.runFileInteractive",
    "to_ebd": "jupyter run file interactive"
  },
  {
    "command": "jupyter.runInDedicatedExtensionHost",
    "to_ebd": "jupyter run in dedicated extension host"
  },
  {
    "command": "jupyter.runallcells",
    "to_ebd": "jupyter runallcells"
  },
  {
    "command": "jupyter.runallcellsabove",
    "to_ebd": "jupyter runallcellsabove"
  },
  {
    "command": "jupyter.runallcellsabove.palette",
    "to_ebd": "jupyter runallcellsabove palette"
  },
  {
    "command": "jupyter.runcell",
    "to_ebd": "jupyter runcell"
  },
  {
    "command": "jupyter.runcellandallbelow",
    "to_ebd": "jupyter runcellandallbelow"
  },
  {
    "command": "jupyter.runcurrentcellandallbelow.palette",
    "to_ebd": "jupyter runcurrentcellandallbelow palette"
  },
  {
    "command": "jupyter.runfromline",
    "to_ebd": "jupyter runfromline"
  },
  {
    "command": "jupyter.runtoline",
    "to_ebd": "jupyter runtoline"
  },
  {
    "command": "jupyter.scrolltocell",
    "to_ebd": "jupyter scrolltocell"
  },
  {
    "command": "jupyter.selectJupyterInterpreter",
    "to_ebd": "jupyter select jupyter interpreter"
  },
  {
    "command": "jupyter.selectNativeJupyterUriFromToolBar",
    "to_ebd": "jupyter select native jupyter uri from tool bar"
  },
  {
    "command": "jupyter.selectjupytercommandline",
    "to_ebd": "jupyter selectjupytercommandline"
  },
  {
    "command": "jupyter.selectjupyteruri",
    "to_ebd": "jupyter selectjupyteruri"
  },
  {
    "command": "jupyter.showDataViewer",
    "to_ebd": "jupyter show data viewer"
  },
  {
    "command": "jupyter.switchToRemoteKernels",
    "to_ebd": "jupyter switch to remote kernels"
  },
  {
    "command": "jupyter.viewOutput",
    "to_ebd": "jupyter view output"
  },
  {
    "command": "jupyterViewVariables.focus",
    "to_ebd": "jupyter view variables focus"
  },
  {
    "command": "jupyterViewVariables.resetViewLocation",
    "to_ebd": "jupyter view variables reset view location"
  },
  {
    "command": "keybindings.editor.clearSearchHistory",
    "to_ebd": "keybindings editor clear search history"
  },
  {
    "command": "keybindings.editor.copyCommandKeybindingEntry",
    "to_ebd": "keybindings editor copy command keybinding entry"
  },
  {
    "command": "keybindings.editor.copyCommandTitle",
    "to_ebd": "keybindings editor copy command title"
  },
  {
    "command": "keybindings.editor.resetKeybinding",
    "to_ebd": "keybindings editor reset keybinding"
  },
  {
    "command": "keybindings.editor.showConflicts",
    "to_ebd": "keybindings editor show conflicts"
  },
  {
    "command": "keybindings.editor.showDefaultKeybindings",
    "to_ebd": "keybindings editor show default keybindings"
  },
  {
    "command": "keybindings.editor.showExtensionKeybindings",
    "to_ebd": "keybindings editor show extension keybindings"
  },
  {
    "command": "keybindings.editor.showUserKeybindings",
    "to_ebd": "keybindings editor show user keybindings"
  },
  {
    "command": "lastCursorLineSelect",
    "to_ebd": "last cursor line select"
  },
  {
    "command": "lastCursorLineSelectDrag",
    "to_ebd": "last cursor line select drag"
  },
  {
    "command": "lastCursorWordSelect",
    "to_ebd": "last cursor word select"
  },
  {
    "command": "layoutEditorGroups",
    "to_ebd": "layout editor groups"
  },
  {
    "command": "lineBreakInsert",
    "to_ebd": "line break insert"
  },
  {
    "command": "list.collapseAllToFocus",
    "to_ebd": "list collapse all to focus"
  },
  {
    "command": "list.focusParent",
    "to_ebd": "list focus parent"
  },
  {
    "command": "list.scrollLeft",
    "to_ebd": "list scroll left"
  },
  {
    "command": "list.scrollRight",
    "to_ebd": "list scroll right"
  },
  {
    "command": "list.selectAndPreserveFocus",
    "to_ebd": "list select and preserve focus"
  },
  {
    "command": "list.toggleFilterOnType",
    "to_ebd": "list toggle filter on type"
  },
  {
    "command": "list.toggleFindMode",
    "to_ebd": "list toggle find mode"
  },
  {
    "command": "list.toggleKeyboardNavigation",
    "to_ebd": "list toggle keyboard navigation"
  },
  {
    "command": "list.triggerTypeNavigation",
    "to_ebd": "list trigger type navigation"
  },
  {
    "command": "markdown.api.reloadPlugins",
    "to_ebd": "markdown api reload plugins"
  },
  {
    "command": "markdown.api.render",
    "to_ebd": "markdown api render"
  },
  {
    "command": "markdown.editor.insertImageFromWorkspace",
    "to_ebd": "markdown editor insert image from workspace"
  },
  {
    "command": "markdown.editor.insertLinkFromWorkspace",
    "to_ebd": "markdown editor insert link from workspace"
  },
  {
    "command": "markdown.findAllFileReferences",
    "to_ebd": "markdown find all file references"
  },
  {
    "command": "markdown.preview.refresh",
    "to_ebd": "markdown preview refresh"
  },
  {
    "command": "markdown.preview.toggleLock",
    "to_ebd": "markdown preview toggle lock"
  },
  {
    "command": "markdown.showLockedPreviewToSide",
    "to_ebd": "markdown show locked preview to side"
  },
  {
    "command": "markdown.showPreviewSecuritySelector",
    "to_ebd": "markdown show preview security selector"
  },
  {
    "command": "markdown.showSource",
    "to_ebd": "markdown show source"
  },
  {
    "command": "menu.resetHiddenStates",
    "to_ebd": "menu reset hidden states"
  },
  {
    "command": "merge",
    "to_ebd": "merge"
  },
  {
    "command": "merge",
    "to_ebd": "merge"
  },
  {
    "command": "merge",
    "to_ebd": "merge"
  },
  {
    "command": "merge",
    "to_ebd": "merge"
  },
  {
    "command": "merge",
    "to_ebd": "merge"
  },
  {
    "command": "merge",
    "to_ebd": "merge"
  },
  {
    "command": "merge",
    "to_ebd": "merge"
  },
  {
    "command": "merge",
    "to_ebd": "merge"
  },
  {
    "command": "merge",
    "to_ebd": "merge"
  },
  {
    "command": "merge",
    "to_ebd": "merge"
  },
  {
    "command": "merge.acceptAllInput",
    "to_ebd": "merge accept all input"
  },
  {
    "command": "merge.acceptAllInput",
    "to_ebd": "merge accept all input"
  },
  {
    "command": "merge.columnLayout",
    "to_ebd": "merge column layout"
  },
  {
    "command": "merge.dev.copyContentsJson",
    "to_ebd": "merge dev copy contents json"
  },
  {
    "command": "merge.dev.loadContentsFromFolder",
    "to_ebd": "merge dev load contents from folder"
  },
  {
    "command": "merge.dev.openContentsJson",
    "to_ebd": "merge dev open contents json"
  },
  {
    "command": "merge.dev.openSelectionInTemporaryMergeEditor",
    "to_ebd": "merge dev open selection in temporary merge editor"
  },
  {
    "command": "merge.dev.saveContentsToFolder",
    "to_ebd": "merge dev save contents to folder"
  },
  {
    "command": "merge.goToNextUnhandledConflict",
    "to_ebd": "merge go to next unhandled conflict"
  },
  {
    "command": "merge.goToPreviousUnhandledConflict",
    "to_ebd": "merge go to previous unhandled conflict"
  },
  {
    "command": "merge.mixedLayout",
    "to_ebd": "merge mixed layout"
  },
  {
    "command": "merge.openBaseEditor",
    "to_ebd": "merge open base editor"
  },
  {
    "command": "merge.openResult",
    "to_ebd": "merge open result"
  },
  {
    "command": "merge.showBase",
    "to_ebd": "merge show base"
  },
  {
    "command": "merge.showBaseCenter",
    "to_ebd": "merge show base center"
  },
  {
    "command": "merge.showBaseTop",
    "to_ebd": "merge show base top"
  },
  {
    "command": "merge.showNonConflictingChanges",
    "to_ebd": "merge show non conflicting changes"
  },
  {
    "command": "merge.toggleActiveConflictInput",
    "to_ebd": "merge toggle active conflict input"
  },
  {
    "command": "merge.toggleActiveConflictInput",
    "to_ebd": "merge toggle active conflict input"
  },
  {
    "command": "mergeEditor.acceptMerge",
    "to_ebd": "merge editor accept merge"
  },
  {
    "command": "mergeEditor.compareInput",
    "to_ebd": "merge editor compare input"
  },
  {
    "command": "mergeEditor.compareInput",
    "to_ebd": "merge editor compare input"
  },
  {
    "command": "mergeEditor.resetCloseWithConflictsChoice",
    "to_ebd": "merge editor reset close with conflicts choice"
  },
  {
    "command": "mergeEditor.resetResultToBaseAndAutoMerge",
    "to_ebd": "merge editor reset result to base and auto merge"
  },
  {
    "command": "noop",
    "to_ebd": "noop"
  },
  {
    "command": "notebook.cancelExecution",
    "to_ebd": "notebook cancel execution"
  },
  {
    "command": "notebook.cell.cancelExecution",
    "to_ebd": "notebook cell cancel execution"
  },
  {
    "command": "notebook.cell.changeLanguage",
    "to_ebd": "notebook cell change language"
  },
  {
    "command": "notebook.cell.collapseAllCellInputs",
    "to_ebd": "notebook cell collapse all cell inputs"
  },
  {
    "command": "notebook.cell.collapseAllCellOutputs",
    "to_ebd": "notebook cell collapse all cell outputs"
  },
  {
    "command": "notebook.cell.executeCellAndBelow",
    "to_ebd": "notebook cell execute cell and below"
  },
  {
    "command": "notebook.cell.executeCellsAbove",
    "to_ebd": "notebook cell execute cells above"
  },
  {
    "command": "notebook.cell.expandAllCellInputs",
    "to_ebd": "notebook cell expand all cell inputs"
  },
  {
    "command": "notebook.cell.expandAllCellOutputs",
    "to_ebd": "notebook cell expand all cell outputs"
  },
  {
    "command": "notebook.cell.insertCodeCellAtTop",
    "to_ebd": "notebook cell insert code cell at top"
  },
  {
    "command": "notebook.cell.insertMarkdownCellAbove",
    "to_ebd": "notebook cell insert markdown cell above"
  },
  {
    "command": "notebook.cell.insertMarkdownCellAtTop",
    "to_ebd": "notebook cell insert markdown cell at top"
  },
  {
    "command": "notebook.cell.insertMarkdownCellBelow",
    "to_ebd": "notebook cell insert markdown cell below"
  },
  {
    "command": "notebook.clearAllCellsOutputs",
    "to_ebd": "notebook clear all cells outputs"
  },
  {
    "command": "notebook.clearNotebookEdtitorTypeCache",
    "to_ebd": "notebook clear notebook edtitor type cache"
  },
  {
    "command": "notebook.clearNotebookKernelsMRUCache",
    "to_ebd": "notebook clear notebook kernels mru cache"
  },
  {
    "command": "notebook.diff.cell.revertInput",
    "to_ebd": "notebook diff cell revert input"
  },
  {
    "command": "notebook.diff.cell.revertMetadata",
    "to_ebd": "notebook diff cell revert metadata"
  },
  {
    "command": "notebook.diff.cell.revertOutputs",
    "to_ebd": "notebook diff cell revert outputs"
  },
  {
    "command": "notebook.diff.cell.switchOutputRenderingStyleToText",
    "to_ebd": "notebook diff cell switch output rendering style to text"
  },
  {
    "command": "notebook.diff.showMetadata",
    "to_ebd": "notebook diff show metadata"
  },
  {
    "command": "notebook.diff.showOutputs",
    "to_ebd": "notebook diff show outputs"
  },
  {
    "command": "notebook.diff.switchToText",
    "to_ebd": "notebook diff switch to text"
  },
  {
    "command": "notebook.execute",
    "to_ebd": "notebook execute"
  },
  {
    "command": "notebook.inspectLayout",
    "to_ebd": "notebook inspect layout"
  },
  {
    "command": "notebook.interruptExecution",
    "to_ebd": "notebook interrupt execution"
  },
  {
    "command": "notebook.renderAllMarkdownCells",
    "to_ebd": "notebook render all markdown cells"
  },
  {
    "command": "notebook.revealLastFailedCell",
    "to_ebd": "notebook reveal last failed cell"
  },
  {
    "command": "notebook.revealRunningCell",
    "to_ebd": "notebook reveal running cell"
  },
  {
    "command": "notebook.saveMimeTypeOrder",
    "to_ebd": "notebook save mime type order"
  },
  {
    "command": "notebook.setProfile",
    "to_ebd": "notebook set profile"
  },
  {
    "command": "notebook.toggleCellToolbarPosition",
    "to_ebd": "notebook toggle cell toolbar position"
  },
  {
    "command": "notebook.toggleCellToolbarPositionFromEditorTitle",
    "to_ebd": "notebook toggle cell toolbar position from editor title"
  },
  {
    "command": "notebook.toggleLayoutTroubleshoot",
    "to_ebd": "notebook toggle layout troubleshoot"
  },
  {
    "command": "notebook.toggleLineNumbersFromEditorTitle",
    "to_ebd": "notebook toggle line numbers from editor title"
  },
  {
    "command": "notifications.clearAll",
    "to_ebd": "notifications clear all"
  },
  {
    "command": "notifications.focusToasts",
    "to_ebd": "notifications focus toasts"
  },
  {
    "command": "notifications.showList",
    "to_ebd": "notifications show list"
  },
  {
    "command": "notifications.toggleDoNotDisturbMode",
    "to_ebd": "notifications toggle do not disturb mode"
  },
  {
    "command": "notifications.toggleList",
    "to_ebd": "notifications toggle list"
  },
  {
    "command": "npm.debugScript",
    "to_ebd": "npm debug script"
  },
  {
    "command": "npm.debugScriptFromHover",
    "to_ebd": "npm debug script from hover"
  },
  {
    "command": "npm.focus",
    "to_ebd": "npm focus"
  },
  {
    "command": "npm.openScript",
    "to_ebd": "npm open script"
  },
  {
    "command": "npm.packageManager",
    "to_ebd": "npm package manager"
  },
  {
    "command": "npm.refresh",
    "to_ebd": "npm refresh"
  },
  {
    "command": "npm.removeView",
    "to_ebd": "npm remove view"
  },
  {
    "command": "npm.resetViewLocation",
    "to_ebd": "npm reset view location"
  },
  {
    "command": "npm.runInstall",
    "to_ebd": "npm run install"
  },
  {
    "command": "npm.runScript",
    "to_ebd": "npm run script"
  },
  {
    "command": "npm.runScriptFromFolder",
    "to_ebd": "npm run script from folder"
  },
  {
    "command": "npm.runScriptFromHover",
    "to_ebd": "npm run script from hover"
  },
  {
    "command": "npm.runSelectedScript",
    "to_ebd": "npm run selected script"
  },
  {
    "command": "npm.toggleVisibility",
    "to_ebd": "npm toggle visibility"
  },
  {
    "command": "openEditors.closeAll",
    "to_ebd": "open editors close all"
  },
  {
    "command": "openEditors.newUntitledFile",
    "to_ebd": "open editors new untitled file"
  },
  {
    "command": "openInTerminal",
    "to_ebd": "open in terminal"
  },
  {
    "command": "openReference",
    "to_ebd": "open reference"
  },
  {
    "command": "opensshremotes.addNewSshHost",
    "to_ebd": "opensshremotes add new ssh host"
  },
  {
    "command": "opensshremotes.cleanCurrentRemoteServer",
    "to_ebd": "opensshremotes clean current remote server"
  },
  {
    "command": "opensshremotes.cleanDevBox",
    "to_ebd": "opensshremotes clean dev box"
  },
  {
    "command": "opensshremotes.cleanLocalServer",
    "to_ebd": "opensshremotes clean local server"
  },
  {
    "command": "opensshremotes.cleanRemoteServer",
    "to_ebd": "opensshremotes clean remote server"
  },
  {
    "command": "opensshremotes.getHelp",
    "to_ebd": "opensshremotes get help"
  },
  {
    "command": "opensshremotes.getStarted",
    "to_ebd": "opensshremotes get started"
  },
  {
    "command": "opensshremotes.openConfigFile",
    "to_ebd": "opensshremotes open config file"
  },
  {
    "command": "opensshremotes.openEmptyWindow",
    "to_ebd": "opensshremotes open empty window"
  },
  {
    "command": "opensshremotes.openEmptyWindowInCurrentWindow",
    "to_ebd": "opensshremotes open empty window in current window"
  },
  {
    "command": "opensshremotes.openEmptyWindowOnCurrentHost",
    "to_ebd": "opensshremotes open empty window on current host"
  },
  {
    "command": "opensshremotes.openWebUI",
    "to_ebd": "opensshremotes open web ui"
  },
  {
    "command": "opensshremotes.provideFeedback",
    "to_ebd": "opensshremotes provide feedback"
  },
  {
    "command": "opensshremotes.reportIssue",
    "to_ebd": "opensshremotes report issue"
  },
  {
    "command": "opensshremotes.settings",
    "to_ebd": "opensshremotes settings"
  },
  {
    "command": "opensshremotes.showLog",
    "to_ebd": "opensshremotes show log"
  },
  {
    "command": "outline.collapse",
    "to_ebd": "outline collapse"
  },
  {
    "command": "outline.expand",
    "to_ebd": "outline expand"
  },
  {
    "command": "outline.filterOnType",
    "to_ebd": "outline filter on type"
  },
  {
    "command": "outline.focus",
    "to_ebd": "outline focus"
  },
  {
    "command": "outline.followCursor",
    "to_ebd": "outline follow cursor"
  },
  {
    "command": "outline.removeView",
    "to_ebd": "outline remove view"
  },
  {
    "command": "outline.resetViewLocation",
    "to_ebd": "outline reset view location"
  },
  {
    "command": "outline.sortByKind",
    "to_ebd": "outline sort by kind"
  },
  {
    "command": "outline.sortByName",
    "to_ebd": "outline sort by name"
  },
  {
    "command": "outline.sortByPosition",
    "to_ebd": "outline sort by position"
  },
  {
    "command": "outline.toggleVisibility",
    "to_ebd": "outline toggle visibility"
  },
  {
    "command": "paste",
    "to_ebd": "paste"
  },
  {
    "command": "perf.event.profiling",
    "to_ebd": "perf event profiling"
  },
  {
    "command": "perf.insta.printAsyncCycles",
    "to_ebd": "perf insta print async cycles"
  },
  {
    "command": "perf.insta.printTraces",
    "to_ebd": "perf insta print traces"
  },
  {
    "command": "perfview.show",
    "to_ebd": "perfview show"
  },
  {
    "command": "problems.action.copyMessage",
    "to_ebd": "problems action copy message"
  },
  {
    "command": "problems.action.copyRelatedInformationMessage",
    "to_ebd": "problems action copy related information message"
  },
  {
    "command": "problems.action.showMultilineMessage",
    "to_ebd": "problems action show multiline message"
  },
  {
    "command": "problems.action.showSinglelineMessage",
    "to_ebd": "problems action show singleline message"
  },
  {
    "command": "pylance.addToExtraPaths",
    "to_ebd": "pylance add to extra paths"
  },
  {
    "command": "pylance.completionAccepted",
    "to_ebd": "pylance completion accepted"
  },
  {
    "command": "pylance.convertImportFormat",
    "to_ebd": "pylance convert import format"
  },
  {
    "command": "pylance.dumpCachedTypes",
    "to_ebd": "pylance dump cached types"
  },
  {
    "command": "pylance.dumpCodeFlowGraph",
    "to_ebd": "pylance dump code flow graph"
  },
  {
    "command": "pylance.dumpNodes",
    "to_ebd": "pylance dump nodes"
  },
  {
    "command": "pylance.dumpTokens",
    "to_ebd": "pylance dump tokens"
  },
  {
    "command": "pylance.dumpTypes",
    "to_ebd": "pylance dump types"
  },
  {
    "command": "pylance.executedClientCommand",
    "to_ebd": "pylance executed client command"
  },
  {
    "command": "pylance.extractMethod",
    "to_ebd": "pylance extract method"
  },
  {
    "command": "pylance.extractMethodWithRename",
    "to_ebd": "pylance extract method with rename"
  },
  {
    "command": "pylance.extractVariable",
    "to_ebd": "pylance extract variable"
  },
  {
    "command": "pylance.extractVariableWithRename",
    "to_ebd": "pylance extract variable with rename"
  },
  {
    "command": "pylance.fixAll",
    "to_ebd": "pylance fix all"
  },
  {
    "command": "pylance.reportIssue",
    "to_ebd": "pylance report issue"
  },
  {
    "command": "pylance.runCommands",
    "to_ebd": "pylance run commands"
  },
  {
    "command": "pylance.setTypeChecking",
    "to_ebd": "pylance set type checking"
  },
  {
    "command": "pylance.triggerParameterHints",
    "to_ebd": "pylance trigger parameter hints"
  },
  {
    "command": "pyright.addoptionalforparam",
    "to_ebd": "pyright addoptionalforparam"
  },
  {
    "command": "pyright.createtypestub",
    "to_ebd": "pyright createtypestub"
  },
  {
    "command": "pyright.dumpFileDebugInfo",
    "to_ebd": "pyright dump file debug info"
  },
  {
    "command": "pyright.organizeimports",
    "to_ebd": "pyright organizeimports"
  },
  {
    "command": "python.SelectAndInsertDebugConfiguration",
    "to_ebd": "python select and insert debug configuration"
  },
  {
    "command": "python._loadLanguageServerExtension",
    "to_ebd": "python  load language server extension"
  },
  {
    "command": "python.addImport",
    "to_ebd": "python add import"
  },
  {
    "command": "python.addOptionalForParam",
    "to_ebd": "python add optional for param"
  },
  {
    "command": "python.analysis.restartLanguageServer",
    "to_ebd": "python analysis restart language server"
  },
  {
    "command": "python.clearCacheAndReload",
    "to_ebd": "python clear cache and reload"
  },
  {
    "command": "python.clearWorkspaceInterpreter",
    "to_ebd": "python clear workspace interpreter"
  },
  {
    "command": "python.configureTests",
    "to_ebd": "python configure tests"
  },
  {
    "command": "python.createEnvironment",
    "to_ebd": "python create environment"
  },
  {
    "command": "python.createNewFile",
    "to_ebd": "python create new file"
  },
  {
    "command": "python.createTerminal",
    "to_ebd": "python create terminal"
  },
  {
    "command": "python.createTypeStub",
    "to_ebd": "python create type stub"
  },
  {
    "command": "python.debugInTerminal",
    "to_ebd": "python debug in terminal"
  },
  {
    "command": "python.enableLinting",
    "to_ebd": "python enable linting"
  },
  {
    "command": "python.enableSourceMapSupport",
    "to_ebd": "python enable source map support"
  },
  {
    "command": "python.execInTerminal",
    "to_ebd": "python exec in terminal"
  },
  {
    "command": "python.execInTerminal",
    "to_ebd": "python exec in terminal"
  },
  {
    "command": "python.execSelectionInDjangoShell",
    "to_ebd": "python exec selection in django shell"
  },
  {
    "command": "python.installPython",
    "to_ebd": "python install python"
  },
  {
    "command": "python.installPythonOnLinux",
    "to_ebd": "python install python on linux"
  },
  {
    "command": "python.installPythonOnMac",
    "to_ebd": "python install python on mac"
  },
  {
    "command": "python.intellicode.completionItemSelected",
    "to_ebd": "python intellicode completion item selected"
  },
  {
    "command": "python.intellicode.loadLanguageServerExtension",
    "to_ebd": "python intellicode load language server extension"
  },
  {
    "command": "python.interpreterPath",
    "to_ebd": "python interpreter path"
  },
  {
    "command": "python.launchTensorBoard",
    "to_ebd": "python launch tensor board"
  },
  {
    "command": "python.orderImports",
    "to_ebd": "python order imports"
  },
  {
    "command": "python.pickLocalProcess",
    "to_ebd": "python pick local process"
  },
  {
    "command": "python.reloadVSCode",
    "to_ebd": "python reload vs code"
  },
  {
    "command": "python.removeUnusedImport",
    "to_ebd": "python remove unused import"
  },
  {
    "command": "python.reportIssue",
    "to_ebd": "python report issue"
  },
  {
    "command": "python.runLinting",
    "to_ebd": "python run linting"
  },
  {
    "command": "python.setInterpreter",
    "to_ebd": "python set interpreter"
  },
  {
    "command": "python.setLinter",
    "to_ebd": "python set linter"
  },
  {
    "command": "python.sortImports",
    "to_ebd": "python sort imports"
  },
  {
    "command": "python.startREPL",
    "to_ebd": "python start repl"
  },
  {
    "command": "python.triggerEnvSelection",
    "to_ebd": "python trigger env selection"
  },
  {
    "command": "python.viewLanguageServerOutput",
    "to_ebd": "python view language server output"
  },
  {
    "command": "python.viewOutput",
    "to_ebd": "python view output"
  },
  {
    "command": "refactorPreview",
    "to_ebd": "refactor preview"
  },
  {
    "command": "refactorPreview.discard",
    "to_ebd": "refactor preview discard"
  },
  {
    "command": "refactorPreview.focus",
    "to_ebd": "refactor preview focus"
  },
  {
    "command": "refactorPreview.groupByFile",
    "to_ebd": "refactor preview group by file"
  },
  {
    "command": "refactorPreview.groupByType",
    "to_ebd": "refactor preview group by type"
  },
  {
    "command": "refactorPreview.resetViewContainerLocation",
    "to_ebd": "refactor preview reset view container location"
  },
  {
    "command": "refactorPreview.resetViewLocation",
    "to_ebd": "refactor preview reset view location"
  },
  {
    "command": "refactorPreview.toggleGrouping",
    "to_ebd": "refactor preview toggle grouping"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "references",
    "to_ebd": "references"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote",
    "to_ebd": "remote"
  },
  {
    "command": "remote.explorer.switch",
    "to_ebd": "remote explorer switch"
  },
  {
    "command": "remote.tunnel.changeLocalPort",
    "to_ebd": "remote tunnel change local port"
  },
  {
    "command": "remote.tunnel.closeCommandPalette",
    "to_ebd": "remote tunnel close command palette"
  },
  {
    "command": "remote.tunnel.copyAddressCommandPalette",
    "to_ebd": "remote tunnel copy address command palette"
  },
  {
    "command": "remote.tunnel.forwardCommandPalette",
    "to_ebd": "remote tunnel forward command palette"
  },
  {
    "command": "remote.tunnel.forwardInline",
    "to_ebd": "remote tunnel forward inline"
  },
  {
    "command": "remote.tunnel.open",
    "to_ebd": "remote tunnel open"
  },
  {
    "command": "remote.tunnel.openCommandPalette",
    "to_ebd": "remote tunnel open command palette"
  },
  {
    "command": "remote.tunnel.openPreview",
    "to_ebd": "remote tunnel open preview"
  },
  {
    "command": "remote.tunnel.setProtocolHttp",
    "to_ebd": "remote tunnel set protocol http"
  },
  {
    "command": "remote.tunnel.setProtocolHttps",
    "to_ebd": "remote tunnel set protocol https"
  },
  {
    "command": "remoteTargets.focus",
    "to_ebd": "remote targets focus"
  },
  {
    "command": "remoteTargets.resetViewLocation",
    "to_ebd": "remote targets reset view location"
  },
  {
    "command": "removeRootFolder",
    "to_ebd": "remove root folder"
  },
  {
    "command": "repl.action.copyAll",
    "to_ebd": "repl action copy all"
  },
  {
    "command": "replacePreviousChar",
    "to_ebd": "replace previous char"
  },
  {
    "command": "resetGettingStartedProgress",
    "to_ebd": "reset getting started progress"
  },
  {
    "command": "revealInExplorer",
    "to_ebd": "reveal in explorer"
  },
  {
    "command": "saveAll",
    "to_ebd": "save all"
  },
  {
    "command": "scm.openInTerminal",
    "to_ebd": "scm open in terminal"
  },
  {
    "command": "scrollEditorBottom",
    "to_ebd": "scroll editor bottom"
  },
  {
    "command": "scrollEditorTop",
    "to_ebd": "scroll editor top"
  },
  {
    "command": "scrollLeft",
    "to_ebd": "scroll left"
  },
  {
    "command": "scrollRight",
    "to_ebd": "scroll right"
  },
  {
    "command": "search.action.clearHistory",
    "to_ebd": "search action clear history"
  },
  {
    "command": "search.action.clearSearchResults",
    "to_ebd": "search action clear search results"
  },
  {
    "command": "search.action.collapseSearchResults",
    "to_ebd": "search action collapse search results"
  },
  {
    "command": "search.action.copyAll",
    "to_ebd": "search action copy all"
  },
  {
    "command": "search.action.excludeFromSearch",
    "to_ebd": "search action exclude from search"
  },
  {
    "command": "search.action.expandSearchResults",
    "to_ebd": "search action expand search results"
  },
  {
    "command": "search.action.focusFilesToExclude",
    "to_ebd": "search action focus files to exclude"
  },
  {
    "command": "search.action.focusFilesToInclude",
    "to_ebd": "search action focus files to include"
  },
  {
    "command": "search.action.focusSearchList",
    "to_ebd": "search action focus search list"
  },
  {
    "command": "search.action.openEditor",
    "to_ebd": "search action open editor"
  },
  {
    "command": "search.action.openNewEditor",
    "to_ebd": "search action open new editor"
  },
  {
    "command": "search.action.openNewEditorFromView",
    "to_ebd": "search action open new editor from view"
  },
  {
    "command": "search.action.openNewEditorToSide",
    "to_ebd": "search action open new editor to side"
  },
  {
    "command": "search.action.refreshSearchResults",
    "to_ebd": "search action refresh search results"
  },
  {
    "command": "search.action.revealInSideBar",
    "to_ebd": "search action reveal in side bar"
  },
  {
    "command": "search.action.viewAsList",
    "to_ebd": "search action view as list"
  },
  {
    "command": "search.action.viewAsTree",
    "to_ebd": "search action view as tree"
  },
  {
    "command": "selectFirstSuggestion",
    "to_ebd": "select first suggestion"
  },
  {
    "command": "selectForCompare",
    "to_ebd": "select for compare"
  },
  {
    "command": "selectLastSuggestion",
    "to_ebd": "select last suggestion"
  },
  {
    "command": "setContext",
    "to_ebd": "set context"
  },
  {
    "command": "setRootFolder",
    "to_ebd": "set root folder"
  },
  {
    "command": "setSelection",
    "to_ebd": "set selection"
  },
  {
    "command": "settings.filterByOnline",
    "to_ebd": "settings filter by online"
  },
  {
    "command": "settings.filterByTelemetry",
    "to_ebd": "settings filter by telemetry"
  },
  {
    "command": "settings.filterUntrusted",
    "to_ebd": "settings filter untrusted"
  },
  {
    "command": "settings.switchToJSON",
    "to_ebd": "settings switch to json"
  },
  {
    "command": "showEditorScreenReaderNotification",
    "to_ebd": "show editor screen reader notification"
  },
  {
    "command": "simpleBrowser.show",
    "to_ebd": "simple browser show"
  },
  {
    "command": "targetsContainers.focus",
    "to_ebd": "targets containers focus"
  },
  {
    "command": "targetsContainers.resetViewLocation",
    "to_ebd": "targets containers reset view location"
  },
  {
    "command": "terminal.focus",
    "to_ebd": "terminal focus"
  },
  {
    "command": "terminal.removeView",
    "to_ebd": "terminal remove view"
  },
  {
    "command": "terminal.resetViewContainerLocation",
    "to_ebd": "terminal reset view container location"
  },
  {
    "command": "terminal.resetViewLocation",
    "to_ebd": "terminal reset view location"
  },
  {
    "command": "terminal.toggleVisibility",
    "to_ebd": "terminal toggle visibility"
  },
  {
    "command": "testing.cancelTestRefresh",
    "to_ebd": "testing cancel test refresh"
  },
  {
    "command": "testing.clearTestResults",
    "to_ebd": "testing clear test results"
  },
  {
    "command": "testing.collapseAll",
    "to_ebd": "testing collapse all"
  },
  {
    "command": "testing.configureProfile",
    "to_ebd": "testing configure profile"
  },
  {
    "command": "testing.debug",
    "to_ebd": "testing debug"
  },
  {
    "command": "testing.debugSelected",
    "to_ebd": "testing debug selected"
  },
  {
    "command": "testing.hideTest",
    "to_ebd": "testing hide test"
  },
  {
    "command": "testing.openMessageInEditor",
    "to_ebd": "testing open message in editor"
  },
  {
    "command": "testing.run",
    "to_ebd": "testing run"
  },
  {
    "command": "testing.runSelected",
    "to_ebd": "testing run selected"
  },
  {
    "command": "testing.runUsing",
    "to_ebd": "testing run using"
  },
  {
    "command": "testing.searchForTestExtension",
    "to_ebd": "testing search for test extension"
  },
  {
    "command": "testing.selectDefaultTestProfiles",
    "to_ebd": "testing select default test profiles"
  },
  {
    "command": "testing.sortByDuration",
    "to_ebd": "testing sort by duration"
  },
  {
    "command": "testing.sortByLocation",
    "to_ebd": "testing sort by location"
  },
  {
    "command": "testing.sortByStatus",
    "to_ebd": "testing sort by status"
  },
  {
    "command": "testing.unhideAllTests",
    "to_ebd": "testing unhide all tests"
  },
  {
    "command": "testing.unhideTest",
    "to_ebd": "testing unhide test"
  },
  {
    "command": "testing.viewAsList",
    "to_ebd": "testing view as list"
  },
  {
    "command": "testing.viewAsTree",
    "to_ebd": "testing view as tree"
  },
  {
    "command": "timeline.focus",
    "to_ebd": "timeline focus"
  },
  {
    "command": "timeline.refresh",
    "to_ebd": "timeline refresh"
  },
  {
    "command": "timeline.removeView",
    "to_ebd": "timeline remove view"
  },
  {
    "command": "timeline.resetViewLocation",
    "to_ebd": "timeline reset view location"
  },
  {
    "command": "timeline.toggleExcludeSource",
    "to_ebd": "timeline toggle exclude source"
  },
  {
    "command": "timeline.toggleExcludeSource",
    "to_ebd": "timeline toggle exclude source"
  },
  {
    "command": "timeline.toggleFollowActiveEditor",
    "to_ebd": "timeline toggle follow active editor"
  },
  {
    "command": "timeline.toggleVisibility",
    "to_ebd": "timeline toggle visibility"
  },
  {
    "command": "toggle.diff.ignoreTrimWhitespace",
    "to_ebd": "toggle diff ignore trim whitespace"
  },
  {
    "command": "toggle.diff.renderSideBySide",
    "to_ebd": "toggle diff render side by side"
  },
  {
    "command": "toggle.window.commandCenter",
    "to_ebd": "toggle window command center"
  },
  {
    "command": "toggle.workbench.layoutControl.enabled",
    "to_ebd": "toggle workbench layout control enabled"
  },
  {
    "command": "toggleEscapeSequenceLogging",
    "to_ebd": "toggle escape sequence logging"
  },
  {
    "command": "typescript.findAllFileReferences",
    "to_ebd": "typescript find all file references"
  },
  {
    "command": "typescript.goToProjectConfig",
    "to_ebd": "typescript go to project config"
  },
  {
    "command": "typescript.goToSourceDefinition",
    "to_ebd": "typescript go to source definition"
  },
  {
    "command": "typescript.openTsServerLog",
    "to_ebd": "typescript open ts server log"
  },
  {
    "command": "typescript.organizeImports",
    "to_ebd": "typescript organize imports"
  },
  {
    "command": "typescript.reloadProjects",
    "to_ebd": "typescript reload projects"
  },
  {
    "command": "typescript.removeUnusedImports",
    "to_ebd": "typescript remove unused imports"
  },
  {
    "command": "typescript.restartTsServer",
    "to_ebd": "typescript restart ts server"
  },
  {
    "command": "typescript.selectTypeScriptVersion",
    "to_ebd": "typescript select type script version"
  },
  {
    "command": "typescript.sortImports",
    "to_ebd": "typescript sort imports"
  },
  {
    "command": "typescript.tsserverRequest",
    "to_ebd": "typescript tsserver request"
  },
  {
    "command": "update.check",
    "to_ebd": "update check"
  },
  {
    "command": "update.checkForUpdate",
    "to_ebd": "update check for update"
  },
  {
    "command": "update.checking",
    "to_ebd": "update checking"
  },
  {
    "command": "update.downloadNow",
    "to_ebd": "update download now"
  },
  {
    "command": "update.downloadUpdate",
    "to_ebd": "update download update"
  },
  {
    "command": "update.downloading",
    "to_ebd": "update downloading"
  },
  {
    "command": "update.install",
    "to_ebd": "update install"
  },
  {
    "command": "update.installUpdate",
    "to_ebd": "update install update"
  },
  {
    "command": "update.restart",
    "to_ebd": "update restart"
  },
  {
    "command": "update.restartToUpdate",
    "to_ebd": "update restart to update"
  },
  {
    "command": "update.showCurrentReleaseNotes",
    "to_ebd": "update show current release notes"
  },
  {
    "command": "update.updating",
    "to_ebd": "update updating"
  },
  {
    "command": "userDataProfiles",
    "to_ebd": "user data profiles"
  },
  {
    "command": "userDataProfiles.resetViewContainerLocation",
    "to_ebd": "user data profiles reset view container location"
  },
  {
    "command": "variables.collapse",
    "to_ebd": "variables collapse"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscode",
    "to_ebd": "vscode"
  },
  {
    "command": "vscodeMarkdownLanguageservice.open",
    "to_ebd": "vscode markdown languageservice open"
  },
  {
    "command": "vscodeMarkdownLanguageservice.rename",
    "to_ebd": "vscode markdown languageservice rename"
  },
  {
    "command": "walkthroughs.selectStep",
    "to_ebd": "walkthroughs select step"
  },
  {
    "command": "watch.collapse",
    "to_ebd": "watch collapse"
  },
  {
    "command": "welcome.markStepComplete",
    "to_ebd": "welcome mark step complete"
  },
  {
    "command": "welcome.markStepIncomplete",
    "to_ebd": "welcome mark step incomplete"
  },
  {
    "command": "welcome.showAllWalkthroughs",
    "to_ebd": "welcome show all walkthroughs"
  },
  {
    "command": "workbench.action.acceptSelectedQuickOpenItem",
    "to_ebd": "workbench action accept selected quick open item"
  },
  {
    "command": "workbench.action.addComment",
    "to_ebd": "workbench action add comment"
  },
  {
    "command": "workbench.action.addRootFolder",
    "to_ebd": "workbench action add root folder"
  },
  {
    "command": "workbench.action.alignPanelCenter",
    "to_ebd": "workbench action align panel center"
  },
  {
    "command": "workbench.action.alignPanelJustify",
    "to_ebd": "workbench action align panel justify"
  },
  {
    "command": "workbench.action.alignPanelLeft",
    "to_ebd": "workbench action align panel left"
  },
  {
    "command": "workbench.action.alignPanelRight",
    "to_ebd": "workbench action align panel right"
  },
  {
    "command": "workbench.action.alternativeAcceptSelectedQuickOpenItem",
    "to_ebd": "workbench action alternative accept selected quick open item"
  },
  {
    "command": "workbench.action.blur",
    "to_ebd": "workbench action blur"
  },
  {
    "command": "workbench.action.clearCommandHistory",
    "to_ebd": "workbench action clear command history"
  },
  {
    "command": "workbench.action.clearEditorHistory",
    "to_ebd": "workbench action clear editor history"
  },
  {
    "command": "workbench.action.clearLocalePreference",
    "to_ebd": "workbench action clear locale preference"
  },
  {
    "command": "workbench.action.clearRecentFiles",
    "to_ebd": "workbench action clear recent files"
  },
  {
    "command": "workbench.action.closeActivePinnedEditor",
    "to_ebd": "workbench action close active pinned editor"
  },
  {
    "command": "workbench.action.closeAuxiliaryBar",
    "to_ebd": "workbench action close auxiliary bar"
  },
  {
    "command": "workbench.action.closeEditorInAllGroups",
    "to_ebd": "workbench action close editor in all groups"
  },
  {
    "command": "workbench.action.closeEditorsAndGroup",
    "to_ebd": "workbench action close editors and group"
  },
  {
    "command": "workbench.action.closeEditorsInOtherGroups",
    "to_ebd": "workbench action close editors in other groups"
  },
  {
    "command": "workbench.action.closeEditorsToTheLeft",
    "to_ebd": "workbench action close editors to the left"
  },
  {
    "command": "workbench.action.closeEditorsToTheRight",
    "to_ebd": "workbench action close editors to the right"
  },
  {
    "command": "workbench.action.closeOtherEditors",
    "to_ebd": "workbench action close other editors"
  },
  {
    "command": "workbench.action.closePanel",
    "to_ebd": "workbench action close panel"
  },
  {
    "command": "workbench.action.closeSidebar",
    "to_ebd": "workbench action close sidebar"
  },
  {
    "command": "workbench.action.collapseAllComments",
    "to_ebd": "workbench action collapse all comments"
  },
  {
    "command": "workbench.action.compareEditor.focusOtherSide",
    "to_ebd": "workbench action compare editor focus other side"
  },
  {
    "command": "workbench.action.compareEditor.focusPrimarySide",
    "to_ebd": "workbench action compare editor focus primary side"
  },
  {
    "command": "workbench.action.compareEditor.focusSecondarySide",
    "to_ebd": "workbench action compare editor focus secondary side"
  },
  {
    "command": "workbench.action.configureLanguageBasedSettings",
    "to_ebd": "workbench action configure language based settings"
  },
  {
    "command": "workbench.action.configureLocale",
    "to_ebd": "workbench action configure locale"
  },
  {
    "command": "workbench.action.configureRuntimeArguments",
    "to_ebd": "workbench action configure runtime arguments"
  },
  {
    "command": "workbench.action.createTerminalEditor",
    "to_ebd": "workbench action create terminal editor"
  },
  {
    "command": "workbench.action.createTerminalEditorSide",
    "to_ebd": "workbench action create terminal editor side"
  },
  {
    "command": "workbench.action.customizeLayout",
    "to_ebd": "workbench action customize layout"
  },
  {
    "command": "workbench.action.debug.callStackBottom",
    "to_ebd": "workbench action debug call stack bottom"
  },
  {
    "command": "workbench.action.debug.callStackDown",
    "to_ebd": "workbench action debug call stack down"
  },
  {
    "command": "workbench.action.debug.callStackTop",
    "to_ebd": "workbench action debug call stack top"
  },
  {
    "command": "workbench.action.debug.callStackUp",
    "to_ebd": "workbench action debug call stack up"
  },
  {
    "command": "workbench.action.debug.configure",
    "to_ebd": "workbench action debug configure"
  },
  {
    "command": "workbench.action.debug.disconnectAndSuspend",
    "to_ebd": "workbench action debug disconnect and suspend"
  },
  {
    "command": "workbench.action.debug.focusProcess",
    "to_ebd": "workbench action debug focus process"
  },
  {
    "command": "workbench.action.debug.restartFrame",
    "to_ebd": "workbench action debug restart frame"
  },
  {
    "command": "workbench.action.debug.reverseContinue",
    "to_ebd": "workbench action debug reverse continue"
  },
  {
    "command": "workbench.action.debug.selectDebugConsole",
    "to_ebd": "workbench action debug select debug console"
  },
  {
    "command": "workbench.action.debug.selectDebugSession",
    "to_ebd": "workbench action debug select debug session"
  },
  {
    "command": "workbench.action.debug.selectRepl",
    "to_ebd": "workbench action debug select repl"
  },
  {
    "command": "workbench.action.debug.selectandstart",
    "to_ebd": "workbench action debug selectandstart"
  },
  {
    "command": "workbench.action.debug.showLoadedScripts",
    "to_ebd": "workbench action debug show loaded scripts"
  },
  {
    "command": "workbench.action.debug.stepBack",
    "to_ebd": "workbench action debug step back"
  },
  {
    "command": "workbench.action.debug.terminateThread",
    "to_ebd": "workbench action debug terminate thread"
  },
  {
    "command": "workbench.action.decreaseViewHeight",
    "to_ebd": "workbench action decrease view height"
  },
  {
    "command": "workbench.action.decreaseViewSize",
    "to_ebd": "workbench action decrease view size"
  },
  {
    "command": "workbench.action.decreaseViewWidth",
    "to_ebd": "workbench action decrease view width"
  },
  {
    "command": "workbench.action.download",
    "to_ebd": "workbench action download"
  },
  {
    "command": "workbench.action.duplicateActiveEditorGroupDown",
    "to_ebd": "workbench action duplicate active editor group down"
  },
  {
    "command": "workbench.action.duplicateActiveEditorGroupLeft",
    "to_ebd": "workbench action duplicate active editor group left"
  },
  {
    "command": "workbench.action.duplicateActiveEditorGroupRight",
    "to_ebd": "workbench action duplicate active editor group right"
  },
  {
    "command": "workbench.action.duplicateActiveEditorGroupUp",
    "to_ebd": "workbench action duplicate active editor group up"
  },
  {
    "command": "workbench.action.duplicateWorkspaceInNewWindow",
    "to_ebd": "workbench action duplicate workspace in new window"
  },
  {
    "command": "workbench.action.editor.changeEOL",
    "to_ebd": "workbench action editor change eol"
  },
  {
    "command": "workbench.action.editor.changeEncoding",
    "to_ebd": "workbench action editor change encoding"
  },
  {
    "command": "workbench.action.editorLayoutSingle",
    "to_ebd": "workbench action editor layout single"
  },
  {
    "command": "workbench.action.editorLayoutThreeColumns",
    "to_ebd": "workbench action editor layout three columns"
  },
  {
    "command": "workbench.action.editorLayoutThreeRows",
    "to_ebd": "workbench action editor layout three rows"
  },
  {
    "command": "workbench.action.editorLayoutTwoByTwoGrid",
    "to_ebd": "workbench action editor layout two by two grid"
  },
  {
    "command": "workbench.action.editorLayoutTwoColumns",
    "to_ebd": "workbench action editor layout two columns"
  },
  {
    "command": "workbench.action.editorLayoutTwoColumnsBottom",
    "to_ebd": "workbench action editor layout two columns bottom"
  },
  {
    "command": "workbench.action.editorLayoutTwoRows",
    "to_ebd": "workbench action editor layout two rows"
  },
  {
    "command": "workbench.action.editorLayoutTwoRowsRight",
    "to_ebd": "workbench action editor layout two rows right"
  },
  {
    "command": "workbench.action.evenEditorWidths",
    "to_ebd": "workbench action even editor widths"
  },
  {
    "command": "workbench.action.expandAllComments",
    "to_ebd": "workbench action expand all comments"
  },
  {
    "command": "workbench.action.extensionHostProfiler.stop",
    "to_ebd": "workbench action extension host profiler stop"
  },
  {
    "command": "workbench.action.files.newFile",
    "to_ebd": "workbench action files new file"
  },
  {
    "command": "workbench.action.files.openFileFolderInNewWindow",
    "to_ebd": "workbench action files open file folder in new window"
  },
  {
    "command": "workbench.action.files.openFileInNewWindow",
    "to_ebd": "workbench action files open file in new window"
  },
  {
    "command": "workbench.action.files.openFolderInNewWindow",
    "to_ebd": "workbench action files open folder in new window"
  },
  {
    "command": "workbench.action.files.revert",
    "to_ebd": "workbench action files revert"
  },
  {
    "command": "workbench.action.files.saveAll",
    "to_ebd": "workbench action files save all"
  },
  {
    "command": "workbench.action.files.saveFiles",
    "to_ebd": "workbench action files save files"
  },
  {
    "command": "workbench.action.firstEditorInGroup",
    "to_ebd": "workbench action first editor in group"
  },
  {
    "command": "workbench.action.focusAboveGroupWithoutWrap",
    "to_ebd": "workbench action focus above group without wrap"
  },
  {
    "command": "workbench.action.focusActiveEditorGroup",
    "to_ebd": "workbench action focus active editor group"
  },
  {
    "command": "workbench.action.focusActivityBar",
    "to_ebd": "workbench action focus activity bar"
  },
  {
    "command": "workbench.action.focusAuxiliaryBar",
    "to_ebd": "workbench action focus auxiliary bar"
  },
  {
    "command": "workbench.action.focusBanner",
    "to_ebd": "workbench action focus banner"
  },
  {
    "command": "workbench.action.focusBelowGroupWithoutWrap",
    "to_ebd": "workbench action focus below group without wrap"
  },
  {
    "command": "workbench.action.focusCommentsPanel",
    "to_ebd": "workbench action focus comments panel"
  },
  {
    "command": "workbench.action.focusFirstSideEditor",
    "to_ebd": "workbench action focus first side editor"
  },
  {
    "command": "workbench.action.focusLastEditorGroup",
    "to_ebd": "workbench action focus last editor group"
  },
  {
    "command": "workbench.action.focusLeftGroupWithoutWrap",
    "to_ebd": "workbench action focus left group without wrap"
  },
  {
    "command": "workbench.action.focusNextGroup",
    "to_ebd": "workbench action focus next group"
  },
  {
    "command": "workbench.action.focusOtherSideEditor",
    "to_ebd": "workbench action focus other side editor"
  },
  {
    "command": "workbench.action.focusPanel",
    "to_ebd": "workbench action focus panel"
  },
  {
    "command": "workbench.action.focusPreviousGroup",
    "to_ebd": "workbench action focus previous group"
  },
  {
    "command": "workbench.action.focusQuickOpen",
    "to_ebd": "workbench action focus quick open"
  },
  {
    "command": "workbench.action.focusRightGroupWithoutWrap",
    "to_ebd": "workbench action focus right group without wrap"
  },
  {
    "command": "workbench.action.focusSecondSideEditor",
    "to_ebd": "workbench action focus second side editor"
  },
  {
    "command": "workbench.action.focusStatusBar",
    "to_ebd": "workbench action focus status bar"
  },
  {
    "command": "workbench.action.focusTitleBar",
    "to_ebd": "workbench action focus title bar"
  },
  {
    "command": "workbench.action.generateColorTheme",
    "to_ebd": "workbench action generate color theme"
  },
  {
    "command": "workbench.action.increaseViewHeight",
    "to_ebd": "workbench action increase view height"
  },
  {
    "command": "workbench.action.increaseViewSize",
    "to_ebd": "workbench action increase view size"
  },
  {
    "command": "workbench.action.increaseViewWidth",
    "to_ebd": "workbench action increase view width"
  },
  {
    "command": "workbench.action.inspectContextKeys",
    "to_ebd": "workbench action inspect context keys"
  },
  {
    "command": "workbench.action.inspectKeyMappings",
    "to_ebd": "workbench action inspect key mappings"
  },
  {
    "command": "workbench.action.inspectKeyMappingsJSON",
    "to_ebd": "workbench action inspect key mappings json"
  },
  {
    "command": "workbench.action.joinAllGroups",
    "to_ebd": "workbench action join all groups"
  },
  {
    "command": "workbench.action.joinTwoGroups",
    "to_ebd": "workbench action join two groups"
  },
  {
    "command": "workbench.action.localHistory.compareWithFile",
    "to_ebd": "workbench action local history compare with file"
  },
  {
    "command": "workbench.action.localHistory.compareWithPrevious",
    "to_ebd": "workbench action local history compare with previous"
  },
  {
    "command": "workbench.action.localHistory.compareWithSelected",
    "to_ebd": "workbench action local history compare with selected"
  },
  {
    "command": "workbench.action.localHistory.create",
    "to_ebd": "workbench action local history create"
  },
  {
    "command": "workbench.action.localHistory.delete",
    "to_ebd": "workbench action local history delete"
  },
  {
    "command": "workbench.action.localHistory.deleteAll",
    "to_ebd": "workbench action local history delete all"
  },
  {
    "command": "workbench.action.localHistory.open",
    "to_ebd": "workbench action local history open"
  },
  {
    "command": "workbench.action.localHistory.rename",
    "to_ebd": "workbench action local history rename"
  },
  {
    "command": "workbench.action.localHistory.restore",
    "to_ebd": "workbench action local history restore"
  },
  {
    "command": "workbench.action.localHistory.restoreViaEditor",
    "to_ebd": "workbench action local history restore via editor"
  },
  {
    "command": "workbench.action.localHistory.restoreViaPicker",
    "to_ebd": "workbench action local history restore via picker"
  },
  {
    "command": "workbench.action.localHistory.revealInOS",
    "to_ebd": "workbench action local history reveal in os"
  },
  {
    "command": "workbench.action.localHistory.selectForCompare",
    "to_ebd": "workbench action local history select for compare"
  },
  {
    "command": "workbench.action.lockEditorGroup",
    "to_ebd": "workbench action lock editor group"
  },
  {
    "command": "workbench.action.logStorage",
    "to_ebd": "workbench action log storage"
  },
  {
    "command": "workbench.action.logWorkingCopies",
    "to_ebd": "workbench action log working copies"
  },
  {
    "command": "workbench.action.manageTrustedDomain",
    "to_ebd": "workbench action manage trusted domain"
  },
  {
    "command": "workbench.action.maximizeEditor",
    "to_ebd": "workbench action maximize editor"
  },
  {
    "command": "workbench.action.minimizeOtherEditors",
    "to_ebd": "workbench action minimize other editors"
  },
  {
    "command": "workbench.action.moveEditorToAboveGroup",
    "to_ebd": "workbench action move editor to above group"
  },
  {
    "command": "workbench.action.moveEditorToBelowGroup",
    "to_ebd": "workbench action move editor to below group"
  },
  {
    "command": "workbench.action.moveEditorToLeftGroup",
    "to_ebd": "workbench action move editor to left group"
  },
  {
    "command": "workbench.action.moveEditorToRightGroup",
    "to_ebd": "workbench action move editor to right group"
  },
  {
    "command": "workbench.action.moveFocusedView",
    "to_ebd": "workbench action move focused view"
  },
  {
    "command": "workbench.action.movePanelToSecondarySideBar",
    "to_ebd": "workbench action move panel to secondary side bar"
  },
  {
    "command": "workbench.action.movePanelToSidePanel",
    "to_ebd": "workbench action move panel to side panel"
  },
  {
    "command": "workbench.action.moveSecondarySideBarToPanel",
    "to_ebd": "workbench action move secondary side bar to panel"
  },
  {
    "command": "workbench.action.moveSideBarLeft",
    "to_ebd": "workbench action move side bar left"
  },
  {
    "command": "workbench.action.moveSideBarRight",
    "to_ebd": "workbench action move side bar right"
  },
  {
    "command": "workbench.action.moveSidePanelToPanel",
    "to_ebd": "workbench action move side panel to panel"
  },
  {
    "command": "workbench.action.moveView",
    "to_ebd": "workbench action move view"
  },
  {
    "command": "workbench.action.navigateBackInEditLocations",
    "to_ebd": "workbench action navigate back in edit locations"
  },
  {
    "command": "workbench.action.navigateBackInNavigationLocations",
    "to_ebd": "workbench action navigate back in navigation locations"
  },
  {
    "command": "workbench.action.navigateDown",
    "to_ebd": "workbench action navigate down"
  },
  {
    "command": "workbench.action.navigateEditorGroups",
    "to_ebd": "workbench action navigate editor groups"
  },
  {
    "command": "workbench.action.navigateForwardInEditLocations",
    "to_ebd": "workbench action navigate forward in edit locations"
  },
  {
    "command": "workbench.action.navigateForwardInNavigationLocations",
    "to_ebd": "workbench action navigate forward in navigation locations"
  },
  {
    "command": "workbench.action.navigateLast",
    "to_ebd": "workbench action navigate last"
  },
  {
    "command": "workbench.action.navigateLeft",
    "to_ebd": "workbench action navigate left"
  },
  {
    "command": "workbench.action.navigatePreviousInEditLocations",
    "to_ebd": "workbench action navigate previous in edit locations"
  },
  {
    "command": "workbench.action.navigatePreviousInNavigationLocations",
    "to_ebd": "workbench action navigate previous in navigation locations"
  },
  {
    "command": "workbench.action.navigateRight",
    "to_ebd": "workbench action navigate right"
  },
  {
    "command": "workbench.action.navigateToLastNavigationLocation",
    "to_ebd": "workbench action navigate to last navigation location"
  },
  {
    "command": "workbench.action.navigateUp",
    "to_ebd": "workbench action navigate up"
  },
  {
    "command": "workbench.action.newGroupAbove",
    "to_ebd": "workbench action new group above"
  },
  {
    "command": "workbench.action.newGroupBelow",
    "to_ebd": "workbench action new group below"
  },
  {
    "command": "workbench.action.newGroupLeft",
    "to_ebd": "workbench action new group left"
  },
  {
    "command": "workbench.action.newGroupRight",
    "to_ebd": "workbench action new group right"
  },
  {
    "command": "workbench.action.nextPanelView",
    "to_ebd": "workbench action next panel view"
  },
  {
    "command": "workbench.action.nextSideBarView",
    "to_ebd": "workbench action next side bar view"
  },
  {
    "command": "workbench.action.openAccessibilitySettings",
    "to_ebd": "workbench action open accessibility settings"
  },
  {
    "command": "workbench.action.openActiveLogOutputFile",
    "to_ebd": "workbench action open active log output file"
  },
  {
    "command": "workbench.action.openApplicationSettingsJson",
    "to_ebd": "workbench action open application settings json"
  },
  {
    "command": "workbench.action.openDefaultKeybindingsFile",
    "to_ebd": "workbench action open default keybindings file"
  },
  {
    "command": "workbench.action.openDocumentationUrl",
    "to_ebd": "workbench action open documentation url"
  },
  {
    "command": "workbench.action.openEditorAtIndex",
    "to_ebd": "workbench action open editor at index"
  },
  {
    "command": "workbench.action.openExtensionLogsFolder",
    "to_ebd": "workbench action open extension logs folder"
  },
  {
    "command": "workbench.action.openFolderSettings",
    "to_ebd": "workbench action open folder settings"
  },
  {
    "command": "workbench.action.openFolderSettingsFile",
    "to_ebd": "workbench action open folder settings file"
  },
  {
    "command": "workbench.action.openGlobalKeybindingsFile",
    "to_ebd": "workbench action open global keybindings file"
  },
  {
    "command": "workbench.action.openGlobalSettings",
    "to_ebd": "workbench action open global settings"
  },
  {
    "command": "workbench.action.openIssueReporter",
    "to_ebd": "workbench action open issue reporter"
  },
  {
    "command": "workbench.action.openLicenseUrl",
    "to_ebd": "workbench action open license url"
  },
  {
    "command": "workbench.action.openLogFile",
    "to_ebd": "workbench action open log file"
  },
  {
    "command": "workbench.action.openLogsFolder",
    "to_ebd": "workbench action open logs folder"
  },
  {
    "command": "workbench.action.openNewsletterSignupUrl",
    "to_ebd": "workbench action open newsletter signup url"
  },
  {
    "command": "workbench.action.openNextRecentlyUsedEditor",
    "to_ebd": "workbench action open next recently used editor"
  },
  {
    "command": "workbench.action.openNextRecentlyUsedEditorInGroup",
    "to_ebd": "workbench action open next recently used editor in group"
  },
  {
    "command": "workbench.action.openPreviousEditorFromHistory",
    "to_ebd": "workbench action open previous editor from history"
  },
  {
    "command": "workbench.action.openPreviousRecentlyUsedEditor",
    "to_ebd": "workbench action open previous recently used editor"
  },
  {
    "command": "workbench.action.openPreviousRecentlyUsedEditorInGroup",
    "to_ebd": "workbench action open previous recently used editor in group"
  },
  {
    "command": "workbench.action.openPrivacyStatementUrl",
    "to_ebd": "workbench action open privacy statement url"
  },
  {
    "command": "workbench.action.openProcessExplorer",
    "to_ebd": "workbench action open process explorer"
  },
  {
    "command": "workbench.action.openRawDefaultSettings",
    "to_ebd": "workbench action open raw default settings"
  },
  {
    "command": "workbench.action.openRemoteSettings",
    "to_ebd": "workbench action open remote settings"
  },
  {
    "command": "workbench.action.openRemoteSettingsFile",
    "to_ebd": "workbench action open remote settings file"
  },
  {
    "command": "workbench.action.openRequestFeatureUrl",
    "to_ebd": "workbench action open request feature url"
  },
  {
    "command": "workbench.action.openSettings",
    "to_ebd": "workbench action open settings"
  },
  {
    "command": "workbench.action.openSettingsJson",
    "to_ebd": "workbench action open settings json"
  },
  {
    "command": "workbench.action.openSnippets",
    "to_ebd": "workbench action open snippets"
  },
  {
    "command": "workbench.action.openTipsAndTricksUrl",
    "to_ebd": "workbench action open tips and tricks url"
  },
  {
    "command": "workbench.action.openTwitterUrl",
    "to_ebd": "workbench action open twitter url"
  },
  {
    "command": "workbench.action.openVideoTutorialsUrl",
    "to_ebd": "workbench action open video tutorials url"
  },
  {
    "command": "workbench.action.openView",
    "to_ebd": "workbench action open view"
  },
  {
    "command": "workbench.action.openWalkthrough",
    "to_ebd": "workbench action open walkthrough"
  },
  {
    "command": "workbench.action.openWorkspace",
    "to_ebd": "workbench action open workspace"
  },
  {
    "command": "workbench.action.openWorkspaceConfigFile",
    "to_ebd": "workbench action open workspace config file"
  },
  {
    "command": "workbench.action.openWorkspaceFromEditor",
    "to_ebd": "workbench action open workspace from editor"
  },
  {
    "command": "workbench.action.openWorkspaceInNewWindow",
    "to_ebd": "workbench action open workspace in new window"
  },
  {
    "command": "workbench.action.openWorkspaceSettings",
    "to_ebd": "workbench action open workspace settings"
  },
  {
    "command": "workbench.action.openWorkspaceSettingsFile",
    "to_ebd": "workbench action open workspace settings file"
  },
  {
    "command": "workbench.action.output.show.editSessionsSyncLog",
    "to_ebd": "workbench action output show edit sessions sync log"
  },
  {
    "command": "workbench.action.output.show.extHostLog",
    "to_ebd": "workbench action output show ext host log"
  },
  {
    "command": "workbench.action.output.show.extension",
    "to_ebd": "workbench action output show extension"
  },
  {
    "command": "workbench.action.output.show.extension",
    "to_ebd": "workbench action output show extension"
  },
  {
    "command": "workbench.action.output.show.extension",
    "to_ebd": "workbench action output show extension"
  },
  {
    "command": "workbench.action.output.show.extension",
    "to_ebd": "workbench action output show extension"
  },
  {
    "command": "workbench.action.output.show.extension",
    "to_ebd": "workbench action output show extension"
  },
  {
    "command": "workbench.action.output.show.extension",
    "to_ebd": "workbench action output show extension"
  },
  {
    "command": "workbench.action.output.show.extension",
    "to_ebd": "workbench action output show extension"
  },
  {
    "command": "workbench.action.output.show.extension",
    "to_ebd": "workbench action output show extension"
  },
  {
    "command": "workbench.action.output.show.extension",
    "to_ebd": "workbench action output show extension"
  },
  {
    "command": "workbench.action.output.show.extension",
    "to_ebd": "workbench action output show extension"
  },
  {
    "command": "workbench.action.output.show.extension",
    "to_ebd": "workbench action output show extension"
  },
  {
    "command": "workbench.action.output.show.extension",
    "to_ebd": "workbench action output show extension"
  },
  {
    "command": "workbench.action.output.show.mainLog",
    "to_ebd": "workbench action output show main log"
  },
  {
    "command": "workbench.action.output.show.ptyHostLog",
    "to_ebd": "workbench action output show pty host log"
  },
  {
    "command": "workbench.action.output.show.remoteTunnelServiceLog",
    "to_ebd": "workbench action output show remote tunnel service log"
  },
  {
    "command": "workbench.action.output.show.rendererLog",
    "to_ebd": "workbench action output show renderer log"
  },
  {
    "command": "workbench.action.output.show.sharedLog",
    "to_ebd": "workbench action output show shared log"
  },
  {
    "command": "workbench.action.output.show.tasks",
    "to_ebd": "workbench action output show tasks"
  },
  {
    "command": "workbench.action.output.show.userDataSyncLog",
    "to_ebd": "workbench action output show user data sync log"
  },
  {
    "command": "workbench.action.pauseSocketWriting",
    "to_ebd": "workbench action pause socket writing"
  },
  {
    "command": "workbench.action.populateFileFromSnippet",
    "to_ebd": "workbench action populate file from snippet"
  },
  {
    "command": "workbench.action.positionPanelBottom",
    "to_ebd": "workbench action position panel bottom"
  },
  {
    "command": "workbench.action.positionPanelLeft",
    "to_ebd": "workbench action position panel left"
  },
  {
    "command": "workbench.action.positionPanelRight",
    "to_ebd": "workbench action position panel right"
  },
  {
    "command": "workbench.action.previewColorTheme",
    "to_ebd": "workbench action preview color theme"
  },
  {
    "command": "workbench.action.previousPanelView",
    "to_ebd": "workbench action previous panel view"
  },
  {
    "command": "workbench.action.previousSideBarView",
    "to_ebd": "workbench action previous side bar view"
  },
  {
    "command": "workbench.action.problems.focus",
    "to_ebd": "workbench action problems focus"
  },
  {
    "command": "workbench.action.quickOpenLeastRecentlyUsedEditor",
    "to_ebd": "workbench action quick open least recently used editor"
  },
  {
    "command": "workbench.action.quickOpenNavigateNext",
    "to_ebd": "workbench action quick open navigate next"
  },
  {
    "command": "workbench.action.quickOpenNavigateNextInTerminalPicker",
    "to_ebd": "workbench action quick open navigate next in terminal picker"
  },
  {
    "command": "workbench.action.quickOpenNavigateNextInViewPicker",
    "to_ebd": "workbench action quick open navigate next in view picker"
  },
  {
    "command": "workbench.action.quickOpenNavigatePrevious",
    "to_ebd": "workbench action quick open navigate previous"
  },
  {
    "command": "workbench.action.quickOpenNavigatePreviousInTerminalPicker",
    "to_ebd": "workbench action quick open navigate previous in terminal picker"
  },
  {
    "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
    "to_ebd": "workbench action quick open navigate previous in view picker"
  },
  {
    "command": "workbench.action.quickOpenPreviousEditor",
    "to_ebd": "workbench action quick open previous editor"
  },
  {
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditor",
    "to_ebd": "workbench action quick open previous recently used editor"
  },
  {
    "command": "workbench.action.quickOpenRecent",
    "to_ebd": "workbench action quick open recent"
  },
  {
    "command": "workbench.action.quickOpenSelectNext",
    "to_ebd": "workbench action quick open select next"
  },
  {
    "command": "workbench.action.quickOpenSelectPrevious",
    "to_ebd": "workbench action quick open select previous"
  },
  {
    "command": "workbench.action.quickOpenTerm",
    "to_ebd": "workbench action quick open term"
  },
  {
    "command": "workbench.action.quickOpenView",
    "to_ebd": "workbench action quick open view"
  },
  {
    "command": "workbench.action.quickOpenWithModes",
    "to_ebd": "workbench action quick open with modes"
  },
  {
    "command": "workbench.action.quickPickManyToggle",
    "to_ebd": "workbench action quick pick many toggle"
  },
  {
    "command": "workbench.action.quickSwitchWindow",
    "to_ebd": "workbench action quick switch window"
  },
  {
    "command": "workbench.action.reloadWindowWithExtensionsDisabled",
    "to_ebd": "workbench action reload window with extensions disabled"
  },
  {
    "command": "workbench.action.remote.close",
    "to_ebd": "workbench action remote close"
  },
  {
    "command": "workbench.action.remote.extensions",
    "to_ebd": "workbench action remote extensions"
  },
  {
    "command": "workbench.action.remote.showMenu",
    "to_ebd": "workbench action remote show menu"
  },
  {
    "command": "workbench.action.removeRootFolder",
    "to_ebd": "workbench action remove root folder"
  },
  {
    "command": "workbench.action.reopenTextEditor",
    "to_ebd": "workbench action reopen text editor"
  },
  {
    "command": "workbench.action.reopenWithEditor",
    "to_ebd": "workbench action reopen with editor"
  },
  {
    "command": "workbench.action.reportPerformanceIssueUsingReporter",
    "to_ebd": "workbench action report performance issue using reporter"
  },
  {
    "command": "workbench.action.resetFocusedViewLocation",
    "to_ebd": "workbench action reset focused view location"
  },
  {
    "command": "workbench.action.resetViewLocations",
    "to_ebd": "workbench action reset view locations"
  },
  {
    "command": "workbench.action.restartExtensionHost",
    "to_ebd": "workbench action restart extension host"
  },
  {
    "command": "workbench.action.revertAndCloseActiveEditor",
    "to_ebd": "workbench action revert and close active editor"
  },
  {
    "command": "workbench.action.saveWorkspaceAs",
    "to_ebd": "workbench action save workspace as"
  },
  {
    "command": "workbench.action.selectIconTheme",
    "to_ebd": "workbench action select icon theme"
  },
  {
    "command": "workbench.action.selectProductIconTheme",
    "to_ebd": "workbench action select product icon theme"
  },
  {
    "command": "workbench.action.setLogLevel",
    "to_ebd": "workbench action set log level"
  },
  {
    "command": "workbench.action.showAboutDialog",
    "to_ebd": "workbench action show about dialog"
  },
  {
    "command": "workbench.action.showAllEditorsByMostRecentlyUsed",
    "to_ebd": "workbench action show all editors by most recently used"
  },
  {
    "command": "workbench.action.showEditorsInActiveGroup",
    "to_ebd": "workbench action show editors in active group"
  },
  {
    "command": "workbench.action.showEditorsInGroup",
    "to_ebd": "workbench action show editors in group"
  },
  {
    "command": "workbench.action.showEmmetCommands",
    "to_ebd": "workbench action show emmet commands"
  },
  {
    "command": "workbench.action.showErrorsWarnings",
    "to_ebd": "workbench action show errors warnings"
  },
  {
    "command": "workbench.action.showInteractivePlayground",
    "to_ebd": "workbench action show interactive playground"
  },
  {
    "command": "workbench.action.showInterfaceOverview",
    "to_ebd": "workbench action show interface overview"
  },
  {
    "command": "workbench.action.showLogs",
    "to_ebd": "workbench action show logs"
  },
  {
    "command": "workbench.action.showRuntimeExtensions",
    "to_ebd": "workbench action show runtime extensions"
  },
  {
    "command": "workbench.action.showWindowLog",
    "to_ebd": "workbench action show window log"
  },
  {
    "command": "workbench.action.splitEditorDown",
    "to_ebd": "workbench action split editor down"
  },
  {
    "command": "workbench.action.splitEditorLeft",
    "to_ebd": "workbench action split editor left"
  },
  {
    "command": "workbench.action.splitEditorRight",
    "to_ebd": "workbench action split editor right"
  },
  {
    "command": "workbench.action.splitEditorToAboveGroup",
    "to_ebd": "workbench action split editor to above group"
  },
  {
    "command": "workbench.action.splitEditorToBelowGroup",
    "to_ebd": "workbench action split editor to below group"
  },
  {
    "command": "workbench.action.splitEditorToFirstGroup",
    "to_ebd": "workbench action split editor to first group"
  },
  {
    "command": "workbench.action.splitEditorToLastGroup",
    "to_ebd": "workbench action split editor to last group"
  },
  {
    "command": "workbench.action.splitEditorToLeftGroup",
    "to_ebd": "workbench action split editor to left group"
  },
  {
    "command": "workbench.action.splitEditorToNextGroup",
    "to_ebd": "workbench action split editor to next group"
  },
  {
    "command": "workbench.action.splitEditorToPreviousGroup",
    "to_ebd": "workbench action split editor to previous group"
  },
  {
    "command": "workbench.action.splitEditorToRightGroup",
    "to_ebd": "workbench action split editor to right group"
  },
  {
    "command": "workbench.action.splitEditorUp",
    "to_ebd": "workbench action split editor up"
  },
  {
    "command": "workbench.action.stopTracing",
    "to_ebd": "workbench action stop tracing"
  },
  {
    "command": "workbench.action.switchWindow",
    "to_ebd": "workbench action switch window"
  },
  {
    "command": "workbench.action.tasks.configureDefaultBuildTask",
    "to_ebd": "workbench action tasks configure default build task"
  },
  {
    "command": "workbench.action.tasks.configureDefaultTestTask",
    "to_ebd": "workbench action tasks configure default test task"
  },
  {
    "command": "workbench.action.tasks.configureTaskRunner",
    "to_ebd": "workbench action tasks configure task runner"
  },
  {
    "command": "workbench.action.tasks.manageAutomaticRunning",
    "to_ebd": "workbench action tasks manage automatic running"
  },
  {
    "command": "workbench.action.tasks.openUserTasks",
    "to_ebd": "workbench action tasks open user tasks"
  },
  {
    "command": "workbench.action.tasks.openWorkspaceFileTasks",
    "to_ebd": "workbench action tasks open workspace file tasks"
  },
  {
    "command": "workbench.action.tasks.reRunTask",
    "to_ebd": "workbench action tasks re run task"
  },
  {
    "command": "workbench.action.tasks.restartTask",
    "to_ebd": "workbench action tasks restart task"
  },
  {
    "command": "workbench.action.tasks.runTask",
    "to_ebd": "workbench action tasks run task"
  },
  {
    "command": "workbench.action.tasks.showLog",
    "to_ebd": "workbench action tasks show log"
  },
  {
    "command": "workbench.action.tasks.showTasks",
    "to_ebd": "workbench action tasks show tasks"
  },
  {
    "command": "workbench.action.tasks.terminate",
    "to_ebd": "workbench action tasks terminate"
  },
  {
    "command": "workbench.action.tasks.test",
    "to_ebd": "workbench action tasks test"
  },
  {
    "command": "workbench.action.tasks.toggleProblems",
    "to_ebd": "workbench action tasks toggle problems"
  },
  {
    "command": "workbench.action.terminal.attachToSession",
    "to_ebd": "workbench action terminal attach to session"
  },
  {
    "command": "workbench.action.terminal.changeColor",
    "to_ebd": "workbench action terminal change color"
  },
  {
    "command": "workbench.action.terminal.changeColorInstance",
    "to_ebd": "workbench action terminal change color instance"
  },
  {
    "command": "workbench.action.terminal.changeColorPanel",
    "to_ebd": "workbench action terminal change color panel"
  },
  {
    "command": "workbench.action.terminal.changeIcon",
    "to_ebd": "workbench action terminal change icon"
  },
  {
    "command": "workbench.action.terminal.changeIconInstance",
    "to_ebd": "workbench action terminal change icon instance"
  },
  {
    "command": "workbench.action.terminal.changeIconPanel",
    "to_ebd": "workbench action terminal change icon panel"
  },
  {
    "command": "workbench.action.terminal.clear",
    "to_ebd": "workbench action terminal clear"
  },
  {
    "command": "workbench.action.terminal.clearCommandHistory",
    "to_ebd": "workbench action terminal clear command history"
  },
  {
    "command": "workbench.action.terminal.copyLastCommand",
    "to_ebd": "workbench action terminal copy last command"
  },
  {
    "command": "workbench.action.terminal.copySelectionAsHtml",
    "to_ebd": "workbench action terminal copy selection as html"
  },
  {
    "command": "workbench.action.terminal.detachSession",
    "to_ebd": "workbench action terminal detach session"
  },
  {
    "command": "workbench.action.terminal.focus",
    "to_ebd": "workbench action terminal focus"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex",
    "to_ebd": "workbench action terminal focus at index"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex",
    "to_ebd": "workbench action terminal focus at index"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex",
    "to_ebd": "workbench action terminal focus at index"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex",
    "to_ebd": "workbench action terminal focus at index"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex",
    "to_ebd": "workbench action terminal focus at index"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex",
    "to_ebd": "workbench action terminal focus at index"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex",
    "to_ebd": "workbench action terminal focus at index"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex",
    "to_ebd": "workbench action terminal focus at index"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex",
    "to_ebd": "workbench action terminal focus at index"
  },
  {
    "command": "workbench.action.terminal.gitCreateProfileButton",
    "to_ebd": "workbench action terminal git create profile button"
  },
  {
    "command": "workbench.action.terminal.goToRecentDirectory",
    "to_ebd": "workbench action terminal go to recent directory"
  },
  {
    "command": "workbench.action.terminal.join",
    "to_ebd": "workbench action terminal join"
  },
  {
    "command": "workbench.action.terminal.joinInstance",
    "to_ebd": "workbench action terminal join instance"
  },
  {
    "command": "workbench.action.terminal.kill",
    "to_ebd": "workbench action terminal kill"
  },
  {
    "command": "workbench.action.terminal.killAll",
    "to_ebd": "workbench action terminal kill all"
  },
  {
    "command": "workbench.action.terminal.moveToEditor",
    "to_ebd": "workbench action terminal move to editor"
  },
  {
    "command": "workbench.action.terminal.moveToEditorInstance",
    "to_ebd": "workbench action terminal move to editor instance"
  },
  {
    "command": "workbench.action.terminal.moveToTerminalPanel",
    "to_ebd": "workbench action terminal move to terminal panel"
  },
  {
    "command": "workbench.action.terminal.newInActiveWorkspace",
    "to_ebd": "workbench action terminal new in active workspace"
  },
  {
    "command": "workbench.action.terminal.newWithProfile",
    "to_ebd": "workbench action terminal new with profile"
  },
  {
    "command": "workbench.action.terminal.openDetectedLink",
    "to_ebd": "workbench action terminal open detected link"
  },
  {
    "command": "workbench.action.terminal.openFileLink",
    "to_ebd": "workbench action terminal open file link"
  },
  {
    "command": "workbench.action.terminal.openSettings",
    "to_ebd": "workbench action terminal open settings"
  },
  {
    "command": "workbench.action.terminal.openUrlLink",
    "to_ebd": "workbench action terminal open url link"
  },
  {
    "command": "workbench.action.terminal.relaunch",
    "to_ebd": "workbench action terminal relaunch"
  },
  {
    "command": "workbench.action.terminal.rename",
    "to_ebd": "workbench action terminal rename"
  },
  {
    "command": "workbench.action.terminal.renamePanel",
    "to_ebd": "workbench action terminal rename panel"
  },
  {
    "command": "workbench.action.terminal.resizePaneDown",
    "to_ebd": "workbench action terminal resize pane down"
  },
  {
    "command": "workbench.action.terminal.resizePaneUp",
    "to_ebd": "workbench action terminal resize pane up"
  },
  {
    "command": "workbench.action.terminal.runActiveFile",
    "to_ebd": "workbench action terminal run active file"
  },
  {
    "command": "workbench.action.terminal.runRecentCommand",
    "to_ebd": "workbench action terminal run recent command"
  },
  {
    "command": "workbench.action.terminal.runSelectedText",
    "to_ebd": "workbench action terminal run selected text"
  },
  {
    "command": "workbench.action.terminal.selectAll",
    "to_ebd": "workbench action terminal select all"
  },
  {
    "command": "workbench.action.terminal.selectDefaultShell",
    "to_ebd": "workbench action terminal select default shell"
  },
  {
    "command": "workbench.action.terminal.selectToNextLine",
    "to_ebd": "workbench action terminal select to next line"
  },
  {
    "command": "workbench.action.terminal.selectToPreviousLine",
    "to_ebd": "workbench action terminal select to previous line"
  },
  {
    "command": "workbench.action.terminal.setDimensions",
    "to_ebd": "workbench action terminal set dimensions"
  },
  {
    "command": "workbench.action.terminal.showEnvironmentInformation",
    "to_ebd": "workbench action terminal show environment information"
  },
  {
    "command": "workbench.action.terminal.showTabs",
    "to_ebd": "workbench action terminal show tabs"
  },
  {
    "command": "workbench.action.terminal.showTextureAtlas",
    "to_ebd": "workbench action terminal show texture atlas"
  },
  {
    "command": "workbench.action.terminal.sizeToContentWidthInstance",
    "to_ebd": "workbench action terminal size to content width instance"
  },
  {
    "command": "workbench.action.terminal.splitInActiveWorkspace",
    "to_ebd": "workbench action terminal split in active workspace"
  },
  {
    "command": "workbench.action.terminal.switchTerminal",
    "to_ebd": "workbench action terminal switch terminal"
  },
  {
    "command": "workbench.action.terminal.unsplit",
    "to_ebd": "workbench action terminal unsplit"
  },
  {
    "command": "workbench.action.terminal.unsplitInstance",
    "to_ebd": "workbench action terminal unsplit instance"
  },
  {
    "command": "workbench.action.terminal.writeDataToTerminal",
    "to_ebd": "workbench action terminal write data to terminal"
  },
  {
    "command": "workbench.action.toggleActivityBarVisibility",
    "to_ebd": "workbench action toggle activity bar visibility"
  },
  {
    "command": "workbench.action.toggleAutoSave",
    "to_ebd": "workbench action toggle auto save"
  },
  {
    "command": "workbench.action.toggleAuxiliaryBar",
    "to_ebd": "workbench action toggle auxiliary bar"
  },
  {
    "command": "workbench.action.toggleCenteredLayout",
    "to_ebd": "workbench action toggle centered layout"
  },
  {
    "command": "workbench.action.toggleCommenting",
    "to_ebd": "workbench action toggle commenting"
  },
  {
    "command": "workbench.action.toggleConfirmBeforeClose",
    "to_ebd": "workbench action toggle confirm before close"
  },
  {
    "command": "workbench.action.toggleEditorGroupLock",
    "to_ebd": "workbench action toggle editor group lock"
  },
  {
    "command": "workbench.action.toggleEditorType",
    "to_ebd": "workbench action toggle editor type"
  },
  {
    "command": "workbench.action.toggleEditorVisibility",
    "to_ebd": "workbench action toggle editor visibility"
  },
  {
    "command": "workbench.action.toggleEditorWidths",
    "to_ebd": "workbench action toggle editor widths"
  },
  {
    "command": "workbench.action.toggleKeepEditors",
    "to_ebd": "workbench action toggle keep editors"
  },
  {
    "command": "workbench.action.toggleKeybindingsLog",
    "to_ebd": "workbench action toggle keybindings log"
  },
  {
    "command": "workbench.action.toggleLightDarkThemes",
    "to_ebd": "workbench action toggle light dark themes"
  },
  {
    "command": "workbench.action.toggleMaximizedPanel",
    "to_ebd": "workbench action toggle maximized panel"
  },
  {
    "command": "workbench.action.toggleMenuBar",
    "to_ebd": "workbench action toggle menu bar"
  },
  {
    "command": "workbench.action.toggleMultiCursorModifier",
    "to_ebd": "workbench action toggle multi cursor modifier"
  },
  {
    "command": "workbench.action.toggleNotebookClipboardLog",
    "to_ebd": "workbench action toggle notebook clipboard log"
  },
  {
    "command": "workbench.action.toggleScreencastMode",
    "to_ebd": "workbench action toggle screencast mode"
  },
  {
    "command": "workbench.action.toggleSearchOnType",
    "to_ebd": "workbench action toggle search on type"
  },
  {
    "command": "workbench.action.toggleSharedProcess",
    "to_ebd": "workbench action toggle shared process"
  },
  {
    "command": "workbench.action.toggleSidebarPosition",
    "to_ebd": "workbench action toggle sidebar position"
  },
  {
    "command": "workbench.action.toggleSplitEditorInGroup",
    "to_ebd": "workbench action toggle split editor in group"
  },
  {
    "command": "workbench.action.toggleSplitEditorInGroupLayout",
    "to_ebd": "workbench action toggle split editor in group layout"
  },
  {
    "command": "workbench.action.toggleStatusbarVisibility",
    "to_ebd": "workbench action toggle statusbar visibility"
  },
  {
    "command": "workbench.action.toggleTabsVisibility",
    "to_ebd": "workbench action toggle tabs visibility"
  },
  {
    "command": "workbench.action.triggerReconnect",
    "to_ebd": "workbench action trigger reconnect"
  },
  {
    "command": "workbench.action.unlockEditorGroup",
    "to_ebd": "workbench action unlock editor group"
  },
  {
    "command": "workbench.action.url.openUrl",
    "to_ebd": "workbench action url open url"
  },
  {
    "command": "workbench.action.webview.openDeveloperTools",
    "to_ebd": "workbench action webview open developer tools"
  },
  {
    "command": "workbench.action.webview.reloadWebviewAction",
    "to_ebd": "workbench action webview reload webview action"
  },
  {
    "command": "workbench.actions.sync.compareWithLocal",
    "to_ebd": "workbench actions sync compare with local"
  },
  {
    "command": "workbench.actions.sync.editMachineName",
    "to_ebd": "workbench actions sync edit machine name"
  },
  {
    "command": "workbench.actions.sync.replaceCurrent",
    "to_ebd": "workbench actions sync replace current"
  },
  {
    "command": "workbench.actions.sync.resolveResource",
    "to_ebd": "workbench actions sync resolve resource"
  },
  {
    "command": "workbench.actions.sync.turnOffSyncOnMachine",
    "to_ebd": "workbench actions sync turn off sync on machine"
  },
  {
    "command": "workbench.actions.syncData.reset",
    "to_ebd": "workbench actions sync data reset"
  },
  {
    "command": "workbench.actions.table.workbench.panel.markers.view.viewAsTable",
    "to_ebd": "workbench actions table workbench panel markers view view as table"
  },
  {
    "command": "workbench.actions.table.workbench.panel.markers.view.viewAsTree",
    "to_ebd": "workbench actions table workbench panel markers view view as tree"
  },
  {
    "command": "workbench.actions.treeView.workbench.panel.markers.view.collapseAll",
    "to_ebd": "workbench actions tree view workbench panel markers view collapse all"
  },
  {
    "command": "workbench.actions.view.toggleProblems",
    "to_ebd": "workbench actions view toggle problems"
  },
  {
    "command": "workbench.actions.workbench.panel.comments.toggleResolvedComments",
    "to_ebd": "workbench actions workbench panel comments toggle resolved comments"
  },
  {
    "command": "workbench.actions.workbench.panel.comments.toggleUnResolvedComments",
    "to_ebd": "workbench actions workbench panel comments toggle un resolved comments"
  },
  {
    "command": "workbench.actions.workbench.panel.markers.view.toggleActiveFile",
    "to_ebd": "workbench actions workbench panel markers view toggle active file"
  },
  {
    "command": "workbench.actions.workbench.panel.markers.view.toggleErrors",
    "to_ebd": "workbench actions workbench panel markers view toggle errors"
  },
  {
    "command": "workbench.actions.workbench.panel.markers.view.toggleExcludedFiles",
    "to_ebd": "workbench actions workbench panel markers view toggle excluded files"
  },
  {
    "command": "workbench.actions.workbench.panel.markers.view.toggleInfos",
    "to_ebd": "workbench actions workbench panel markers view toggle infos"
  },
  {
    "command": "workbench.actions.workbench.panel.markers.view.toggleWarnings",
    "to_ebd": "workbench actions workbench panel markers view toggle warnings"
  },
  {
    "command": "workbench.debug.action.copyAll",
    "to_ebd": "workbench debug action copy all"
  },
  {
    "command": "workbench.debug.action.focusBreakpointsView",
    "to_ebd": "workbench debug action focus breakpoints view"
  },
  {
    "command": "workbench.debug.action.focusCallStackView",
    "to_ebd": "workbench debug action focus call stack view"
  },
  {
    "command": "workbench.debug.action.focusRepl",
    "to_ebd": "workbench debug action focus repl"
  },
  {
    "command": "workbench.debug.action.focusVariablesView",
    "to_ebd": "workbench debug action focus variables view"
  },
  {
    "command": "workbench.debug.action.focusWatchView",
    "to_ebd": "workbench debug action focus watch view"
  },
  {
    "command": "workbench.debug.breakPointsView.resetViewLocation",
    "to_ebd": "workbench debug break points view reset view location"
  },
  {
    "command": "workbench.debug.callStackView.resetViewLocation",
    "to_ebd": "workbench debug call stack view reset view location"
  },
  {
    "command": "workbench.debug.loadedScriptsView.focus",
    "to_ebd": "workbench debug loaded scripts view focus"
  },
  {
    "command": "workbench.debug.loadedScriptsView.resetViewLocation",
    "to_ebd": "workbench debug loaded scripts view reset view location"
  },
  {
    "command": "workbench.debug.panel.action.clearReplAction",
    "to_ebd": "workbench debug panel action clear repl action"
  },
  {
    "command": "workbench.debug.variablesView.resetViewLocation",
    "to_ebd": "workbench debug variables view reset view location"
  },
  {
    "command": "workbench.debug.viewlet.action.addFunctionBreakpointAction",
    "to_ebd": "workbench debug viewlet action add function breakpoint action"
  },
  {
    "command": "workbench.debug.viewlet.action.addWatchExpression",
    "to_ebd": "workbench debug viewlet action add watch expression"
  },
  {
    "command": "workbench.debug.viewlet.action.copyValue",
    "to_ebd": "workbench debug viewlet action copy value"
  },
  {
    "command": "workbench.debug.viewlet.action.disableAllBreakpoints",
    "to_ebd": "workbench debug viewlet action disable all breakpoints"
  },
  {
    "command": "workbench.debug.viewlet.action.enableAllBreakpoints",
    "to_ebd": "workbench debug viewlet action enable all breakpoints"
  },
  {
    "command": "workbench.debug.viewlet.action.reapplyBreakpointsAction",
    "to_ebd": "workbench debug viewlet action reapply breakpoints action"
  },
  {
    "command": "workbench.debug.viewlet.action.removeAllBreakpoints",
    "to_ebd": "workbench debug viewlet action remove all breakpoints"
  },
  {
    "command": "workbench.debug.viewlet.action.removeAllWatchExpressions",
    "to_ebd": "workbench debug viewlet action remove all watch expressions"
  },
  {
    "command": "workbench.debug.viewlet.action.removeBreakpoint",
    "to_ebd": "workbench debug viewlet action remove breakpoint"
  },
  {
    "command": "workbench.debug.viewlet.action.toggleBreakpointsActivatedAction",
    "to_ebd": "workbench debug viewlet action toggle breakpoints activated action"
  },
  {
    "command": "workbench.debug.viewlet.action.viewMemory",
    "to_ebd": "workbench debug viewlet action view memory"
  },
  {
    "command": "workbench.debug.watchExpressionsView.resetViewLocation",
    "to_ebd": "workbench debug watch expressions view reset view location"
  },
  {
    "command": "workbench.debug.welcome.focus",
    "to_ebd": "workbench debug welcome focus"
  },
  {
    "command": "workbench.debug.welcome.removeView",
    "to_ebd": "workbench debug welcome remove view"
  },
  {
    "command": "workbench.debug.welcome.resetViewLocation",
    "to_ebd": "workbench debug welcome reset view location"
  },
  {
    "command": "workbench.debug.welcome.toggleVisibility",
    "to_ebd": "workbench debug welcome toggle visibility"
  },
  {
    "command": "workbench.editSessions.actions.delete",
    "to_ebd": "workbench edit sessions actions delete"
  },
  {
    "command": "workbench.editSessions.actions.deleteAll",
    "to_ebd": "workbench edit sessions actions delete all"
  },
  {
    "command": "workbench.editSessions.actions.resetAuth",
    "to_ebd": "workbench edit sessions actions reset auth"
  },
  {
    "command": "workbench.editSessions.actions.resume",
    "to_ebd": "workbench edit sessions actions resume"
  },
  {
    "command": "workbench.editSessions.actions.resumeLatest",
    "to_ebd": "workbench edit sessions actions resume latest"
  },
  {
    "command": "workbench.editSessions.actions.showEditSessions",
    "to_ebd": "workbench edit sessions actions show edit sessions"
  },
  {
    "command": "workbench.editSessions.actions.showOutputChannel",
    "to_ebd": "workbench edit sessions actions show output channel"
  },
  {
    "command": "workbench.editSessions.actions.signIn",
    "to_ebd": "workbench edit sessions actions sign in"
  },
  {
    "command": "workbench.editSessions.actions.store",
    "to_ebd": "workbench edit sessions actions store"
  },
  {
    "command": "workbench.editSessions.actions.storeCurrent",
    "to_ebd": "workbench edit sessions actions store current"
  },
  {
    "command": "workbench.explorer.fileView.focus",
    "to_ebd": "workbench explorer file view focus"
  },
  {
    "command": "workbench.explorer.fileView.removeView",
    "to_ebd": "workbench explorer file view remove view"
  },
  {
    "command": "workbench.explorer.fileView.resetViewLocation",
    "to_ebd": "workbench explorer file view reset view location"
  },
  {
    "command": "workbench.explorer.fileView.toggleVisibility",
    "to_ebd": "workbench explorer file view toggle visibility"
  },
  {
    "command": "workbench.explorer.openEditorsView.removeView",
    "to_ebd": "workbench explorer open editors view remove view"
  },
  {
    "command": "workbench.explorer.openEditorsView.resetViewLocation",
    "to_ebd": "workbench explorer open editors view reset view location"
  },
  {
    "command": "workbench.explorer.openEditorsView.toggleVisibility",
    "to_ebd": "workbench explorer open editors view toggle visibility"
  },
  {
    "command": "workbench.extensions.action.addExtensionToWorkspaceRecommendations",
    "to_ebd": "workbench extensions action add extension to workspace recommendations"
  },
  {
    "command": "workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations",
    "to_ebd": "workbench extensions action add to workspace folder ignored recommendations"
  },
  {
    "command": "workbench.extensions.action.addToWorkspaceFolderRecommendations",
    "to_ebd": "workbench extensions action add to workspace folder recommendations"
  },
  {
    "command": "workbench.extensions.action.addToWorkspaceIgnoredRecommendations",
    "to_ebd": "workbench extensions action add to workspace ignored recommendations"
  },
  {
    "command": "workbench.extensions.action.addToWorkspaceRecommendations",
    "to_ebd": "workbench extensions action add to workspace recommendations"
  },
  {
    "command": "workbench.extensions.action.checkForUpdates",
    "to_ebd": "workbench extensions action check for updates"
  },
  {
    "command": "workbench.extensions.action.clearExtensionsSearchResults",
    "to_ebd": "workbench extensions action clear extensions search results"
  },
  {
    "command": "workbench.extensions.action.clearLanguage",
    "to_ebd": "workbench extensions action clear language"
  },
  {
    "command": "workbench.extensions.action.configure",
    "to_ebd": "workbench extensions action configure"
  },
  {
    "command": "workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions",
    "to_ebd": "workbench extensions action configure workspace folder recommended extensions"
  },
  {
    "command": "workbench.extensions.action.configureWorkspaceRecommendedExtensions",
    "to_ebd": "workbench extensions action configure workspace recommended extensions"
  },
  {
    "command": "workbench.extensions.action.copyExtension",
    "to_ebd": "workbench extensions action copy extension"
  },
  {
    "command": "workbench.extensions.action.copyExtensionId",
    "to_ebd": "workbench extensions action copy extension id"
  },
  {
    "command": "workbench.extensions.action.debugExtensionHost",
    "to_ebd": "workbench extensions action debug extension host"
  },
  {
    "command": "workbench.extensions.action.disableAll",
    "to_ebd": "workbench extensions action disable all"
  },
  {
    "command": "workbench.extensions.action.disableAllWorkspace",
    "to_ebd": "workbench extensions action disable all workspace"
  },
  {
    "command": "workbench.extensions.action.disableAutoUpdate",
    "to_ebd": "workbench extensions action disable auto update"
  },
  {
    "command": "workbench.extensions.action.enableAll",
    "to_ebd": "workbench extensions action enable all"
  },
  {
    "command": "workbench.extensions.action.enableAllWorkspace",
    "to_ebd": "workbench extensions action enable all workspace"
  },
  {
    "command": "workbench.extensions.action.enableAutoUpdate",
    "to_ebd": "workbench extensions action enable auto update"
  },
  {
    "command": "workbench.extensions.action.extensionHostProfile",
    "to_ebd": "workbench extensions action extension host profile"
  },
  {
    "command": "workbench.extensions.action.extensionUpdates",
    "to_ebd": "workbench extensions action extension updates"
  },
  {
    "command": "workbench.extensions.action.ignoreRecommendation",
    "to_ebd": "workbench extensions action ignore recommendation"
  },
  {
    "command": "workbench.extensions.action.install.specificVersion",
    "to_ebd": "workbench extensions action install specific version"
  },
  {
    "command": "workbench.extensions.action.installExtensionFromLocation",
    "to_ebd": "workbench extensions action install extension from location"
  },
  {
    "command": "workbench.extensions.action.installExtensions",
    "to_ebd": "workbench extensions action install extensions"
  },
  {
    "command": "workbench.extensions.action.installVSIX",
    "to_ebd": "workbench extensions action install vsix"
  },
  {
    "command": "workbench.extensions.action.installWorkspaceRecommendedExtensions",
    "to_ebd": "workbench extensions action install workspace recommended extensions"
  },
  {
    "command": "workbench.extensions.action.listBuiltInExtensions",
    "to_ebd": "workbench extensions action list built in extensions"
  },
  {
    "command": "workbench.extensions.action.listWorkspaceUnsupportedExtensions",
    "to_ebd": "workbench extensions action list workspace unsupported extensions"
  },
  {
    "command": "workbench.extensions.action.manageAuthorizedExtensionURIs",
    "to_ebd": "workbench extensions action manage authorized extension ur is"
  },
  {
    "command": "workbench.extensions.action.openExtensionsFolder",
    "to_ebd": "workbench extensions action open extensions folder"
  },
  {
    "command": "workbench.extensions.action.recentlyPublishedExtensions",
    "to_ebd": "workbench extensions action recently published extensions"
  },
  {
    "command": "workbench.extensions.action.refreshExtension",
    "to_ebd": "workbench extensions action refresh extension"
  },
  {
    "command": "workbench.extensions.action.reinstall",
    "to_ebd": "workbench extensions action reinstall"
  },
  {
    "command": "workbench.extensions.action.removeExtensionFromWorkspaceRecommendations",
    "to_ebd": "workbench extensions action remove extension from workspace recommendations"
  },
  {
    "command": "workbench.extensions.action.saveExtensionHostProfile",
    "to_ebd": "workbench extensions action save extension host profile"
  },
  {
    "command": "workbench.extensions.action.setColorTheme",
    "to_ebd": "workbench extensions action set color theme"
  },
  {
    "command": "workbench.extensions.action.setFileIconTheme",
    "to_ebd": "workbench extensions action set file icon theme"
  },
  {
    "command": "workbench.extensions.action.setProductIconTheme",
    "to_ebd": "workbench extensions action set product icon theme"
  },
  {
    "command": "workbench.extensions.action.showDisabledExtensions",
    "to_ebd": "workbench extensions action show disabled extensions"
  },
  {
    "command": "workbench.extensions.action.showEnabledExtensions",
    "to_ebd": "workbench extensions action show enabled extensions"
  },
  {
    "command": "workbench.extensions.action.showExtensionsForLanguage",
    "to_ebd": "workbench extensions action show extensions for language"
  },
  {
    "command": "workbench.extensions.action.showExtensionsWithIds",
    "to_ebd": "workbench extensions action show extensions with ids"
  },
  {
    "command": "workbench.extensions.action.showLanguageExtensions",
    "to_ebd": "workbench extensions action show language extensions"
  },
  {
    "command": "workbench.extensions.action.showPopularExtensions",
    "to_ebd": "workbench extensions action show popular extensions"
  },
  {
    "command": "workbench.extensions.action.showPreReleaseVersion",
    "to_ebd": "workbench extensions action show pre release version"
  },
  {
    "command": "workbench.extensions.action.showRecommendedExtensions",
    "to_ebd": "workbench extensions action show recommended extensions"
  },
  {
    "command": "workbench.extensions.action.showRecommendedKeymapExtensions",
    "to_ebd": "workbench extensions action show recommended keymap extensions"
  },
  {
    "command": "workbench.extensions.action.showReleasedVersion",
    "to_ebd": "workbench extensions action show released version"
  },
  {
    "command": "workbench.extensions.action.stopExtensionHostProfile",
    "to_ebd": "workbench extensions action stop extension host profile"
  },
  {
    "command": "workbench.extensions.action.switchToPreReleaseVersion",
    "to_ebd": "workbench extensions action switch to pre release version"
  },
  {
    "command": "workbench.extensions.action.switchToReleaseVersion",
    "to_ebd": "workbench extensions action switch to release version"
  },
  {
    "command": "workbench.extensions.action.toggleIgnoreExtension",
    "to_ebd": "workbench extensions action toggle ignore extension"
  },
  {
    "command": "workbench.extensions.action.undoIgnoredRecommendation",
    "to_ebd": "workbench extensions action undo ignored recommendation"
  },
  {
    "command": "workbench.extensions.action.updateAllExtensions",
    "to_ebd": "workbench extensions action update all extensions"
  },
  {
    "command": "workbench.extensions.command.installFromVSIX",
    "to_ebd": "workbench extensions command install from vsix"
  },
  {
    "command": "workbench.extensions.installMissingDependencies",
    "to_ebd": "workbench extensions install missing dependencies"
  },
  {
    "command": "workbench.files.action.acceptLocalChanges",
    "to_ebd": "workbench files action accept local changes"
  },
  {
    "command": "workbench.files.action.collapseExplorerFolders",
    "to_ebd": "workbench files action collapse explorer folders"
  },
  {
    "command": "workbench.files.action.compareFileWith",
    "to_ebd": "workbench files action compare file with"
  },
  {
    "command": "workbench.files.action.createFileFromExplorer",
    "to_ebd": "workbench files action create file from explorer"
  },
  {
    "command": "workbench.files.action.createFolderFromExplorer",
    "to_ebd": "workbench files action create folder from explorer"
  },
  {
    "command": "workbench.files.action.focusFilesExplorer",
    "to_ebd": "workbench files action focus files explorer"
  },
  {
    "command": "workbench.files.action.refreshFilesExplorer",
    "to_ebd": "workbench files action refresh files explorer"
  },
  {
    "command": "workbench.files.action.revertLocalChanges",
    "to_ebd": "workbench files action revert local changes"
  },
  {
    "command": "workbench.files.action.saveAllInGroup",
    "to_ebd": "workbench files action save all in group"
  },
  {
    "command": "workbench.files.action.showActiveFileInExplorer",
    "to_ebd": "workbench files action show active file in explorer"
  },
  {
    "command": "workbench.getCodeExchangeProxyEndpoints",
    "to_ebd": "workbench get code exchange proxy endpoints"
  },
  {
    "command": "workbench.notebook.layout.configure",
    "to_ebd": "workbench notebook layout configure"
  },
  {
    "command": "workbench.notebook.layout.configure.editorTitle",
    "to_ebd": "workbench notebook layout configure editor title"
  },
  {
    "command": "workbench.notebook.layout.gettingStarted",
    "to_ebd": "workbench notebook layout getting started"
  },
  {
    "command": "workbench.notebook.layout.select",
    "to_ebd": "workbench notebook layout select"
  },
  {
    "command": "workbench.notebook.layout.webview.reset",
    "to_ebd": "workbench notebook layout webview reset"
  },
  {
    "command": "workbench.output.action.clearOutput",
    "to_ebd": "workbench output action clear output"
  },
  {
    "command": "workbench.output.action.switchBetweenOutputs",
    "to_ebd": "workbench output action switch between outputs"
  },
  {
    "command": "workbench.output.action.toggleAutoScroll",
    "to_ebd": "workbench output action toggle auto scroll"
  },
  {
    "command": "workbench.panel.markers.resetViewContainerLocation",
    "to_ebd": "workbench panel markers reset view container location"
  },
  {
    "command": "workbench.panel.markers.view.focus",
    "to_ebd": "workbench panel markers view focus"
  },
  {
    "command": "workbench.panel.markers.view.removeView",
    "to_ebd": "workbench panel markers view remove view"
  },
  {
    "command": "workbench.panel.markers.view.resetViewLocation",
    "to_ebd": "workbench panel markers view reset view location"
  },
  {
    "command": "workbench.panel.markers.view.toggleVisibility",
    "to_ebd": "workbench panel markers view toggle visibility"
  },
  {
    "command": "workbench.panel.output.focus",
    "to_ebd": "workbench panel output focus"
  },
  {
    "command": "workbench.panel.output.removeView",
    "to_ebd": "workbench panel output remove view"
  },
  {
    "command": "workbench.panel.output.resetViewContainerLocation",
    "to_ebd": "workbench panel output reset view container location"
  },
  {
    "command": "workbench.panel.output.resetViewLocation",
    "to_ebd": "workbench panel output reset view location"
  },
  {
    "command": "workbench.panel.output.toggleVisibility",
    "to_ebd": "workbench panel output toggle visibility"
  },
  {
    "command": "workbench.panel.repl.resetViewContainerLocation",
    "to_ebd": "workbench panel repl reset view container location"
  },
  {
    "command": "workbench.panel.repl.view.focus",
    "to_ebd": "workbench panel repl view focus"
  },
  {
    "command": "workbench.panel.repl.view.removeView",
    "to_ebd": "workbench panel repl view remove view"
  },
  {
    "command": "workbench.panel.repl.view.resetViewLocation",
    "to_ebd": "workbench panel repl view reset view location"
  },
  {
    "command": "workbench.panel.repl.view.toggleVisibility",
    "to_ebd": "workbench panel repl view toggle visibility"
  },
  {
    "command": "workbench.profiles.actions.cleanupProfiles",
    "to_ebd": "workbench profiles actions cleanup profiles"
  },
  {
    "command": "workbench.profiles.actions.createEmptyProfile",
    "to_ebd": "workbench profiles actions create empty profile"
  },
  {
    "command": "workbench.profiles.actions.createFromCurrentProfile",
    "to_ebd": "workbench profiles actions create from current profile"
  },
  {
    "command": "workbench.profiles.actions.createProfile",
    "to_ebd": "workbench profiles actions create profile"
  },
  {
    "command": "workbench.profiles.actions.createTemporaryProfile",
    "to_ebd": "workbench profiles actions create temporary profile"
  },
  {
    "command": "workbench.profiles.actions.deleteProfile",
    "to_ebd": "workbench profiles actions delete profile"
  },
  {
    "command": "workbench.profiles.actions.exportProfile",
    "to_ebd": "workbench profiles actions export profile"
  },
  {
    "command": "workbench.profiles.actions.importProfile",
    "to_ebd": "workbench profiles actions import profile"
  },
  {
    "command": "workbench.profiles.actions.manage",
    "to_ebd": "workbench profiles actions manage"
  },
  {
    "command": "workbench.profiles.actions.profileEntry.",
    "to_ebd": "workbench profiles actions profile entry "
  },
  {
    "command": "workbench.profiles.actions.renameCurrentProfile",
    "to_ebd": "workbench profiles actions rename current profile"
  },
  {
    "command": "workbench.profiles.actions.renameProfile",
    "to_ebd": "workbench profiles actions rename profile"
  },
  {
    "command": "workbench.profiles.actions.resetWorkspaces",
    "to_ebd": "workbench profiles actions reset workspaces"
  },
  {
    "command": "workbench.profiles.actions.switchProfile",
    "to_ebd": "workbench profiles actions switch profile"
  },
  {
    "command": "workbench.profiles.actions.updateCurrentProfileShortName",
    "to_ebd": "workbench profiles actions update current profile short name"
  },
  {
    "command": "workbench.remoteTunnel.actions.configure",
    "to_ebd": "workbench remote tunnel actions configure"
  },
  {
    "command": "workbench.remoteTunnel.actions.connecting",
    "to_ebd": "workbench remote tunnel actions connecting"
  },
  {
    "command": "workbench.remoteTunnel.actions.copyToClipboard",
    "to_ebd": "workbench remote tunnel actions copy to clipboard"
  },
  {
    "command": "workbench.remoteTunnel.actions.learnMore",
    "to_ebd": "workbench remote tunnel actions learn more"
  },
  {
    "command": "workbench.remoteTunnel.actions.manage",
    "to_ebd": "workbench remote tunnel actions manage"
  },
  {
    "command": "workbench.remoteTunnel.actions.showLog",
    "to_ebd": "workbench remote tunnel actions show log"
  },
  {
    "command": "workbench.remoteTunnel.actions.turnOff",
    "to_ebd": "workbench remote tunnel actions turn off"
  },
  {
    "command": "workbench.remoteTunnel.actions.turnOn",
    "to_ebd": "workbench remote tunnel actions turn on"
  },
  {
    "command": "workbench.scm.action.collapseAllRepositories",
    "to_ebd": "workbench scm action collapse all repositories"
  },
  {
    "command": "workbench.scm.action.expandAllRepositories",
    "to_ebd": "workbench scm action expand all repositories"
  },
  {
    "command": "workbench.scm.action.repositories.setSortKey.discoveryTime",
    "to_ebd": "workbench scm action repositories set sort key discovery time"
  },
  {
    "command": "workbench.scm.action.repositories.setSortKey.name",
    "to_ebd": "workbench scm action repositories set sort key name"
  },
  {
    "command": "workbench.scm.action.repositories.setSortKey.path",
    "to_ebd": "workbench scm action repositories set sort key path"
  },
  {
    "command": "workbench.scm.action.setListViewMode",
    "to_ebd": "workbench scm action set list view mode"
  },
  {
    "command": "workbench.scm.action.setSortKey.name",
    "to_ebd": "workbench scm action set sort key name"
  },
  {
    "command": "workbench.scm.action.setSortKey.path",
    "to_ebd": "workbench scm action set sort key path"
  },
  {
    "command": "workbench.scm.action.setSortKey.status",
    "to_ebd": "workbench scm action set sort key status"
  },
  {
    "command": "workbench.scm.action.setTreeViewMode",
    "to_ebd": "workbench scm action set tree view mode"
  },
  {
    "command": "workbench.scm.focus",
    "to_ebd": "workbench scm focus"
  },
  {
    "command": "workbench.scm.removeView",
    "to_ebd": "workbench scm remove view"
  },
  {
    "command": "workbench.scm.repositories.focus",
    "to_ebd": "workbench scm repositories focus"
  },
  {
    "command": "workbench.scm.repositories.removeView",
    "to_ebd": "workbench scm repositories remove view"
  },
  {
    "command": "workbench.scm.repositories.resetViewLocation",
    "to_ebd": "workbench scm repositories reset view location"
  },
  {
    "command": "workbench.scm.repositories.toggleVisibility",
    "to_ebd": "workbench scm repositories toggle visibility"
  },
  {
    "command": "workbench.scm.resetViewLocation",
    "to_ebd": "workbench scm reset view location"
  },
  {
    "command": "workbench.scm.toggleVisibility",
    "to_ebd": "workbench scm toggle visibility"
  },
  {
    "command": "workbench.trust.configure",
    "to_ebd": "workbench trust configure"
  },
  {
    "command": "workbench.trust.manage",
    "to_ebd": "workbench trust manage"
  },
  {
    "command": "workbench.userData.actions.cancelTurnOn",
    "to_ebd": "workbench user data actions cancel turn on"
  },
  {
    "command": "workbench.userData.actions.openSyncBackupsFolder",
    "to_ebd": "workbench user data actions open sync backups folder"
  },
  {
    "command": "workbench.userData.actions.signin",
    "to_ebd": "workbench user data actions signin"
  },
  {
    "command": "workbench.userData.actions.turningOn",
    "to_ebd": "workbench user data actions turning on"
  },
  {
    "command": "workbench.userDataSync.actions.acceptMerges",
    "to_ebd": "workbench user data sync actions accept merges"
  },
  {
    "command": "workbench.userDataSync.actions.configure",
    "to_ebd": "workbench user data sync actions configure"
  },
  {
    "command": "workbench.userDataSync.actions.help",
    "to_ebd": "workbench user data sync actions help"
  },
  {
    "command": "workbench.userDataSync.actions.manage",
    "to_ebd": "workbench user data sync actions manage"
  },
  {
    "command": "workbench.userDataSync.actions.settings",
    "to_ebd": "workbench user data sync actions settings"
  },
  {
    "command": "workbench.userDataSync.actions.showConflicts",
    "to_ebd": "workbench user data sync actions show conflicts"
  },
  {
    "command": "workbench.userDataSync.actions.showLog",
    "to_ebd": "workbench user data sync actions show log"
  },
  {
    "command": "workbench.userDataSync.actions.showSyncedData",
    "to_ebd": "workbench user data sync actions show synced data"
  },
  {
    "command": "workbench.userDataSync.actions.syncNow",
    "to_ebd": "workbench user data sync actions sync now"
  },
  {
    "command": "workbench.userDataSync.actions.turnOff",
    "to_ebd": "workbench user data sync actions turn off"
  },
  {
    "command": "workbench.userDataSync.actions.turnOn",
    "to_ebd": "workbench user data sync actions turn on"
  },
  {
    "command": "workbench.view.debug.resetViewContainerLocation",
    "to_ebd": "workbench view debug reset view container location"
  },
  {
    "command": "workbench.view.editSessions.resetViewContainerLocation",
    "to_ebd": "workbench view edit sessions reset view container location"
  },
  {
    "command": "workbench.view.explorer.resetViewContainerLocation",
    "to_ebd": "workbench view explorer reset view container location"
  },
  {
    "command": "workbench.view.extension.dockerView",
    "to_ebd": "workbench view extension docker view"
  },
  {
    "command": "workbench.view.extension.dockerView.resetViewContainerLocation",
    "to_ebd": "workbench view extension docker view reset view container location"
  },
  {
    "command": "workbench.view.extension.jupyter",
    "to_ebd": "workbench view extension jupyter"
  },
  {
    "command": "workbench.view.extension.jupyter",
    "to_ebd": "workbench view extension jupyter"
  },
  {
    "command": "workbench.view.extension.jupyter",
    "to_ebd": "workbench view extension jupyter"
  },
  {
    "command": "workbench.view.extension.jupyter.resetViewContainerLocation",
    "to_ebd": "workbench view extension jupyter reset view container location"
  },
  {
    "command": "workbench.view.extension.references",
    "to_ebd": "workbench view extension references"
  },
  {
    "command": "workbench.view.extension.references",
    "to_ebd": "workbench view extension references"
  },
  {
    "command": "workbench.view.extension.test",
    "to_ebd": "workbench view extension test"
  },
  {
    "command": "workbench.view.extension.test.resetViewContainerLocation",
    "to_ebd": "workbench view extension test reset view container location"
  },
  {
    "command": "workbench.view.extensions.resetViewContainerLocation",
    "to_ebd": "workbench view extensions reset view container location"
  },
  {
    "command": "workbench.view.remote",
    "to_ebd": "workbench view remote"
  },
  {
    "command": "workbench.view.remote.resetViewContainerLocation",
    "to_ebd": "workbench view remote reset view container location"
  },
  {
    "command": "workbench.view.scm.resetViewContainerLocation",
    "to_ebd": "workbench view scm reset view container location"
  },
  {
    "command": "workbench.view.search.focus",
    "to_ebd": "workbench view search focus"
  },
  {
    "command": "workbench.view.search.removeView",
    "to_ebd": "workbench view search remove view"
  },
  {
    "command": "workbench.view.search.resetViewContainerLocation",
    "to_ebd": "workbench view search reset view container location"
  },
  {
    "command": "workbench.view.search.resetViewLocation",
    "to_ebd": "workbench view search reset view location"
  },
  {
    "command": "workbench.view.search.toggleVisibility",
    "to_ebd": "workbench view search toggle visibility"
  },
  {
    "command": "workbench.view.sync",
    "to_ebd": "workbench view sync"
  },
  {
    "command": "workbench.view.sync.resetViewContainerLocation",
    "to_ebd": "workbench view sync reset view container location"
  },
  {
    "command": "workbench.view.testing.focus",
    "to_ebd": "workbench view testing focus"
  },
  {
    "command": "workbench.view.testing.removeView",
    "to_ebd": "workbench view testing remove view"
  },
  {
    "command": "workbench.view.testing.resetViewLocation",
    "to_ebd": "workbench view testing reset view location"
  },
  {
    "command": "workbench.view.testing.toggleVisibility",
    "to_ebd": "workbench view testing toggle visibility"
  },
  {
    "command": "workbench.views.editSessions.data.focus",
    "to_ebd": "workbench views edit sessions data focus"
  },
  {
    "command": "workbench.views.editSessions.data.resetViewLocation",
    "to_ebd": "workbench views edit sessions data reset view location"
  },
  {
    "command": "workbench.views.extensions.builtinFeatureExtensions.focus",
    "to_ebd": "workbench views extensions builtin feature extensions focus"
  },
  {
    "command": "workbench.views.extensions.builtinFeatureExtensions.resetViewLocation",
    "to_ebd": "workbench views extensions builtin feature extensions reset view location"
  },
  {
    "command": "workbench.views.extensions.builtinProgrammingLanguageExtensions.focus",
    "to_ebd": "workbench views extensions builtin programming language extensions focus"
  },
  {
    "command": "workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation",
    "to_ebd": "workbench views extensions builtin programming language extensions reset view location"
  },
  {
    "command": "workbench.views.extensions.builtinThemeExtensions.focus",
    "to_ebd": "workbench views extensions builtin theme extensions focus"
  },
  {
    "command": "workbench.views.extensions.builtinThemeExtensions.resetViewLocation",
    "to_ebd": "workbench views extensions builtin theme extensions reset view location"
  },
  {
    "command": "workbench.views.extensions.deprecatedExtensions.focus",
    "to_ebd": "workbench views extensions deprecated extensions focus"
  },
  {
    "command": "workbench.views.extensions.deprecatedExtensions.resetViewLocation",
    "to_ebd": "workbench views extensions deprecated extensions reset view location"
  },
  {
    "command": "workbench.views.extensions.disabled.focus",
    "to_ebd": "workbench views extensions disabled focus"
  },
  {
    "command": "workbench.views.extensions.disabled.resetViewLocation",
    "to_ebd": "workbench views extensions disabled reset view location"
  },
  {
    "command": "workbench.views.extensions.enabled.focus",
    "to_ebd": "workbench views extensions enabled focus"
  },
  {
    "command": "workbench.views.extensions.enabled.resetViewLocation",
    "to_ebd": "workbench views extensions enabled reset view location"
  },
  {
    "command": "workbench.views.extensions.installed.focus",
    "to_ebd": "workbench views extensions installed focus"
  },
  {
    "command": "workbench.views.extensions.installed.resetViewLocation",
    "to_ebd": "workbench views extensions installed reset view location"
  },
  {
    "command": "workbench.views.extensions.marketplace.focus",
    "to_ebd": "workbench views extensions marketplace focus"
  },
  {
    "command": "workbench.views.extensions.marketplace.resetViewLocation",
    "to_ebd": "workbench views extensions marketplace reset view location"
  },
  {
    "command": "workbench.views.extensions.otherRecommendations.focus",
    "to_ebd": "workbench views extensions other recommendations focus"
  },
  {
    "command": "workbench.views.extensions.otherRecommendations.resetViewLocation",
    "to_ebd": "workbench views extensions other recommendations reset view location"
  },
  {
    "command": "workbench.views.extensions.popular.focus",
    "to_ebd": "workbench views extensions popular focus"
  },
  {
    "command": "workbench.views.extensions.popular.resetViewLocation",
    "to_ebd": "workbench views extensions popular reset view location"
  },
  {
    "command": "workbench.views.extensions.searchBuiltin.focus",
    "to_ebd": "workbench views extensions search builtin focus"
  },
  {
    "command": "workbench.views.extensions.searchBuiltin.resetViewLocation",
    "to_ebd": "workbench views extensions search builtin reset view location"
  },
  {
    "command": "workbench.views.extensions.searchDisabled.focus",
    "to_ebd": "workbench views extensions search disabled focus"
  },
  {
    "command": "workbench.views.extensions.searchDisabled.resetViewLocation",
    "to_ebd": "workbench views extensions search disabled reset view location"
  },
  {
    "command": "workbench.views.extensions.searchEnabled.focus",
    "to_ebd": "workbench views extensions search enabled focus"
  },
  {
    "command": "workbench.views.extensions.searchEnabled.resetViewLocation",
    "to_ebd": "workbench views extensions search enabled reset view location"
  },
  {
    "command": "workbench.views.extensions.searchInstalled.focus",
    "to_ebd": "workbench views extensions search installed focus"
  },
  {
    "command": "workbench.views.extensions.searchInstalled.resetViewLocation",
    "to_ebd": "workbench views extensions search installed reset view location"
  },
  {
    "command": "workbench.views.extensions.searchOutdated.focus",
    "to_ebd": "workbench views extensions search outdated focus"
  },
  {
    "command": "workbench.views.extensions.searchOutdated.resetViewLocation",
    "to_ebd": "workbench views extensions search outdated reset view location"
  },
  {
    "command": "workbench.views.extensions.searchRecentlyUpdated.focus",
    "to_ebd": "workbench views extensions search recently updated focus"
  },
  {
    "command": "workbench.views.extensions.searchRecentlyUpdated.resetViewLocation",
    "to_ebd": "workbench views extensions search recently updated reset view location"
  },
  {
    "command": "workbench.views.extensions.searchWorkspaceUnsupported.focus",
    "to_ebd": "workbench views extensions search workspace unsupported focus"
  },
  {
    "command": "workbench.views.extensions.searchWorkspaceUnsupported.resetViewLocation",
    "to_ebd": "workbench views extensions search workspace unsupported reset view location"
  },
  {
    "command": "workbench.views.extensions.untrustedPartiallySupportedExtensions.focus",
    "to_ebd": "workbench views extensions untrusted partially supported extensions focus"
  },
  {
    "command": "workbench.views.extensions.untrustedPartiallySupportedExtensions.resetViewLocation",
    "to_ebd": "workbench views extensions untrusted partially supported extensions reset view location"
  },
  {
    "command": "workbench.views.extensions.untrustedUnsupportedExtensions.focus",
    "to_ebd": "workbench views extensions untrusted unsupported extensions focus"
  },
  {
    "command": "workbench.views.extensions.untrustedUnsupportedExtensions.resetViewLocation",
    "to_ebd": "workbench views extensions untrusted unsupported extensions reset view location"
  },
  {
    "command": "workbench.views.extensions.virtualPartiallySupportedExtensions.focus",
    "to_ebd": "workbench views extensions virtual partially supported extensions focus"
  },
  {
    "command": "workbench.views.extensions.virtualPartiallySupportedExtensions.resetViewLocation",
    "to_ebd": "workbench views extensions virtual partially supported extensions reset view location"
  },
  {
    "command": "workbench.views.extensions.virtualUnsupportedExtensions.focus",
    "to_ebd": "workbench views extensions virtual unsupported extensions focus"
  },
  {
    "command": "workbench.views.extensions.virtualUnsupportedExtensions.resetViewLocation",
    "to_ebd": "workbench views extensions virtual unsupported extensions reset view location"
  },
  {
    "command": "workbench.views.extensions.workspaceRecommendations.focus",
    "to_ebd": "workbench views extensions workspace recommendations focus"
  },
  {
    "command": "workbench.views.extensions.workspaceRecommendations.resetViewLocation",
    "to_ebd": "workbench views extensions workspace recommendations reset view location"
  },
  {
    "command": "workbench.views.sync.conflicts.focus",
    "to_ebd": "workbench views sync conflicts focus"
  },
  {
    "command": "workbench.views.sync.conflicts.resetViewLocation",
    "to_ebd": "workbench views sync conflicts reset view location"
  },
  {
    "command": "workbench.views.sync.localActivity.focus",
    "to_ebd": "workbench views sync local activity focus"
  },
  {
    "command": "workbench.views.sync.localActivity.resetViewLocation",
    "to_ebd": "workbench views sync local activity reset view location"
  },
  {
    "command": "workbench.views.sync.machines.focus",
    "to_ebd": "workbench views sync machines focus"
  },
  {
    "command": "workbench.views.sync.machines.resetViewLocation",
    "to_ebd": "workbench views sync machines reset view location"
  },
  {
    "command": "workbench.views.sync.remoteActivity.focus",
    "to_ebd": "workbench views sync remote activity focus"
  },
  {
    "command": "workbench.views.sync.remoteActivity.resetViewLocation",
    "to_ebd": "workbench views sync remote activity reset view location"
  },
  {
    "command": "workbench.views.sync.troubleshoot.focus",
    "to_ebd": "workbench views sync troubleshoot focus"
  },
  {
    "command": "workbench.views.sync.troubleshoot.resetViewLocation",
    "to_ebd": "workbench views sync troubleshoot reset view location"
  }
]